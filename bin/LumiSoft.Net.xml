<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LumiSoft.Net</name>
    </assembly>
    <members>
        <member name="T:LumiSoft.Net.ValidateIP_EventArgs">
            <summary>
            Provides data for the ValidateIPAddress event for servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ValidateIP_EventArgs.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.ConnectedIP">
            <summary>
            IP address of computer, which is sending mail to here.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.LocalEndPoint">
            <summary>
            Gets local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.RemoteEndPoint">
            <summary>
            Gets remote endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.Validated">
            <summary>
            Gets or sets if IP is allowed access.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.SessionTag">
            <summary>
            Gets or sets user data what is stored to session.Tag property.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.ErrorText">
            <summary>
            Gets or sets error text what is sent to connected socket. NOTE: This is only used if Validated = false.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Error_EventArgs">
            <summary>
            Provides data for the SysError event for servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Error_EventArgs.#ctor(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Default constructor.
            </summary>
            <param name="x"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.Exception">
            <summary>
            Occured error's exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.StackTrace">
            <summary>
            Occured error's stacktrace.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.Text">
            <summary>
            Gets comment text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AsyncResultState">
            <summary>
            (For internal use only). This class provides holder for IAsyncResult interface and extends it's features.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.#ctor(System.Object,System.Delegate,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="asyncObject">Caller's async object.</param>
            <param name="asyncDelegate">Delegate which is called asynchronously.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.SetAsyncResult(System.IAsyncResult)">
            <summary>
            Sets AsyncResult value.
            </summary>
            <param name="asyncResult">Asycnhronous result to wrap.</param>
        </member>
        <member name="M:LumiSoft.Net.AsyncResultState.CompletedCallback(System.IAsyncResult)">
            <summary>
            This method is called by AsyncDelegate when asynchronous operation completes. 
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncObject">
            <summary>
            Gets or sets caller's async object.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncDelegate">
            <summary>
            Gets delegate which is called asynchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncResult">
            <summary>
            Gets source asynchronous result what we wrap.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.IsEndCalled">
            <summary>
            Gets if the user called the End*() method.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncResultState.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_Presence">
            <summary>
            This class implements SIP presence server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Presence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Presence.Subscribe(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Handles SUBSCRIBE method.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Presence.Notify(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Handles NOTIFY method.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_WarningCodes">
            <summary>
            SIP Warning Codes. Defined in RFC 3261 27.2.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x300_Incompatible_network_protocol">
            <summary>
            One or more network protocols contained in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x301_Incompatible_network_address_formats">
            <summary>
            One or more network address formats contained in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x302_Incompatible_network_address_formats">
            <summary>
            One or more transport protocols described in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x303_Incompatible_bandwidth_units">
            <summary>
            One or more bandwidth measurement units contained in the session description were not understood.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x304_Media_type_not_available">
            <summary>
            One or more media types contained in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x305_Incompatible_media_format">
            <summary>
            One or more media formats contained in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x306_Attribute_not_understood">
            <summary>
            One or more of the media attributes in the session description are not supported.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x307_Session_description_parameter_not_understood">
            <summary>
            A parameter other than those listed above was not understood.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x330_Multicast_not_available">
            <summary>
            The site where the user is located does not support multicast.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x331_Unicast_not_available">
            <summary>
            The site where the user is located does not support unicast communication 
            (usually due to the presence of a firewall).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x370_Insufficient_bandwidth">
            <summary>
            The bandwidth specified in the session description or defined by the media 
            exceeds that known to be available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x399_Miscellaneous_warning">
            <summary>
            The warning text can include arbitrary information to be presented to a human user or logged. 
            A system receiving this warning MUST NOT take any automated action.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState">
            <summary>
            Implements SIP "Subscription-State" value. Defined in RFC 3265.
            </summary>
            <remarks>
            <code>
            RFC 3265 Syntax:
                Subscription-State     = substate-value *( SEMI subexp-params )
                substate-value         = "active" / "pending" / "terminated" / extension-substate
                extension-substate     = token
                subexp-params          =   ("reason" EQUAL event-reason-value)
                                         / ("expires" EQUAL delta-seconds)
                                         / ("retry-after" EQUAL delta-seconds)
                                         / generic-param
                event-reason-value     = "deactivated" / "probation" / "rejected" / "timeout" / "giveup"
                                          / "noresource" / event-reason-extension
                event-reason-extension = token
            </code>
            </remarks>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams">
            <summary>
            This base class for SIP data types what has parameters support.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Value">
            <summary>
            This base class for all SIP data types.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Value.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Value.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses single value from specified reader.
            </summary>
            <param name="reader">Reader what contains </param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Value.ToStringValue">
            <summary>
            Convert this to string value.
            </summary>
            <returns>Returns this as string value.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams.ParseParameters(LumiSoft.Net.StringReader)">
            <summary>
            Parses parameters from specified reader. Reader position must be where parameters begin.
            </summary>
            <param name="reader">Reader from where to read parameters.</param>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams.ParametersToString">
            <summary>
            Convert parameters to valid parameters string.
            </summary>
            <returns>Returns parameters string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams.Parameters">
            <summary>
            Gets via parameters.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Parse(System.String)">
            <summary>
            Parses "Subscription-State" from specified value.
            </summary>
            <param name="value">SIP "Subscription-State" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Subscription-State" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.ToStringValue">
            <summary>
            Converts this to valid "Subscription-State" value.
            </summary>
            <returns>Returns "Subscription-State" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Value">
            <summary>
            Gets or sets subscription state value. Known values are defined in SubscriptionState class.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when empty string is passed or value is not token.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Reason">
            <summary>
            Gets or sets 'reason' parameter value. Known reason values are defined in EventReason class.
            Value null means not specified. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Expires">
            <summary>
            Gets or sets 'expires' parameter value. Value -1 means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when negative value(except -1) is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.RetryAfter">
            <summary>
            Gets or sets 'expires' parameter value. Value -1 means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when negative value(except -1) is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.SubscriptionState">
            <summary>
            This class holds 'substate-value' values.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.SubscriptionState.active">
            <summary>
            The subscription has been accepted and (in general) has been authorized.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.SubscriptionState.pending">
            <summary>
            The subscription has been received by the notifier, but there is insufficient policy
            information to grant or deny the subscription yet.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.SubscriptionState.terminated">
            <summary>
            The subscriber should consider the subscription terminated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason">
            <summary>
            This class holds 'event-reason-value' values.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.deactivated">
            <summary>
            The subscription has been terminated, but the subscriber SHOULD retry immediately 
            with a new subscription.  One primary use of such a status code is to allow migration of 
            subscriptions between nodes.  The "retry-after" parameter has no semantics for "deactivated".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.probation">
            <summary>
            The subscription has been terminated, but the client SHOULD retry at some later time. 
            If a "retry-after" parameter is also present, the client SHOULD wait at least the number of
            seconds specified by that parameter before attempting to re-subscribe.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.rejected">
            <summary>
            The subscription has been terminated due to change in authorization policy. 
            Clients SHOULD NOT attempt to re-subscribe. The "retry-after" parameter has no 
            semantics for "rejected".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.timeout">
            <summary>
            The subscription has been terminated because it was not refreshed before it expired. 
            Clients MAY re-subscribe immediately. The "retry-after" parameter has no semantics for "timeout".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.giveup">
            <summary>
            The subscription has been terminated because the notifier could not obtain authorization in a 
            timely fashion.  If a "retry-after" parameter is also present, the client SHOULD wait at least
            the number of seconds specified by that parameter before attempting to re-subscribe; otherwise, 
            the client MAY retry immediately, but will likely get put back into pending state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.noresource">
            <summary>
            The subscription has been terminated because the resource state which was being monitored 
            no longer exists. Clients SHOULD NOT attempt to re-subscribe. The "retry-after" parameter 
            has no semantics for "noresource".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_HiEntry">
            <summary>
            Implements SIP "hi-entry" value. Defined in RFC 4244.
            </summary>
            <remarks>
            <code>
            RFC 4244 Syntax:
                hi-entry = hi-targeted-to-uri *( SEMI hi-param )
                hi-targeted-to-uri= name-addr
                hi-param = hi-index / hi-extension
                hi-index = "index" EQUAL 1*DIGIT *(DOT 1*DIGIT)
                hi-extension = generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.Parse(System.String)">
            <summary>
            Parses "hi-entry" from specified value.
            </summary>
            <param name="value">SIP "hi-entry" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "hi-entry" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.ToStringValue">
            <summary>
            Converts this to valid "hi-entry" value.
            </summary>
            <returns>Returns "hi-entry" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.Address">
            <summary>
            Gets or sets address.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.Index">
            <summary>
            Gets or sets 'index' parameter value. Value -1 means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_EventType">
            <summary>
            Implements SIP "event-type" value. Defined in RFC 3265.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_EventType.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_EventType.Parse(System.String)">
            <summary>
            Parses "event-type" from specified value.
            </summary>
            <param name="value">SIP "event-type" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_EventType.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "event-type" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_EventType.ToStringValue">
            <summary>
            Converts this to valid "event-type" value.
            </summary>
            <returns>Returns "event-type" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_EventType.EventType">
            <summary>
            Gets or sets event type.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value passed as value.</exception>
        </member>
        <member name="T:LumiSoft.Net.Log.Logger">
            <summary>
            General logging module.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.Int64,System.String)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Adds read log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.Int64,System.String)">
            <summary>
            Add write log entry.
            </summary>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Add write log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Add write log entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String)">
            <summary>
            Adds text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String,System.String)">
            <summary>
            Adds text entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddText(System.String,System.Security.Principal.GenericIdentity,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Adds text entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddException(System.String,System.Security.Principal.GenericIdentity,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Exception)">
            <summary>
            Adds exception entry.
            </summary>
            <param name="id">Log entry ID.</param>
            <param name="text">Log text.</param>
            <param name="userIdentity">Authenticated user identity.</param>
            <param name="localEP">Local IP endpoint.</param>
            <param name="remoteEP">Remote IP endpoint.</param>
            <param name="exception">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.OnWriteLog(LumiSoft.Net.Log.LogEntry)">
            <summary>
            Raises WriteLog event.
            </summary>
            <param name="entry">Log entry.</param>
        </member>
        <member name="E:LumiSoft.Net.Log.Logger.WriteLog">
            <summary>
            Is raised when new log entry is available.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_SequenceSet">
            <summary>
            IMAP sequence-set. RFC 3501.
            <code>
            Examples:
            	2        -> seq-number (2)
            	2:4      -> seq-range  (from 2 - 4)
            	2:*      -> seq-range  (from 2 to last)
            	2,3,10:* -> sequence-set (seq-number,seq-number,seq-range)
            	                       (2,3, 10 - last)
            	
            	NOTES:
            		*) comma separates sequence parts
            		*) * means maximum value.
            </code>
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Parse(System.String)">
            <summary>
            Parses sequence-set from specified string. Throws exception if invalid sequnce-set value.
            </summary>
            <param name="sequenceSetString">Sequence-set string.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Parse(System.String,System.Int64)">
            <summary>
            Parses sequence-set from specified string. Throws exception if invalid sequnce-set value.
            </summary>
            <param name="sequenceSetString">Sequence-set string.</param>
            <param name="seqMaxValue">Maximum value. This if for replacement of * value.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Contains(System.Int64)">
            <summary>
            Gets if sequence set contains specified number.
            </summary>
            <param name="seqNumber">Number to check.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.ToSequenceSetString">
            <summary>
            Converts IMAP_SequenceSet to IMAP sequence-set string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Parse_Seq_Number(System.String,System.Int64)">
            <summary>
            Parses seq-number from specified value. Throws exception if invalid seq-number value.
            </summary>
            <param name="seqNumberValue">Integer number or *.</param>
            <param name="seqMaxValue">Maximum value. This if for replacement of * value.</param>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range">
            <summary>
            Implements range.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range.#ctor(System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Range value.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range.#ctor(System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="start">Range start.</param>
            <param name="end">Range end.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range.Start">
            <summary>
            Gets range start.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range.End">
            <summary>
            Gets range end.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_SOA">
            <summary>
            SOA record class.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_base">
            <summary>
            Base class for DNS records.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_base.#ctor(LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="recordType">Record type (A,MX, ...).</param>
            <param name="ttl">TTL (time to live) value in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_base.RecordType">
            <summary>
            Gets record type (A,MX,...).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_base.TTL">
            <summary>
            Gets TTL (time to live) value in seconds.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_SOA.#ctor(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="nameServer">Name server.</param>
            <param name="adminEmail">Zone administrator email.</param>
            <param name="serial">Version number of the original copy of the zone.</param>
            <param name="refresh">Time interval(in seconds) before the zone should be refreshed.</param>
            <param name="retry">Time interval(in seconds) that should elapse before a failed refresh should be retried.</param>
            <param name="expire">Time value(in seconds) that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.</param>
            <param name="minimum">Minimum TTL(in seconds) field that should be exported with any RR from this zone.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.NameServer">
            <summary>
            Gets name server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.AdminEmail">
            <summary>
            Gets zone administrator email.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Serial">
            <summary>
            Gets version number of the original copy of the zone.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Refresh">
            <summary>
            Gets time interval(in seconds) before the zone should be refreshed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Retry">
            <summary>
            Gets time interval(in seconds) that should elapse before a failed refresh should be retried.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Expire">
            <summary>
            Gets time value(in seconds) that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SOA.Minimum">
            <summary>
            Gets minimum TTL(in seconds) field that should be exported with any RR from this zone. 
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_Namespace">
            <summary>
            IMAP namespace. Defined in RFC 2342.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Namespace.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Namespace name.</param>
            <param name="delimiter">Namespace hierarchy delimiter.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Namespace.Name">
            <summary>
            Gets namespace name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Namespace.Delimiter">
            <summary>
            Gets namespace hierarchy delimiter.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_e_Started">
            <summary>
            This class provided data for <b cref="E:LumiSoft.Net.SMTP.Server.SMTP_Session.Started">SMTP_Session.Started</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_e_Started.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner SMTP server session.</param>
            <param name="reply">SMTP server reply.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> or <b>reply</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_Started.Session">
            <summary>
            Gets owner SMTP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_Started.Reply">
            <summary>
            Gets or sets SMTP server reply.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call">
            <summary>
            This class represents B2BUA call.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.#ctor(LumiSoft.Net.SIP.Proxy.SIP_B2BUA,LumiSoft.Net.SIP.Stack.SIP_Dialog,LumiSoft.Net.SIP.Stack.SIP_Dialog)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner B2BUA server.</param>
            <param name="caller">Caller side dialog.</param>
            <param name="callee">Callee side dialog.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.m_pCaller_RequestReceived(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Is called when caller sends new request.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.m_pCaller_Terminated(System.Object,System.EventArgs)">
            <summary>
            This method is called when caller dialog has terminated, normally this happens 
            when dialog gets BYE request.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.m_pCallee_ResponseReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when callee dialog client transaction receives response.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.m_pCallee_RequestReceived(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Is called when callee sends new request.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.m_pCallee_Terminated(System.Object,System.EventArgs)">
            <summary>
            This method is called when callee dialog has terminated, normally this happens 
            when dialog gets BYE request.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.m_pCaller_ResponseReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when caller dialog client transaction receives response.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.Terminate">
            <summary>
            Terminates call.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.CopyMessage(LumiSoft.Net.SIP.Message.SIP_Message,LumiSoft.Net.SIP.Message.SIP_Message,System.String[])">
            <summary>
            Copies header fileds from 1 message to antother.
            </summary>
            <param name="source">Source message.</param>
            <param name="destination">Destination message.</param>
            <param name="exceptHeaders">Header fields not to copy.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.StartTime">
            <summary>
            Gets call start time.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.CallID">
            <summary>
            Gets current call ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.CallerDialog">
            <summary>
            Gets caller SIP dialog.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.CalleeDialog">
            <summary>
            Gets callee SIP dialog.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call.IsTimedOut">
            <summary>
            Gets if call has timed out and needs to be terminated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Source_Local">
            <summary>
            This class represents local source what we send.
            </summary>
            <remarks>Source indicates an entity sending packets, either RTP and/or RTCP.
            Sources what send RTP packets are called "active", only RTCP sending ones are "passive".
            </remarks>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Source">
            <summary>
            This class represents RTP source.
            </summary>
            <remarks>Source indicates an entity sending packets, either RTP and/or RTCP.
            Sources what send RTP packets are called "active", only RTCP sending ones are "passive".
            Source can be local(we send RTP and/or RTCP remote party) or remote(remote party sends RTP and/or RTCP to us).
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.#ctor(LumiSoft.Net.RTP.RTP_Session,System.UInt32)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner RTP session.</param>
            <param name="ssrc">Synchronization source ID.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.Close(System.String)">
            <summary>
            Closes specified source.
            </summary>
            <param name="closeReason">Closing reason. Value null means not specified.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.SetRtcpEP(System.Net.IPEndPoint)">
            <summary>
            Sets property <b>RtcpEP</b> value.
            </summary>
            <param name="ep">IP end point.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.SetRtpEP(System.Net.IPEndPoint)">
            <summary>
            Sets property <b>RtpEP</b> value.
            </summary>
            <param name="ep">IP end point.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.SetActivePassive(System.Boolean)">
            <summary>
            Sets source active/passive state.
            </summary>
            <param name="active">If true, source switches to active, otherwise to passive.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.SetLastRtcpPacket(System.DateTime)">
            <summary>
            Sets <b>LastRtcpPacket</b> property value.
            </summary>
            <param name="time">Time.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.SetLastRtpPacket(System.DateTime)">
            <summary>
            Sets <b>LastRtpPacket</b> property value.
            </summary>
            <param name="time">Time.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.SetRR(LumiSoft.Net.RTP.RTCP_Packet_ReportBlock)">
            <summary>
            Sets property LastRR value.
            </summary>
            <param name="rr">RTCP RR report.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>rr</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.GenerateNewSSRC">
            <summary>
            Generates new SSRC value. This must be called only if SSRC collision of local source.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.SetState(LumiSoft.Net.RTP.RTP_SourceState)">
            <summary>
            Sets source state.
            </summary>
            <param name="state">New source state.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.OnClosed">
            <summary>
            Raises <b>Closed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.OnDisposing">
            <summary>
            Raises <b>Disposing</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source.OnStateChaged">
            <summary>
            Raises <b>StateChanged</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.State">
            <summary>
            Gets source state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.Session">
            <summary>
            Gets owner RTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.SSRC">
            <summary>
            Gets synchronization source ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.RtcpEP">
            <summary>
            Gets source RTCP end point. Value null means source haven't sent any RTCP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.RtpEP">
            <summary>
            Gets source RTP end point. Value null means source haven't sent any RTCP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.IsLocal">
            <summary>
            Gets if source is local or remote source.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.LastActivity">
            <summary>
            Gets last time when source sent RTP or RCTP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.LastRtcpPacket">
            <summary>
            Gets last time when source sent RTCP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.LastRtpPacket">
            <summary>
            Gets last time when source sent RTP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.LastRRTime">
            <summary>
            Gets last time when source sent RTCP RR report.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.CloseReason">
            <summary>
            Gets source closing reason. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source.CName">
            <summary>
            Gets source CNAME. Value null means that source not binded to participant.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Source.Closed">
            <summary>
            Is raised when source is closed (by BYE).
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Source.Disposing">
            <summary>
            Is raised when source is disposing.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Source.StateChanged">
            <summary>
            Is raised when source state has changed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Local.#ctor(LumiSoft.Net.RTP.RTP_Session,System.UInt32,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner RTP session.</param>
            <param name="ssrc">Synchronization source ID.</param>
            <param name="rtcpEP">RTCP end point.</param>
            <param name="rtpEP">RTP end point.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b>,<b>rtcpEP</b> or <b>rtpEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Local.SendApplicationPacket(LumiSoft.Net.RTP.RTCP_Packet_APP)">
            <summary>
            Sends specified application packet to the RTP session target(s).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <param name="packet">Is raised when <b>packet</b> is null reference.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Local.Close(System.String)">
            <summary>
            Closes this source, sends BYE to remote party.
            </summary>
            <param name="closeReason">Stream closing reason text what is reported to the remote party. Value null means not specified.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Local.CreateStream">
            <summary>
            Creates RTP send stream for this source.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called more than 1 times(source already created).</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Local.SendRtpPacket(LumiSoft.Net.RTP.RTP_Packet)">
            <summary>
            Sends specified RTP packet to the session remote party.
            </summary>
            <param name="packet">RTP packet.</param>
            <returns>Returns packet size in bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>packet</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>CreateStream</b> method has been not called.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source_Local.IsLocal">
            <summary>
            Returns true.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source_Local.Participant">
            <summary>
            Gets local participant. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source_Local.Stream">
            <summary>
            Gets the stream we send. Value null means that source is passive and doesn't send any RTP data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source_Local.CName">
            <summary>
            Gets source CNAME. Value null means that source not binded to participant.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock">
            <summary>
            This class represents RTCP sender report(SR) or reciver report(RR) packet report block.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.#ctor(System.UInt32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ssrc">Source ID.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.Parse(System.Byte[],System.Int32)">
            <summary>
            Parses RTCP report block (part of SR or RR packet) from specified buffer.
            </summary>
            <param name="buffer">Buffer from where to read report block.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores report block to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.SSRC">
            <summary>
            Gets the SSRC identifier of the source to which the information in this reception report block pertains.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.FractionLost">
            <summary>
            Gets or sets the fraction of RTP data packets from source SSRC lost since the previous SR or 
            RR packet was sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.CumulativePacketsLost">
            <summary>
            Gets or sets total number of RTP data packets from source SSRC that have
            been lost since the beginning of reception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.ExtendedHighestSeqNo">
            <summary>
            Gets or sets extended highest sequence number received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.Jitter">
            <summary>
            Gets or sets an estimate of the statistical variance of the RTP data packet
            interarrival time, measured in timestamp units and expressed as an unsigned integer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.LastSR">
            <summary>
            Gets or sets The middle 32 bits out of 64 in the NTP timestamp (as explained in Section 4) received as part of 
            the most recent RTCP sender report (SR) packet from source SSRC_n. If no SR has been received yet, the field is set to zero.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_ReportBlock.DelaySinceLastSR">
            <summary>
            Gets or sets the delay, expressed in units of 1/65536 seconds, between receiving the last SR packet from 
            source SSRC_n and sending this reception report block.  If no SR packet has been received yet from SSRC_n, 
            the DLSR field is set to zero.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Participant">
            <summary>
            This is base class for <b>RTP_Participant_Local</b> and <b>RTP_Participant_Remote</b> class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="cname">Canonical name of participant.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cname</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant.EnsureSource(LumiSoft.Net.RTP.RTP_Source)">
            <summary>
            Adds specified source to participant if participant doesn't contain the specified source.
            </summary>
            <param name="source">RTP source.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant.OnRemoved">
            <summary>
            Raises <b>Removed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant.OnSourceAdded(LumiSoft.Net.RTP.RTP_Source)">
            <summary>
            Raises <b>SourceAdded</b> event.
            </summary>
            <param name="source">RTP source.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant.OnSourceRemoved(LumiSoft.Net.RTP.RTP_Source)">
            <summary>
            Raises <b>SourceRemoved</b> event.
            </summary>
            <param name="source">RTP source.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant.CNAME">
            <summary>
            Gets canonical name of participant.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant.Sources">
            <summary>
            Gets the sources what participant owns(sends).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Participant.Removed">
            <summary>
            Is raised when participant disjoins(timeout or BYE all sources) the RTP multimedia session.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Participant.SourceAdded">
            <summary>
            Is raised when participant gets new RTP source.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Participant.SourceRemoved">
            <summary>
            Is raised when RTP source removed from(Timeout or BYE) participant.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Reader">
            <summary>
            MIME lexical tokens parser.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Value to read.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Atom">
            <summary>
            Reads RFC 2822 'atom' from source stream.
            </summary>
            <returns>Returns RFC 2822 'atom' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.DotAtom">
            <summary>
            Reads RFC 2822 'dot-atom' from source stream.
            </summary>
            <returns>Returns RFC 2822 'dot-atom' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Token">
            <summary>
            Reads RFC 2045 (section 5) 'token' from source stream.
            </summary>
            <returns>Returns RFC 2045 (section 5) 'token' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Comment">
            <summary>
            Reads RFC 822 'comment' from source stream.
            </summary>
            <returns>Returns RFC 822 'comment' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Word">
            <summary>
            Reads RFC 2822 (section 3.2.6) 'word' from source stream.
            </summary>
            <returns>Returns RFC 2822 (section 3.2.6) 'word' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.EncodedWord">
            <summary>
            Reads RFC 2047 'encoded-word' from source stream.
            </summary>
            <returns>Returns RFC 2047 'encoded-word' or null if end of stream reached.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream has no encoded-word at current position.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.QuotedString">
            <summary>
            Reads RFC 822 'quoted-string' from source stream.
            </summary>
            <returns>Returns RFC 822 'quoted-string' or null if end of stream reached.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream has no quoted-string at current position.</exception>
            <exception cref="T:System.ArgumentException">Is raised when not valid 'quoted-string'.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Value">
            <summary>
            Reads RFC 2045 (section 5) 'token' from source stream.
            </summary>
            <returns>Returns 2045 (section 5) 'token' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Phrase">
            <summary>
            Reads RFC 2047 (section 5) 'phrase' from source stream.
            </summary>
            <returns>Returns RFC 2047 (section 5) 'phrase' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Text">
            <summary>
            Reads RFC 822 '*text' from source stream.
            </summary>
            <returns>Returns RFC 822 '*text' or null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.ToFirstChar">
            <summary>
            Reads all white-space chars + CR and LF.
            </summary>
            <returns>Returns readed chars.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Char(System.Boolean)">
            <summary>
            Reads 1 char from source stream.
            </summary>
            <param name="readToFirstChar">Specifies if postion is moved to char(skips white spaces).</param>
            <returns>Returns readed char or -1 if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.Peek(System.Boolean)">
            <summary>
            Shows next char in source stream, this method won't consume that char.
            </summary>
            <param name="readToFirstChar">Specifies if postion is moved to char(skips white spaces).</param>
            <returns>Returns next char in source stream, returns -1 if end of stream.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.StartsWith(System.String)">
            <summary>
            Gets if source stream valu starts with the specified value. Compare is case-insensitive.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if source steam satrs with specified string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.ToEnd">
            <summary>
            Reads all data from current postion to the end.
            </summary>
            <returns>Retruns readed data. Returns null if end of string is reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsAlpha(System.Char)">
            <summary>
            Gets if the specified char is RFC 822 'ALPHA'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 822 'ALPHA'.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsAText(System.Char)">
            <summary>
            Gets if the specified char is RFC 2822 'atext'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2822 'atext'.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsDotAtom(System.String)">
            <summary>
            Gets if the specified value can be represented as "dot-atom".
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if the specified value can be represented as "dot-atom".</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsToken(System.String)">
            <summary>
            Gets if specified valu is RFC 2045 (section 5) 'token'.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Returns true if specified char is RFC 2045 (section 5) 'token'.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsToken(System.Char)">
            <summary>
            Gets if the specified char is RFC 2045 (section 5) 'token'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2045 (section 5) 'token'.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.IsAttributeChar(System.Char)">
            <summary>
            Gets if the specified char is RFC 2231 (section 7) 'attribute-char'.
            </summary>
            <param name="c">Char to check.</param>
            <returns>Returns true if specified char is RFC 2231 (section 7) 'attribute-char'.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns>Returns value between parenthesized.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Reader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns>Returns readed string or null if end of string reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>delimiters</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Reader.Available">
            <summary>
            Gets number of chars has left for processing.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.MultiStream">
            <summary>
            This class combines multiple stream into one stream for reading.
            The most common usage for that stream is when you need to insert some data to the beginning of some stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.AppendStream(System.IO.Stream)">
            <summary>
            Appends this stream to read queue.
            </summary>
            <param name="stream">Stream to add.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when one of the source streams won't support <b>Length</b> property.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.MultiStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR">
            <summary>
            NAPRT(Naming Authority Pointer) resource record. Defined in RFC 3403.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="order">Oorder in which the NAPTR records MUST be processed.</param>
            <param name="preference">Order in which NAPTR records with equal Order values SHOULD be processed.</param>
            <param name="flags">Flags which control the rewriting and interpretation of the fields in the record.</param>
            <param name="services">Services related to this record.</param>
            <param name="regexp">Regular expression that is applied to the original string.</param>
            <param name="replacement">Regular expressions replacement value.</param>
            <param name="ttl">Time to live value in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Order">
            <summary>
            Gets order in which the NAPTR records MUST be processed in order to accurately 
            represent the ordered list of Rules.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Preference">
            <summary>
            Gets the order in which NAPTR records with equal Order values SHOULD be processed, 
            low numbers being processed before high numbers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Flags">
            <summary>
            Gets flags which control the rewriting and interpretation of the fields in the record.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Services">
            <summary>
            Gets services related to this record. Known values can be get from: http://www.iana.org/assignments/enum-services.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Regexp">
            <summary>
            Gets regular expression that is applied to the original string held by the client in order to 
            construct the next domain name to lookup.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NAPTR.Replacement">
            <summary>
            Gets regular expressions replacement value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_AAAA">
            <summary>
            DNS AAAA resource record.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_AAAA.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_AAAA.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_AAAA.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.SaslAuthTypes">
            <summary>
            SASL authentications
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.None">
            <summary>
            Non authentication
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Plain">
            <summary>
            Plain text authentication. For POP3 USER/PASS commands, for IMAP LOGIN command.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Login">
            <summary>
            LOGIN.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Cram_md5">
            <summary>
            CRAM-MD5
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Digest_md5">
            <summary>
            DIGEST-MD5.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.All">
            <summary>
            All authentications.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WebDav.WebDav_Prop">
            <summary>
            This class represents WebDav 'DAV:prop' element. Defined in RFC 4918 14.18.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_Prop.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_Prop.Parse(System.Xml.XmlNode)">
            <summary>
            Parses WebDav_Prop from 'DAV:prop' element.
            </summary>
            <param name="propNode">The 'DAV:prop' element</param>
            <returns>Returns DAV prop.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when when <b>propNode</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when there are any parsing error.</exception>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_Prop.Properties">
            <summary>
            Gets properties.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_Prop.Prop_ResourceType">
            <summary>
            Gets WebDav 'DAV:resourcetype' property value. Returns null if no such property available.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_ContentType">
             <summary>
             Represents "Content-Type:" header. Defined in RFC 2045 5.1.
             </summary>
             <remarks>
             <code>
             RFC 2045 5.1.
             In the Augmented BNF notation of RFC 822, a Content-Type header field
             value is defined as follows:
            
                 content := "Content-Type" ":" type "/" subtype
                            *(";" parameter)
                            ; Matching of media type and subtype
                            ; is ALWAYS case-insensitive.
            
                 type := discrete-type / composite-type
            
                 discrete-type := "text" / "image" / "audio" / "video" / "application" / extension-token
            
                 composite-type := "message" / "multipart" / extension-token
            
                 extension-token := ietf-token / x-token
            
                 ietf-token := (An extension token defined by a standards-track RFC and registered with IANA.)
            
                 x-token := (The two characters "X-" or "x-" followed, with no intervening white space, by any token)
            
                 subtype := extension-token / iana-token
            
                 iana-token := (A publicly-defined extension token. Tokens of this form must be registered with IANA as specified in RFC 2048.)
            
                 parameter := attribute "=" value
            
                 attribute := token
                              ; Matching of attributes
                              ; is ALWAYS case-insensitive.
            
                 value := token / quoted-string
            
                 token := 1*(any (US-ASCII) CHAR except SPACE, CTLs,or tspecials)
            
                 tspecials :=  "(" / ")" / "&lt;" / "&gt;" / "@" /
                               "," / ";" / ":" / "\" / "
                               "/" / "[" / "]" / "?" / "="
                               ; Must be in quoted-string,
                               ; to use within parameter values
             </code>
             </remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h">
            <summary>
            This is base class for MIME header fields. Defined in RFC 2045 3.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.ToString">
            <summary>
            Returns header field as string.
            </summary>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.ValueToString">
            <summary>
            Returns header field value as string.
            </summary>
            <returns>Returns header field value as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h.ValueToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field value as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.
            If encoding needed, UTF-8 is strongly reccomended if not sure.</param>
            <returns>Returns header field value as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h.Name">
            <summary>
            Gets header field name. For example "Content-Type".
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentType.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">Media type with subtype. For example <b>text/plain</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentType.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentType.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentType.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Name">
            <summary>
            Returns always "Content-Type".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Type">
            <summary>
            Gets media type. For example: application,image,text, ... .
            </summary>
            <remarks>The official list of reggistered types are http://www.iana.org/assignments/media-types .</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.SubType">
            <summary>
            Gets media sub-type. For example for text/plain, sub-type is 'plain'.
            </summary>
            <remarks>The official list of reggistered types are http://www.iana.org/assignments/media-types .</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.TypeWithSubype">
            <summary>
            Gets media type with subtype as Type/SubType. Well known value are in <see cref="T:LumiSoft.Net.MIME.MIME_MediaTypes">MIME_MediaTypes</see>. For example: text/plain.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Parameters">
            <summary>
            Gets Content-Type parameters collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Param_Name">
            <summary>
            Gets or sets Content-Type <b>name</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Param_Charset">
            <summary>
            Gets or sets Content-Type <b>charset</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentType.Param_Boundary">
            <summary>
            Gets or sets Content-Type <b>boundary</b> parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord">
            <summary>
            Implements 'encoded-word' encoding. Defined in RFC 2047.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.#ctor(LumiSoft.Net.MIME.MIME_EncodedWordEncoding,System.Text.Encoding)">
            <summary>
            Default constructor.
            </summary>
            <param name="encoding">Encoding to use to encode text.</param>
            <param name="charset">Charset to use for encoding. If not sure UTF-8 is strongly recommended.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>charset</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.Encode(System.String)">
            <summary>
            Encodes specified text if it contains 8-bit chars, otherwise text won't be encoded.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded text.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.Decode(System.String)">
            <summary>
            Decodes specified encoded-word.
            </summary>
            <param name="text">Encoded-word value.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.MustEncode(System.String)">
            <summary>
            Checks if specified text must be encoded.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns true if specified text must be encoded, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.EncodeS(LumiSoft.Net.MIME.MIME_EncodedWordEncoding,System.Text.Encoding,System.Boolean,System.String)">
            <summary>
            Encodes specified text if it contains 8-bit chars, otherwise text won't be encoded.
            </summary>
            <param name="encoding">Encoding to use to encode text.</param>
            <param name="charset">Charset to use for encoding. If not sure UTF-8 is strongly recommended.</param>
            <param name="split">If true, words are splitted after 75 chars.</param>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>charset</b> or <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.DecodeS(System.String)">
            <summary>
            Decodes non-ascii word with MIME <b>encoded-word</b> method. Defined in RFC 2047 2.
            </summary>
            <param name="word">MIME encoded-word value.</param>
            <returns>Returns decoded word.</returns>
            <remarks>If <b>word</b> is not encoded-word or has invalid syntax, <b>word</b> is leaved as is.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>word</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Encoding_EncodedWord.Split">
            <summary>
            Gets or sets if long words(over 75 char) are splitted.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Application">
            <summary>
            This class represents MIME application/xxx bodies. Defined in RFC 2046 4.2.
            </summary>
            <remarks>
            The "application" media type is to be used for discrete data which do
            not fit in any of the other categories, and particularly for data to
            be processed by some type of application program.
            </remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_SinglepartBase">
            <summary>
            This class is base class for singlepart media bodies like: text,video,audio,image.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b">
            <summary>
            This class is base class for MIME entity bodies.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b.SetParent(LumiSoft.Net.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b.Entity">
            <summary>
            Gets body owner entity. Returns null if body not bounded to any entity yet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b.MediaType">
            <summary>
            Gets body media type. For example: 'text/plain'.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetParent(LumiSoft.Net.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.GetEncodedDataStream">
            <summary>
            Gets body encoded data stream.
            </summary>
            <returns>Returns body encoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetEncodedData(System.String,System.IO.Stream)">
            <summary>
            Sets body encoded data from specified stream.
            </summary>
            <param name="contentTransferEncoding">Content-Transfer-Encoding in what encoding <b>stream</b> data is.</param>
            <param name="stream">Stream data to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentTransferEncoding</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumennts has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.GetDataStream">
            <summary>
            Gets body decoded data stream.
            </summary>
            <returns>Returns body decoded data stream.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
            <remarks>The returned stream should be closed/disposed as soon as it's not needed any more.</remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetData(System.IO.Stream,System.String)">
            <summary>
            Sets body data from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>transferEncoding</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.SetDataFromFile(System.String,System.String)">
            <summary>
            Sets body data from the specified file.
            </summary>
            <param name="file">File name with optional path.</param>
            <param name="transferEncoding">Specifies content-transfer-encoding to use to encode data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.EncodedDataSize">
            <summary>
            Gets encoded body data size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.EncodedData">
            <summary>
            Gets body encoded data. 
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.GetEncodedDataStream"/> method instead.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.Data">
            <summary>
            Gets body decoded data.
            </summary>
            <remarks>NOTE: Use this property with care, because body data may be very big and you may run out of memory.
            For bigger data use <see cref="M:LumiSoft.Net.MIME.MIME_b_SinglepartBase.GetDataStream"/> method instead.</remarks>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_SinglepartBase.EncodedStream">
            <summary>
            Gets encoded data stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Application.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Application.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>strean</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_Group">
            <summary>
            This class represents "group" address. Defined in RFC 5322 3.4.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_Address">
            <summary>
            This class represents RFC 5322 3.4 Address class. 
            This class is base class for <see cref="T:LumiSoft.Net.Mail.Mail_t_Mailbox">mailbox address</see> and <see cref="T:LumiSoft.Net.Mail.Mail_t_Group">group address</see>.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Address.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Address.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Group.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name. Value null means not specified.</param>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Group.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Group.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Group.DisplayName">
            <summary>
            Gets or sets diplay name. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Group.Members">
            <summary>
            Gets groiup address members collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager">
            <summary>
            HTTP digest authentication nonce manager.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.Dispose">
            <summary>
            Cleans up nay resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.CreateNonce">
            <summary>
            Creates new nonce and adds it to active nonces collection.
            </summary>
            <returns>Returns new created nonce.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceExists(System.String)">
            <summary>
            Checks if specified nonce exists in active nonces collection.
            </summary>
            <param name="nonce">Nonce to check.</param>
            <returns>Returns true if nonce exists in active nonces collection, otherwise returns false.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.RemoveNonce(System.String)">
            <summary>
            Removes specified nonce from active nonces collection.
            </summary>
            <param name="nonce">Nonce to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.RemoveExpiredNonces">
            <summary>
            Removes not used nonces what has expired.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.ExpireTime">
            <summary>
            Gets or sets nonce expire time in seconds.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry">
            <summary>
            This class represents nonce entry in active nonces collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="nonce"></param>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.Nonce">
            <summary>
            Gets nonce value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.CreateTime">
            <summary>
            Gets time when this nonce entry was created.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Attribute">
            <summary>
            Implements SDP attribute.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.Parse(System.String)">
            <summary>
            Parses media from "a" SDP message field.
            </summary>
            <param name="aValue">"a" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.ToValue">
            <summary>
            Converts this to valid "a" string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Attribute.Name">
            <summary>
            Gets attribute name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Attribute.Value">
            <summary>
            Gets or sets attribute value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_Message">
            <summary>
            Implements SIP message. This is base class for SIP_Request and SIP_Response. Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Message.#ctor">
            <summary>
            Default constuctor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Message.InternalParse(System.Byte[])">
            <summary>
            Parses SIP message from specified byte array.
            </summary>
            <param name="data">SIP message data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Message.InternalParse(System.IO.Stream)">
            <summary>
            Parses SIP message from specified stream.
            </summary>
            <param name="stream">SIP message stream.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Message.InternalToStream(System.IO.Stream)">
            <summary>
            Stores SIP_Message to specified stream.
            </summary>
            <param name="stream">Stream where to store SIP_Message.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Header">
            <summary>
            Gets direct access to header.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Accept">
            <summary>
            Gets or sets what features end point supports.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AcceptContact">
            <summary>
            Gets or sets Accept-Contact header value. Defined in RFC 3841.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AcceptEncoding">
            <summary>
            Gets encodings what end point supports. Example: Accept-Encoding: gzip.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AcceptLanguage">
            <summary>
            Gets preferred languages for reason phrases, session descriptions, or
            status responses carried as message bodies in the response. If no Accept-Language 
            header field is present, the server SHOULD assume all languages are acceptable to the client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AcceptResourcePriority">
            <summary>
            Gets Accept-Resource-Priority headers. Defined in RFC 4412.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AlertInfo">
            <summary>
            Gets AlertInfo values collection. When present in an INVITE request, the Alert-Info header 
            field specifies an alternative ring tone to the UAS. When present in a 180 (Ringing) response, 
            the Alert-Info header field specifies an alternative ringback tone to the UAC.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Allow">
            <summary>
            Gets methods collection which is supported by the UA which generated the message.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AllowEvents">
            <summary>
            Gets Allow-Events header which indicates the event packages supported by the client. Defined in rfc 3265.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AuthenticationInfo">
            <summary>
            Gets the Authentication-Info header fields which provides for mutual authentication 
            with HTTP Digest.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Authorization">
            <summary>
            Gets the Authorization header fields which contains authentication credentials of a UA.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.CallID">
            <summary>
            Gets or sets the Call-ID header field which uniquely identifies a particular invitation or all 
            registrations of a particular client.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.CallInfo">
            <summary>
            Gets the Call-Info header field which provides additional information about the
            caller or callee, depending on whether it is found in a request or response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Contact">
            <summary>
            Gets contact header fields. The Contact header field provides a SIP or SIPS URI that can be used
            to contact that specific instance of the UA for subsequent requests.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentDisposition">
            <summary>
            Gets or sets the Content-Disposition header field which describes how the message body
            or, for multipart messages, a message body part is to be interpreted by the UAC or UAS.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentEncoding">
            <summary>
            Gets the Content-Encodings which is used as a modifier to the "media-type". When present, 
            its value indicates what additional content codings have been applied to the entity-body, 
            and thus what decoding mechanisms MUST be applied in order to obtain the media-type referenced 
            by the Content-Type header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentLanguage">
            <summary>
            Gets content languages.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentLength">
            <summary>
            Gets SIP request content data size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentType">
            <summary>
            Gets or sets the Content-Type header field which indicates the media type of the
            message-body sent to the recipient.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.CSeq">
            <summary>
            Gets or sets command sequence number and the request method.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Date">
            <summary>
            Gets or sets date and time. Value DateTime.MinValue means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ErrorInfo">
            <summary>
            Gets the Error-Info header field which provides a pointer to additional
            information about the error status response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Event">
            <summary>
            Gets or sets Event header. Defined in RFC 3265.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Expires">
            <summary>
            Gets or sets relative time after which the message (or content) expires.
            Value -1 means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.From">
            <summary>
            Gets or sets initiator of the request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.HistoryInfo">
            <summary>
            Gets History-Info headers. Defined in RFC 4244.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Identity">
            <summary>
            Identity header value. Value null means not specified. Defined in RFC 4474.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.IdentityInfo">
            <summary>
            Gets or sets Identity-Info header value. Value null means not specified. 
            Defined in RFC 4474.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.InReplyTo">
            <summary>
            Gets the In-Reply-To header fields which enumerates the Call-IDs that this call 
            references or returns.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Join">
            <summary>
            Gets or sets Join header which indicates that a new dialog (created by the INVITE in which 
            the Join header field in contained) should be joined with a dialog identified by the header 
            field, and any associated dialogs or conferences. Defined in 3911. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.MaxForwards">
            <summary>
            Gets or sets limit the number of proxies or gateways that can forward the request 
            to the next downstream server.
            Value -1 means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.MimeVersion">
            <summary>
            Gets or sets mime version. Currently 1.0 is only defined value.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.MinExpires">
            <summary>
            Gets or sets minimum refresh interval supported for soft-state elements managed by that server.
            Value -1 means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.MinSE">
            <summary>
            Gets or sets Min-SE header which indicates the minimum value for the session interval, 
            in units of delta-seconds. Defined in 4028. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Organization">
            <summary>
            Gets or sets organization name which the SIP element issuing the request or response belongs.
            Value null means not specified.
            </summary>        
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Path">
            <summary>
            Gets an Path header. It is used in conjunction with SIP REGISTER requests and with 200 
            class messages in response to REGISTER (REGISTER responses). Defined in rfc 3327.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Priority">
            <summary>
            Gest or sets priority that the SIP request should have to the receiving human or its agent.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ProxyAuthenticate">
            <summary>
            Gets an proxy authentication challenge.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ProxyAuthorization">
            <summary>
            Gest credentials containing the authentication information of the user agent 
            for the proxy and/or realm of the resource being requested.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ProxyRequire">
            <summary>
            Gets proxy-sensitive features that must be supported by the proxy.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RAck">
            <summary>
            Gets or sets RAck header. Defined in 3262. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Reason">
            <summary>
            Gets the Reason header. Defined in rfc 3326.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RecordRoute">
            <summary>
            Gets the Record-Route header fields what is inserted by proxies in a request to
            force future requests in the dialog to be routed through the proxy.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ReferSub">
            <summary>
            Gets or sets Refer-Sub header. Defined in rfc 4488. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ReferTo">
            <summary>
            Gets or sets Refer-To header. Defined in rfc 3515. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ReferredBy">
            <summary>
            Gets or sets Referred-By header. Defined in rfc 3892. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RejectContact">
            <summary>
            Gets Reject-Contact headers. Defined in RFC 3841.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Replaces">
            <summary>
            Gets or sets Replaces header. Defined in rfc 3891. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ReplyTo">
            <summary>
            Gets logical return URI that may be different from the From header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RequestDisposition">
            <summary>
            Gets or sets Request-Disposition header. The Request-Disposition header field specifies caller preferences for
            how a server should process a request. Defined in rfc 3841.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Require">
            <summary>
            Gets options that the UAC expects the UAS to support in order to process the request.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ResourcePriority">
            <summary>
            Gets Resource-Priority headers. Defined in RFC 4412.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RetryAfter">
            <summary>
            Gets or sets how many seconds the service is expected to be unavailable to the requesting client.
            Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Route">
            <summary>
            Gets force routing for a request through the listed set of proxies.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RSeq">
            <summary>
            Gets or sets RSeq header. Value -1 means that value not specified. Defined in rfc 3262.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SecurityClient">
            <summary>
            Gets Security-Client headers. Defined in RFC 3329.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SecurityServer">
            <summary>
            Gets Security-Server headers. Defined in RFC 3329.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SecurityVerify">
            <summary>
            Gets Security-Verify headers. Defined in RFC 3329.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Server">
            <summary>
            Gets or sets the software used by the UAS to handle the request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ServiceRoute">
            <summary>
            Gets the Service-Route header. Defined in rfc 3608.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SessionExpires">
            <summary>
            Gets or sets Session-Expires expires header. Value null means that value not specified. 
            Defined in rfc 4028.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SIPETag">
            <summary>
            Gets or sets SIP-ETag header value. Value null means not specified. Defined in RFC 3903.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SIPIfMatch">
            <summary>
            Gets or sets SIP-ETag header value. Value null means not specified. Defined in RFC 3903.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Subject">
            <summary>
            Gets or sets call subject text.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SubscriptionState">
            <summary>
            Gets or sets Subscription-State header value. Value null means that value not specified. 
            Defined in RFC 3265. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Supported">
            <summary>
            Gets extensions supported by the UAC or UAS. Known values are defined in SIP_OptionTags class.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.TargetDialog">
            <summary>
            Gets or sets Target-Dialog header value. Value null means that value not specified. 
            Defined in RFC 4538.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Timestamp">
            <summary>
            Gets or sets when the UAC sent the request to the UAS. 
            Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.To">
            <summary>
            Gets or sets logical recipient of the request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Unsupported">
            <summary>
            Gets features not supported by the UAS.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.UserAgent">
            <summary>
            Gets or sets information about the UAC originating the request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Via">
            <summary>
            Gets Via header fields.The Via header field indicates the transport used for the transaction
            and identifies the location where the response is to be sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Warning">
            <summary>
            Gets additional information about the status of a response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.WWWAuthenticate">
            <summary>
            Gets or authentication challenge.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Data">
            <summary>
            Gets or sets content data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_MessageType">
            <summary>
            This enum specifies STUN message type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingRequest">
            <summary>
            STUN message is binding request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingResponse">
            <summary>
            STUN message is binding request response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingErrorResponse">
            <summary>
            STUN message is binding requesr error response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretRequest">
            <summary>
            STUN message is "shared secret" request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretResponse">
            <summary>
            STUN message is "shared secret" request response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretErrorResponse">
            <summary>
            STUN message is "shared secret" request error response.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Methods">
            <summary>
            This class represents known SIP request methods.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.ACK">
            <summary>
            ACK method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.BYE">
            <summary>
            BYE method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.CANCEL">
            <summary>
            CANCEL method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.INFO">
            <summary>
            INFO method. Defined in RFC 2976.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.INVITE">
            <summary>
            INVITE method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.MESSAGE">
            <summary>
            MESSAGE method. Defined in RFC 3428.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.NOTIFY">
            <summary>
            NOTIFY method. Defined in RFC 3265.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.OPTIONS">
            <summary>
            OPTIONS method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.PRACK">
            <summary>
            PRACK method. Defined in RFC 3262.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.PUBLISH">
            <summary>
            PUBLISH method. Defined in RFC 3903.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.REFER">
            <summary>
            REFER method. Defined in RFC 3515.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.REGISTER">
            <summary>
            REGISTER method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.SUBSCRIBE">
            <summary>
            SUBSCRIBE method. Defined in RFC 3265.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.UPDATE">
            <summary>
            UPDATE method. Defined in RFC 3311.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.Name">
            <summary>
            vCard name implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Name.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="lastName">Last name.</param>
            <param name="firstName">First name.</param>
            <param name="additionalNames">Comma separated additional names.</param>
            <param name="honorificPrefix">Honorific prefix.</param>
            <param name="honorificSuffix">Honorific suffix.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Name.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Name.ToValueString">
            <summary>
            Converts item to vCard N structure string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Name.Parse(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Parses name info from vCard N item.
            </summary>
            <param name="item">vCard N item.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.LastName">
            <summary>
            Gets last name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.FirstName">
            <summary>
            Gets first name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.AdditionalNames">
            <summary>
            Gets comma separated additional names.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.HonorificPerfix">
            <summary>
            Gets honorific prefix.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.HonorificSuffix">
            <summary>
            Gets honorific suffix.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MediaType_enum">
            <summary>
            Rfc 2046,2387 Media Types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_plain">
            <summary>
            Simple text data. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_html">
            <summary>
            Html data. Defined in Rfc 2854.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_xml">
            <summary>
            Xml data. Defined in Rfc 3023 3.1.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_rtf">
            <summary>
            Rich text (RTF) data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image">
            <summary>
            Image data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_gif">
            <summary>
            Gif image. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_tiff">
            <summary>
            Tiff image.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_jpeg">
            <summary>
            Jpeg image. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Audio">
            <summary>
            Audio data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Video">
            <summary>
            Video data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Application">
            <summary>
            Some other kind of data, typically either uninterpreted binary data or information to be processed by an application.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Application_octet_stream">
            <summary>
            The "octet-stream" subtype is used to indicate that a body contains	arbitrary binary data. Defined in Rfc 4046 4.5.1.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_mixed">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_alternative">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_parallel">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_related">
            <summary>
            Data consisting of multiple entities of	independent data types. (Rfc 2387)
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_signed">
            <summary>
            Multipart signed. Defined in Rfc 1847.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Message">
            <summary>
            Message -- an encapsulated message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Message_rfc822">
            <summary>
            Rfc 822 encapsulated message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.NotSpecified">
            <summary>
            Media type isn't specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Unknown">
            <summary>
            Media type is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.AuthUserEventHandler">
            <summary>
            Represents the method that will handle the AuthUser event for SMTP_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A AuthUser_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.FolderEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.FoldersEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.MessagesEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.MessagesItemsEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.MessageEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SharedRootFoldersEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.GetFolderACLEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.DeleteFolderACLEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SetFolderACLEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.GetUserACLEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.GetUserQuotaHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Server">
            <summary>
            IMAP server componet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServer">
            <summary>
            This is base class for Socket and Session based servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.Dispose">
            <summary>
            Clean up any resources being used and stops server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartServer">
            <summary>
            Starts server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StopServer">
            <summary>
            Stops server. NOTE: Active sessions aren't cancled.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartProcCons">
            <summary>
            Starts proccessiong incoming connections (Accepts and queues connections).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartProcQueuedCons">
            <summary>
            Starts queueed connections proccessing (Creates and starts session foreach queued connection).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.AddSession(LumiSoft.Net.SocketServerSession)">
            <summary>
            Adds specified session to sessions collection.
            </summary>
            <param name="session">Session to add.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.RemoveSession(LumiSoft.Net.SocketServerSession)">
            <summary>
            Removes specified session from sessions collection.
            </summary>
            <param name="session">Session to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.OnSysError(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.OnSessionTimeoutTimer">
            <summary>
            This method must get timedout sessions and end them.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="E:LumiSoft.Net.SocketServer.SysError">
            <summary>
            Occurs when server or session has system error(unhandled error).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.BindInfo">
            <summary>
            Gets or set socket binding info. Use this property to specify on which IP,port server 
            listnes and also if is SSL or STARTTLS support.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.MaxConnections">
            <summary>
            Gets or sets maximum allowed connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.Enabled">
            <summary>
            Runs and stops server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.LogCommands">
            <summary>
            Gets or sets if to log commands.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.SessionIdleTimeOut">
            <summary>
            Session idle timeout in milliseconds.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.MaxBadCommands">
            <summary>
            Gets or sets maximum bad commands allowed to session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServer.QueuedConnection">
            <summary>
            This struct holds queued connection info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.QueuedConnection.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket.</param>
            <param name="bindInfo">Bind info.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.QueuedConnection.Socket">
            <summary>
            Gets socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.QueuedConnection.BindInfo">
            <summary>
            Gets bind info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.#ctor">
            <summary>
            Defalut constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnValidate_IpAddress(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Raises event ValidateIP event.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
            <returns>Returns true if connection allowed.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnAuthUser(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Raises event AuthUser.
            </summary>
            <param name="session">Reference to current IMAP session.</param>
            <param name="userName">User name.</param>
            <param name="passwordData">Password compare data,it depends of authentication type.</param>
            <param name="data">For md5 eg. md5 calculation hash.It depends of authentication type.</param>
            <param name="authType">Authentication type.</param>
            <returns>Returns true if user is authenticated ok.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnSubscribeMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Raises event 'SubscribeMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox which to subscribe.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnUnSubscribeMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Raises event 'UnSubscribeMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox which to unsubscribe.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnGetSubscribedMailboxes(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Raises event 'GetSubscribedMailboxes'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="referenceName">Mailbox reference.</param>
            <param name="mailBox">Mailbox search pattern or mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnGetMailboxes(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Raises event 'GetMailboxes'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="referenceName">Mailbox reference.</param>
            <param name="mailBox">Mailbox search pattern or mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnCreateMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Raises event 'CreateMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox to create.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnDeleteMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Raises event 'DeleteMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox which to delete.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnRenameMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Raises event 'RenameMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox which to rename.</param>
            <param name="newMailboxName">New mailbox name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnGetMessagesInfo(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder)">
            <summary>
            Raises event 'GetMessagesInfo'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="folder">Folder which messages info to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnGetMessageItems(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message,LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum)">
            <summary>
            Raises event GetMessageItems.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="messageInfo">Message info what message items to get.</param>
            <param name="messageItems">Specifies message items what must be filled.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnDeleteMessage(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Raises event 'DeleteMessage'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="message">Message which to delete.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnCopyMessage(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message,System.String)">
            <summary>
            Raises event 'CopyMessage'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="msg">Message which to copy.</param>
            <param name="location">New message location.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnStoreMessage(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,LumiSoft.Net.IMAP.Server.IMAP_Message,System.Byte[])">
            <summary>
            Raises event 'StoreMessage'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="folder">Folder where to store.</param>
            <param name="msg">Message which to store.</param>
            <param name="messageData">Message data which to store.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnStoreMessageFlags(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Raises event 'StoreMessageFlags'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="msg">Message which flags to store.</param>
            <returns></returns>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.ValidateIPAddress">
            <summary>
            Occurs when new computer connected to IMAP server.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.AuthUser">
            <summary>
            Occurs when connected user tryes to authenticate.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.SubscribeFolder">
            <summary>
            Occurs when server requests to subscribe folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.UnSubscribeFolder">
            <summary>
            Occurs when server requests to unsubscribe folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetFolders">
            <summary>
            Occurs when server requests all available folders.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetSubscribedFolders">
            <summary>
            Occurs when server requests subscribed folders.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.CreateFolder">
            <summary>
            Occurs when server requests to create folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.DeleteFolder">
            <summary>
            Occurs when server requests to delete folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.RenameFolder">
            <summary>
            Occurs when server requests to rename folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetMessagesInfo">
            <summary>
            Occurs when server requests to folder messages info.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.DeleteMessage">
            <summary>
            Occurs when server requests to delete message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.StoreMessage">
            <summary>
            Occurs when server requests to store message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.StoreMessageFlags">
            <summary>
            Occurs when server requests to store message flags.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.CopyMessage">
            <summary>
            Occurs when server requests to copy message to new location.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetMessageItems">
            <summary>
            Occurs when server requests to get message items.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.SessionLog">
            <summary>
            Occurs when IMAP session has finished and session log is available.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetSharedRootFolders">
            <summary>
            Occurs when IMAP server requests shared root folders info.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetFolderACL">
            <summary>
            Occurs when IMAP server requests folder ACL.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.DeleteFolderACL">
            <summary>
            Occurs when IMAP server requests to delete folder ACL.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.SetFolderACL">
            <summary>
            Occurs when IMAP server requests to set folder ACL.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetUserACL">
            <summary>
            Occurs when IMAP server requests to get user ACL for specified folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetUserQuota">
            <summary>
            Occurs when IMAP server requests to get user quota.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.SupportedAuthentications">
            <summary>
            Gets or sets server supported authentication types.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.GreetingText">
            <summary>
            Gets or sets server greeting text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed conncurent connections from 1 IP address. Value 0 means unlimited connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.MaxMessageSize">
            <summary>
            Maximum message size.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_PacketEventArgs">
            <summary>
            This class provides data for <b>UdpServer.PacketReceived</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_PacketEventArgs.#ctor(LumiSoft.Net.UDP.UDP_Server,System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="server">UDP server which received packet.</param>
            <param name="socket">Socket which received packet.</param>
            <param name="remoteEP">Remote end point which sent data.</param>
            <param name="data">UDP data.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_PacketEventArgs.SendReply(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends reply to received packet. This method uses same local end point to send packet which
            received packet, this ensures right NAT traversal.
            </summary>
            <param name="data">Data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.UdpServer">
            <summary>
            Gets UDP server which received packet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.LocalEndPoint">
            <summary>
            Gets local end point what recieved packet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.RemoteEndPoint">
            <summary>
            Gets remote end point what sent data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.Data">
            <summary>
            Gets UDP packet data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_PacketEventArgs.Socket">
            <summary>
            Gets socket which received packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_e_RcptTo">
            <summary>
            This class provided data for <b cref="E:LumiSoft.Net.SMTP.Server.SMTP_Session.RcptTo">SMTP_Session.RcptTo</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_e_RcptTo.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,LumiSoft.Net.SMTP.Server.SMTP_RcptTo,LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner SMTP server session.</param>
            <param name="to">RCPT TO: value.</param>
            <param name="reply">SMTP server reply.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b>, <b>to</b> or <b>reply</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_RcptTo.Session">
            <summary>
            Gets owner SMTP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_RcptTo.RcptTo">
            <summary>
            Gets RCPT TO: value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_RcptTo.Reply">
            <summary>
            Gets or sets SMTP server reply.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_SessionCompletedEventArgs">
            <summary>
            This class provides data for <b>Relay_Server.SessionCompleted</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_SessionCompletedEventArgs.#ctor(LumiSoft.Net.SMTP.Relay.Relay_Session,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Relay session what completed processing.</param>
            <param name="exception">Exception what happened or null if relay completed successfully.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_SessionCompletedEventArgs.Session">
            <summary>
            Gets relay session what completed processing.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_SessionCompletedEventArgs.Exception">
            <summary>
            Gets Exception what happened or null if relay completed successfully.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite">
            <summary>
            This class represents INVITE dialog. Defined in RFC 3261.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Dialog">
            <summary>
            This class is base class for SIP dialogs. Defined in RFC 3261 12.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.Init(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Transaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Initializes dialog.
            </summary>
            <param name="stack">Owner stack.</param>
            <param name="transaction">Owner transaction.</param>
            <param name="response">SIP response what caused dialog creation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b>,<b>transaction</b> or <b>response</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.Terminate">
            <summary>
            Terminates dialog.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.Terminate(System.String,System.Boolean)">
            <summary>
            Terminates dialog.
            </summary>
            <param name="reason">Termination reason. This value may be null.</param>
            <param name="sendBye">If true BYE is sent to remote party.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.CreateRequest(System.String)">
            <summary>
            Creates new SIP request using this dialog info.
            </summary>
            <param name="method">SIP method.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>method</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <returns>Returns created request.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.CreateRequestSender(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Creates SIP request sender for the specified request.
            </summary>
            <remarks>All requests sent through this dialog SHOULD use this request sender to send out requests.</remarks>
            <param name="request">SIP request.</param>
            <returns>Returns created sender.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>request</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.IsTargetRefresh(System.String)">
            <summary>
            Gets if sepcified request method is target-refresh method.
            </summary>
            <param name="method">SIP request method.</param>
            <returns>Returns true if specified method is target-refresh method.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>method</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.SetState(LumiSoft.Net.SIP.Stack.SIP_DialogState,System.Boolean)">
            <summary>
            Sets dialog state.
            </summary>
            <param name="state">New dialog state,</param>
            <param name="raiseEvent">If true, StateChanged event is raised after state change.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.ProcessRequest(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Processes specified request through this dialog.
            </summary>
            <param name="e">Method arguments.</param>
            <returns>Returns true if this dialog processed specified response, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>e</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.ProcessResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes specified response through this dialog.
            </summary>
            <param name="response">SIP response to process.</param>
            <returns>Returns true if this dialog processed specified response, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.OnStateChanged">
            <summary>
            Raises <b>StateChanged</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.OnTerminatedByRemoteParty(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Raises <b>TerminatedByRemoteParty</b> event.
            </summary>
            <param name="bye">BYE request.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the dialog.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.State">
            <summary>
            Gets dialog state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.Stack">
            <summary>
            Gets owner stack.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.CreateTime">
            <summary>
            Gets dialog creation time.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.ID">
            <summary>
            Gets dialog ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.CallID">
            <summary>
            Get call ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.LocalTag">
            <summary>
            Gets local-tag.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RemoteTag">
            <summary>
            Gets remote-tag.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.LocalSeqNo">
            <summary>
            Gets local sequence number.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RemoteSeqNo">
            <summary>
            Gets remote sequence number.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.LocalUri">
            <summary>
            Gets local URI.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RemoteUri">
            <summary>
            Gets remote URI.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.LocalContact">
            <summary>
            Gets local contact URI.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RemoteTarget">
            <summary>
            Gets remote target URI.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.IsSecure">
            <summary>
            Gets if dialog uses secure transport.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RouteSet">
            <summary>
            Gets route set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.IsTerminatedByRemoteParty">
            <summary>
            Gets if dialog was terminated by remote-party.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.Flow">
            <summary>
            Gets data flow used to send or receive last SIP message.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Dialog.StateChanged">
            <summary>
            This event is raised when Dialog state has changed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Dialog.TerminatedByRemoteParty">
            <summary>
            This event is raised when remote-party terminates dialog with BYE request.
            </summary>
            <remarks>This event is useful only if the application is interested in processing the headers in the BYE message.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.Init(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Transaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Initializes dialog.
            </summary>
            <param name="stack">Owner stack.</param>
            <param name="transaction">Owner transaction.</param>
            <param name="response">SIP response what caused dialog creation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b>,<b>transaction</b> or <b>response</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.Terminate(System.String,System.Boolean)">
            <summary>
            Starts terminating dialog.
            </summary>
            <param name="reason">Termination reason. This value may be null.</param>
            <param name="sendBye">If true BYE is sent to remote party.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.ReInvite(LumiSoft.Net.SIP_Uri,LumiSoft.Net.SDP.SDP_Message)">
            <summary>
            Re-invites remote party.
            </summary>
            <param name="contact">New contact value. Value null means current contact value used.</param>
            <param name="sdp">SDP media offer.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when there is pending invite and this method is called or dialog is in invalid state.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sdp</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.ProcessRequest(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Processes specified request through this dialog.
            </summary>
            <param name="e">Method arguments.</param>
            <returns>Returns true if this dialog processed specified request, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>e</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.ProcessResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes specified response through this dialog.
            </summary>
            <param name="response">SIP response to process.</param>
            <returns>Returns true if this dialog processed specified response, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.OnReinvite(LumiSoft.Net.SIP.Stack.SIP_ServerTransaction)">
            <summary>
            Raises <b>Reinvite</b> event.
            </summary>
            <param name="reinvite">Re-INVITE server transaction.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.HasPendingInvite">
            <summary>
            Gets if dialog has pending INVITE transaction.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.Reinvite">
            <summary>
            Is raised when re-INVITE is received.
            </summary>
            <remarks>INVITE dialog consumer always should respond to this event(accept or decline it).</remarks>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UasInvite2xxRetransmit">
            <summary>
            This class is responsible for retransmitting INVITE 2xx response while ACK is received form target UAC.
            For more info see RFC 3261 13.3.1.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UasInvite2xxRetransmit.#ctor(LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Default constructor.
            </summary>
            <param name="dialog">Owner INVITE dialog.</param>
            <param name="response">INVITE 2xx response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dialog</b> or <b>response</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UasInvite2xxRetransmit.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UasInvite2xxRetransmit.m_pTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            This method is called when INVITE 2xx retransmit timer triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UasInvite2xxRetransmit.MatchAck(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Checks if specified ACK request matches this 2xx response retransmission.
            </summary>
            <param name="ackRequest">ACK request.</param>
            <returns>Returns true if ACK matches, othwerwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ackRequest</b> is null reference value.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UacInvite2xxRetransmissionWaiter">
            <summary>
            This class waits INVITE 2xx response retransmissions and answers with ACK request to them.
            For more info see RFC 3261 13.2.2.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UacInvite2xxRetransmissionWaiter.#ctor(LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Default constructor.
            </summary>
            <param name="dialog">Owner INVITE dialog.</param>
            <param name="invite">INVITE request which 2xx retransmission to wait.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dialog</b> or <b>invite</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UacInvite2xxRetransmissionWaiter.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UacInvite2xxRetransmissionWaiter.m_pTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE 2xx retrasmission wait time expired.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UacInvite2xxRetransmissionWaiter.Match(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Checks if specified response matches this 2xx response retransmission wait entry.
            </summary>
            <param name="response">INVITE 2xx response.</param>
            <returns>Returns true if response matches, othwerwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UacInvite2xxRetransmissionWaiter.Process(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes retransmited INVITE 2xx response.
            </summary>
            <param name="response">INVITE 2xx response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Invite.UacInvite2xxRetransmissionWaiter.CreateAck">
            <summary>
            Creates ACK request for pending INVITE.
            </summary>
            <returns>Returns created ACK request.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding">
            <summary>
            This class represents SIP registrar registration binding entry. Defined in RFC 3261 10.3.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.#ctor(LumiSoft.Net.SIP.Proxy.SIP_Registration,LumiSoft.Net.AbsoluteUri)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner registration.</param>
            <param name="contactUri">Contact URI what can be used to contact the registration.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>contactUri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.Update(LumiSoft.Net.SIP.Stack.SIP_Flow,System.Int32,System.Double,System.String,System.Int32)">
            <summary>
            Updates specified binding.
            </summary>
            <param name="flow">SIP data flow what updates this binding. This value is null if binding was not added through network or
            flow has disposed.</param>
            <param name="expires">Time in seconds when binding will expire.</param>
            <param name="qvalue">Binding priority. Higher value means greater priority.</param>
            <param name="callID">Call-ID header field value which added/updated this binding.</param>
            <param name="cseqNo">CSeq header field sequence number value which added/updated this binding.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.Remove">
            <summary>
            Removes this binding from the registration.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.ToContactValue">
            <summary>
            Converts <b>ContactUri</b> to valid Contact header value.
            </summary>
            <returns>Returns contact header value.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type. 
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns 0 if two objects equal, -1 if this instance is less or 1 this instance is greater.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.LastUpdate">
            <summary>
            Gets the last time when the binding was updated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.IsExpired">
            <summary>
            Gets if binding has expired.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.TTL">
            <summary>
            Gets how many seconds binding has time to live. This is live calulated value, so it decreases every second.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.Flow">
            <summary>
            Gets data flow what added this binding. This value is null if binding was not added through network or
            flow has disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.ContactURI">
            <summary>
            Gets contact URI what can be used to contact the registration.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.QValue">
            <summary>
            Gets binding priority. Higher value means greater priority.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.CallID">
            <summary>
            Gets Call-ID header field value which added this binding.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding.CSeqNo">
            <summary>
            Gets CSeq header field sequence number value which added this binding.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet_APP">
            <summary>
            This class represents Application-Defined RTCP Packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet">
            <summary>
            This is base class for RTCP packets.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet.Parse(System.Byte[],System.Int32@)">
            <summary>
            Parses 1 RTCP packet from the specified buffer.
            </summary>
            <param name="buffer">Buffer which contains RTCP packet.</param>
            <param name="offset">Offset in buffer.</param>
            <returns>Returns parsed RTCP packet.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores this packet to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store packet.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet.ParseInternal(System.Byte[],System.Int32@)">
            <summary>
            Parses RTCP packet from the specified buffer.
            </summary>
            <param name="buffer">Buffer which contains packet.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet.Version">
            <summary>
            Gets RTCP version.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet.IsPadded">
            <summary>
            Gets if packet is padded to some bytes boundary.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet.Type">
            <summary>
            Gets RTCP packet type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet.PaddBytesCount">
            <summary>
            Gets or sets number empty bytes to add at the end of packet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet.Size">
            <summary>
            Gets number of bytes needed for this packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_APP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_APP.ParseInternal(System.Byte[],System.Int32@)">
            <summary>
            Parses APP packet from the specified buffer.
            </summary>
            <param name="buffer">Buffer what conatins APP packet.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_APP.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores APP packet to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store APP packet.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_APP.Version">
            <summary>
            Gets RTCP version.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_APP.Type">
            <summary>
            Gets RTCP packet type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_APP.SubType">
            <summary>
            Gets subtype value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_APP.Source">
            <summary>
            Gets sender synchronization(SSRC) or contributing(CSRC) source identifier.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_APP.Name">
            <summary>
            Gets 4 ASCII char packet name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_APP.Data">
            <summary>
            Gets application-dependent data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_APP.Size">
            <summary>
            Gets number of bytes needed for this packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection">
            <summary>
            This class represents POP3 client messages collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.#ctor(LumiSoft.Net.POP3.Client.POP3_Client)">
            <summary>
            Default constructor.
            </summary>
            <param name="pop3">Owner POP3 client.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Add(System.Int32)">
            <summary>
            Adds new message to messages collection.
            </summary>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.TotalSize">
            <summary>
            Gets total size of messages, messages marked for deletion are included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Count">
            <summary>
            Gets number of messages in the collection, messages marked for deletion are included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Item(System.Int32)">
            <summary>
            Gets message from specified index.
            </summary>
            <param name="index">Message zero based index in the collection.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when index is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessageCollection.Item(System.String)">
            <summary>
            Gets message with specified UID value.
            </summary>
            <param name="uid">Message UID value.</param>
            <returns>Returns message or null if message doesn't exist.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when POP3 server doesn't support UIDL.</exception>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioInDevice">
            <summary>
            This class represents audio input device(microphone,line-in, ....).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioInDevice.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="index">Device index in devices.</param>
            <param name="name">Device name.</param>
            <param name="channels">Number of audio channels.</param>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioInDevice.Name">
            <summary>
            Gets device name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioInDevice.Channels">
            <summary>
            Gets number of input channels(mono,stereo,...) supported.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioInDevice.Index">
            <summary>
            Gets device index in devices.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.SMTP_t_Mailbox">
            <summary>
            This class represents SMTP "Mailbox" address. Defined in RFC 5321 4.1.2.
            </summary>
            <example>
            <code>
            RFC 5321 4.1.2.
                Mailbox    = Local-part "@" ( Domain / address-literal )
                Local-part = Dot-string / Quoted-string
                             ; MAY be case-sensitive
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.SMTP.SMTP_t_Mailbox.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="localPart">Local part of mailbox.</param>
            <param name="domain">Domain of mailbox.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localPart</b> or <b>domain</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.SMTP_t_Mailbox.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SMTP.SMTP_t_Mailbox.LocalPart">
            <summary>
            Gets local-part of mailbox.
            </summary>
            <remarks>If local-part is <b>Quoted-string</b>, quotes will not returned.</remarks>
        </member>
        <member name="P:LumiSoft.Net.SMTP.SMTP_t_Mailbox.Domain">
            <summary>
            Gets domain of mailbox.
            </summary>
            <remarks>If domain is <b>address-literal</b>, surrounding bracets will be removed.</remarks>
        </member>
        <member name="T:LumiSoft.Net.SMTP.SMTP_DSN_Ret">
            <summary>
            This value represents DSN RET value. Defined in RFC 3461 4.3.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_DSN_Ret.NotSpecified">
            <summary>
            Value not specified, server will choose default type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_DSN_Ret.FullMessage">
            <summary>
            Requests that the entire message be returned in any "failed"
            Delivery Status Notification issued for this recipient.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_DSN_Ret.Headers">
            <summary>
            Requests that only the headers of the message be returned.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_ParameterCollection">
            <summary>
            Represents MIME header field parameters collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.#ctor(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner MIME header field.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Remove(System.String)">
            <summary>
            Removes specified parametr from the collection.
            </summary>
            <param name="name">Parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.ToArray">
            <summary>
            Copies header fields parameters to new array.
            </summary>
            <returns>Returns header fields parameters array.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.ToString">
            <summary>
            Returns header field parameters as string.
            </summary>
            <returns>Returns header field parameters as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.ToString(System.Text.Encoding)">
            <summary>
            Returns header field parameters as string.
            </summary>
            <param name="charset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field parameters as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Parse(System.String)">
            <summary>
            Parses parameters from the specified value.
            </summary>
            <param name="value">Header field parameters string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Parse(LumiSoft.Net.MIME.MIME_Reader)">
            <summary>
            Parses parameters from the specified reader.
            </summary>
            <param name="reader">MIME reader.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reader</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.DecodeExtOctet(System.String,System.Text.Encoding)">
            <summary>
            Decodes non-ascii text with MIME <b>ext-octet</b> method. Defined in RFC 2231 7.
            </summary>
            <param name="text">Text to decode,</param>
            <param name="charset">Charset to use.</param>
            <returns>Returns decoded text.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> or <b>charset</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ParameterCollection.IsModified">
            <summary>
            Gets if this header field parameters are modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Owner">
            <summary>
            Gets owner MIME header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ParameterCollection.Item(System.String)">
            <summary>
            Gets or sets specified header field parameter value. Value null means not specified.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns specified header field value or null if specified parameter doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Collection">
            <summary>
            This class represents MIME header fields collection. Defined in RFC 2045.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.#ctor(LumiSoft.Net.MIME.MIME_h_Provider)">
            <summary>
            Default constructor.
            </summary>
            <param name="provider">Header fields provider.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>provider</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Insert(System.Int32,LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="field">Header field to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Add(System.String)">
            <summary>
            Parses and adds specified header field to the end of the collection.
            </summary>
            <param name="field">Header field string (Name: value).</param>
            <returns>Retunrs added header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Add(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Adds specified header field to the end of the collection.
            </summary>
            <param name="field">Header field to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Remove(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Contains(System.String)">
            <summary>
            Gets if collection has item with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns true if specified item exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Contains(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Gets if collection contains the specified item.
            </summary>
            <param name="field">Header field.</param>
            <returns>Returns true if specified item exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.GetFirst(System.String)">
            <summary>
            Gets first header field with the specified name. returns null if specified header field doesn't exist.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns first header field with the specified name. returns null if specified header field doesn't exist.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ReplaceFirst(LumiSoft.Net.MIME.MIME_h)">
            <summary>
            Replaces first header field with specified name with specified value.
            </summary>
            <param name="field">Hedaer field.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToArray">
            <summary>
            Copies header fields to new array.
            </summary>
            <returns>Returns header fields array.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToFile(System.String,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores header to the specified file.
            </summary>
            <param name="fileName">File name with optional path.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fileName</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToByte(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header as byte[] data.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns header as byte[] data.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores header to the specified stream.
            </summary>
            <param name="stream">Stream where to store header.</param>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToString">
            <summary>
            Returns MIME header as string.
            </summary>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME header as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME header as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Parse(System.String)">
            <summary>
            Parses MIME header from the specified value.
            </summary>
            <param name="value">MIME header string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.Parse(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses MIME header from the specified stream.
            </summary>
            <param name="stream">MIME header stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Collection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.IsModified">
            <summary>
            Gets if header has modified since it was loaded.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.Item(System.String)">
            <summary>
            Gets header fields with the specified name.
            </summary>
            <param name="name">Header field name.</param>
            <returns>Returns header fields with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Collection.FieldsProvider">
            <summary>
            Gets header fields provider.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.QuotedPrintableStream">
            <summary>
            Implements RFC 2045 6.7. Quoted-Printable stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.#ctor(LumiSoft.Net.IO.SmartStream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">Specifies stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.QuotedPrintableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.QuotedPrintableStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.CommadCompleted">
            <summary>
            Is called when asynchronous command had completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SmtpClientEx">
            <summary>
            SMTP client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Dispose">
            <summary>
            Cleasns up resources and disconnect smtp client if open.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.String,System.Int32)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.Net.IPEndPoint,System.String,System.Int32)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.Net.IPEndPoint,System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL. Default SMTP port is 25 and SSL port is 465.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.String,System.Int32,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.String,System.Int32,System.Boolean,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.Net.IPEndPoint,System.String,System.Int32,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.Net.IPEndPoint,System.String,System.Int32,System.Boolean,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect_workerThread(System.Object)">
            <summary>
            Is called from ThreadPool Thread. This method just call synchrounous Connect.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Disconnect">
            <summary>
            Disconnects smtp client from server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.StartTLS">
            <summary>
            Switches SMTP connection to SSL.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginStartTLS(LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Start TLS(SSL) negotiation asynchronously.
            </summary>
            <param name="callback">The method to be called when the asynchronous StartTLS operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginStartTLS_workerThread(System.Object)">
            <summary>
            Is called from ThreadPool Thread. This method just call synchrounous StartTLS.
            </summary>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Ehlo(System.String)">
            <summary>
            Does EHLO command. If server don't support EHLO, tries HELO.
            </summary>
            <param name="hostName">Host name which is reported to SMTP server.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginEhlo(System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begins EHLO command.
            </summary>
            <param name="hostName">Host name which is reported to SMTP server.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnEhloSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished EHLO command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnEhloReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading EHLO command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnHeloSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished HELO command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnHeloReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading EHLO command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Authenticate(System.String,System.String)">
            <summary>
            Does AUTH command.
            </summary>
            <param name="userName">Uesr name.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginAuthenticate(System.String,System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begins authenticate.
            </summary>
            <param name="userName">Uesr name.</param>
            <param name="password">Password.</param> 
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5SendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished AUTH CRAM-MD5 command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5ReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH CRAM-MD% server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5UserPwdSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending username and password to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5UserPwdReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading user name and password send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished AUTH LOGIN command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MAIL FROM: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginUserSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending user name to SMTP server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginUserReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH LOGIN user send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginPasswordSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending password to SMTP server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginPwdReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH LOGIN password send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.SetSender(System.String,System.Int64)">
            <summary>
            Does MAIL FROM: command.
            </summary>
            <param name="senderEmail">Sender email address what is reported to smtp server</param>
            <param name="messageSize">Message size in bytes or -1 if message size isn't known.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginSetSender(System.String,System.Int64,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begin setting sender.
            </summary>
            <param name="senderEmail">Sender email address what is reported to smtp server.</param>
            <param name="messageSize">Message size in bytes or -1 if message size isn't known.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnMailSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished MAIL FROM: command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnMailReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MAIL FROM: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.AddRecipient(System.String)">
            <summary>
            Does RCPT TO: command.
            </summary>
            <param name="recipientEmail">Recipient email address.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginAddRecipient(System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begin adding recipient.
            </summary>
            <param name="recipientEmail">Recipient email address.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnRcptSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished RCPT TO: command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnRcptReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading RCPT TO: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.SendMessage(System.IO.Stream)">
            <summary>
            Sends message to server. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="message">Message what will be sent to server. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginSendMessage(System.IO.Stream,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts sending message.
            </summary>
            <param name="message">Message what will be sent to server. NOTE: Message sending starts from message stream current posision.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished BDAT command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatDataSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending BDAT message data to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading BDAT: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished DATA command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading DATA command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataMessageSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has sending MESSAGE to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataMessageSendReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MESSAGE send smtp server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Reset">
            <summary>
            Send RSET command to SMTP server, resets SMTP session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.HandleSocketError(LumiSoft.Net.SocketCallBackResult,System.Exception)">
            <summary>
            Handles socket errors.
            </summary>
            <param name="result"></param>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.GetDestinations(System.String)">
            <summary>
            Gets specified email domain possible connect points. Values are in priority descending order.
            </summary>
            <param name="domain">Email address or domain name.</param>
            <returns>Returns possible email server connection points.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Client.SmtpClientEx.SessionLog">
            <summary>
            Occurs when SMTP session has finished and session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.LocalEndpoint">
            <summary>
            Gets local endpoint. Returns null if smtp client isn't connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.RemoteEndPoint">
            <summary>
            Gets remote endpoint. Returns null if smtp client isn't connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.DnsServers">
            <summary>
            Gets or sets dns servers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connected">
            <summary>
            Gets if smtp client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Authenticated">
            <summary>
            Gets if pop3 client is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.LastDataTime">
            <summary>
            Gets when was last activity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.SessionActiveLog">
            <summary>
            Gets log entries that are currently in log buffer. Returns null if socket not connected or no logging enabled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.ReadedCount">
            <summary>
            Gets how many bytes are readed through smtp client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.WrittenCount">
            <summary>
            Gets how many bytes are written through smtp client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.IsSecureConnection">
            <summary>
            Gets if the connection is an SSL connection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data">
            <summary>
            Provides state date for BeginAuthenticate method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.#ctor(System.String,System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="callback">Callback what must be called when aynchrounous execution completes.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Password">
            <summary>
            Gets user password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Callback">
            <summary>
            Gets callback what must be called when aynchrounous execution completes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP_Uri">
            <summary>
            Implements SIP-URI. Defined in 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                SIP-URI  = "sip:" [ userinfo ] hostport uri-parameters [ headers ]
                SIPS-URI = "sips:" [ userinfo ] hostport uri-parameters [ headers ]
                userinfo = ( user / telephone-subscriber ) [ ":" password ] "@")
                hostport = host [ ":" port ]
                host     = hostname / IPv4address / IPv6reference
            </code>
            </remarks>
        </member>
        <member name="T:LumiSoft.Net.AbsoluteUri">
            <summary>
            Implements absolute-URI. Defined in RFC 3986.4.3.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AbsoluteUri.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AbsoluteUri.Parse(System.String)">
            <summary>
            Parse URI from string value.
            </summary>
            <param name="value">String URI value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>value</b> has invalid URI value.</exception>
        </member>
        <member name="M:LumiSoft.Net.AbsoluteUri.ParseInternal(System.String)">
            <summary>
            Parses URI from the specified string.
            </summary>
            <param name="value">URI string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AbsoluteUri.ToString">
            <summary>
            Converts URI to string.
            </summary>
            <returns>Returns URI as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.AbsoluteUri.Scheme">
            <summary>
            Gets URI scheme.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AbsoluteUri.Value">
            <summary>
            Gets URI value after scheme.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP_Uri.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP_Uri.Parse(System.String)">
            <summary>
            Parse SIP or SIPS URI from string value.
            </summary>
            <param name="value">String URI value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>value</b> is not valid SIP or SIPS URI.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP_Uri.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP_Uri.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP_Uri.ParseInternal(System.String)">
            <summary>
            Parses SIP_Uri from SIP-URI string.
            </summary>
            <param name="value">SIP-URI  string.</param>
            <returns>Returns parsed SIP_Uri object.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP_Uri.ToString">
            <summary>
            Converts SIP_Uri to valid SIP-URI string.
            </summary>
            <returns>Returns SIP-URI string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Scheme">
            <summary>
            Gets URI scheme.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.IsSecure">
            <summary>
            Gets or sets if secure SIP. If true then sips: uri, otherwise sip: uri.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Address">
            <summary>
            Gets address from SIP URI. Examples: ivar@lumisoft.ee,ivar@195.222.10.1.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.User">
            <summary>
            Gets or sets user name. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Host">
            <summary>
            Gets or sets host name or IP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Port">
            <summary>
            Gets or sets host port. Value -1 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.HostPort">
            <summary>
            Gets host with optional port. If port specified returns Host:Port, otherwise Host.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Parameters">
            <summary>
            Gets URI parameters.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Cause">
            <summary>
            Gets or sets 'cause' parameter value. Value -1 means not specified.
            Cause is a URI parameter that is used to indicate the service that
            the User Agent Server (UAS) receiving the message should perform.
            Defined in RFC 4458.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Comp">
            <summary>
            Gets or sets 'comp' parameter value. Value null means not specified. Defined in RFC 3486.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_ContentType">
            <summary>
            Gets or sets 'content-type' parameter value. Value null means not specified. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Delay">
            <summary>
            Gets or sets 'delay' prameter value. Value -1 means not specified. 
            Specifies a delay interval between announcement repetitions. The delay is measured in milliseconds.
            Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Duration">
            <summary>
            Gets or sets 'duration' prameter value. Value -1 means not specified. 
            Specifies the maximum duration of the announcement. The media server will discontinue 
            the announcement and end the call if the maximum duration has been reached. The duration 
            is measured in milliseconds. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Locale">
            <summary>
            Gets or sets 'locale' prameter value. Specifies the language and optionally country 
            variant of the announcement sequence named in the "play=" parameter. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Lr">
            <summary>
            Gets or sets 'lr' parameter. The lr parameter, when present, indicates that the element
            responsible for this resource implements the routing mechanisms
            specified in this document. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Maddr">
            <summary>
            Gets or sets 'maddr' parameter value. Value null means not specified. 
            <a style="font-weight: bold; color: red">NOTE: This value is deprecated in since SIP 2.0.</a>
            The maddr parameter indicates the server address to be contacted for this user, 
            overriding any address derived from the host field. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Method">
            <summary>
            Gets or sets 'method' prameter value. Value null means not specified. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Play">
            <summary>
            Gets or sets 'play' parameter value. Value null means not specified. 
            Specifies the resource or announcement sequence to be played. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Repeat">
            <summary>
            Gets or sets 'repeat' parameter value. Value -1 means not specified, value int.MaxValue means 'forever'.
            Specifies how many times the media server should repeat the announcement or sequence named by 
            the "play=" parameter. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Target">
            <summary>
            Gets or sets 'target' parameter value. Value null means not specified. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Transport">
            <summary>
            Gets or sets 'transport' parameter value. Value null means not specified. 
            The transport parameter determines the transport mechanism to
            be used for sending SIP messages. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Ttl">
            <summary>
            Gets or sets 'ttl' parameter value. Value -1 means not specified.
            <a style="font-weight: bold; color: red">NOTE: This value is deprecated in since SIP 2.0.</a>
            The ttl parameter determines the time-to-live value of the UDP
            multicast packet and MUST only be used if maddr is a multicast
            address and the transport protocol is UDP. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_User">
            <summary>
            Gets or sets 'user' parameter value. Value null means not specified. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Param_Voicexml">
            <summary>
            Gets or sets 'voicexml' parameter value. Value null means not specified. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP_Uri.Header">
            <summary>
            Gets or sets header.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer">
            <summary>
            Implements SIP transaction layer. Defined in RFC 3261.
            Transaction layer manages client,server transactions and dialogs.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.CreateClientTransaction(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request,System.Boolean)">
            <summary>
            Creates new client transaction.
            </summary>
            <param name="flow">SIP data flow which is used to send request.</param>
            <param name="request">SIP request that transaction will handle.</param>
            <param name="addVia">If true, transaction will add <b>Via:</b> header, otherwise it's user responsibility.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>request</b> is null reference.</exception>
            <returns>Returns created transaction.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.CreateServerTransaction(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Creates new SIP server transaction for specified request.
            </summary>
            <param name="flow">SIP data flow which is used to receive request.</param>
            <param name="request">SIP request.</param>
            <returns>Returns added server transaction.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>request</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.EnsureServerTransaction(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Ensures that specified request has matching server transaction. If server transaction doesn't exist, 
            it will be created, otherwise existing transaction will be returned.
            </summary>
            <param name="flow">SIP data flow which is used to receive request.</param>
            <param name="request">SIP request.</param>
            <returns>Returns matching transaction.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>request</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when request.Method is ACK request.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.MatchClientTransaction(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Matches SIP response to client transaction. If not matching transaction found, returns null.
            </summary>
            <param name="response">SIP response to match.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.MatchServerTransaction(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Matches SIP request to server transaction. If not matching transaction found, returns null.
            </summary>
            <param name="request">SIP request to match.</param>
            <returns>Returns matching transaction or null if no match.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.MatchCancelToTransaction(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Matches CANCEL requst to SIP server non-CANCEL transaction. Returns null if no match.
            </summary>
            <param name="cancelRequest">SIP CANCEL request.</param>
            <returns>Returns CANCEL matching server transaction or null if no match.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cancelTransaction</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>cancelTransaction</b> has invalid.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.GetOrCreateDialog(LumiSoft.Net.SIP.Stack.SIP_Transaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Gets existing or creates new dialog.
            </summary>
            <param name="transaction">Owner transaction what forces to create dialog.</param>
            <param name="response">Response what forces to create dialog.</param>
            <returns>Returns dialog.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>transaction</b> or <b>response</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.RemoveDialog(LumiSoft.Net.SIP.Stack.SIP_Dialog)">
            <summary>
            Removes specified dialog from dialogs collection.
            </summary>
            <param name="dialog">SIP dialog to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.MatchDialog(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Matches specified SIP request to SIP dialog. If no matching dialog found, returns null.
            </summary>
            <param name="request">SIP request.</param>
            <returns>Returns matched SIP dialog or null in no match found.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>request</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.MatchDialog(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Matches specified SIP response to SIP dialog. If no matching dialog found, returns null.
            </summary>
            <param name="response">SIP response.</param>
            <returns>Returns matched SIP dialog or null in no match found.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.ClientTransactions">
            <summary>
            Gets all available client transactions. This method is thread-safe.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.ServerTransactions">
            <summary>
            Gets all available server transactions. This method is thread-safe.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.Dialogs">
            <summary>
            Gets active dialogs. This method is thread-safe.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_CallID">
            <summary>
            Implements SIP "callid" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                callid = word [ "@" word ]
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.CreateCallID">
            <summary>
            Creates new call ID value.
            </summary>
            <returns>Returns call ID value.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.Parse(System.String)">
            <summary>
            Parses "callid" from specified value.
            </summary>
            <param name="value">SIP "callid" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "callid" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.ToStringValue">
            <summary>
            Converts this to valid "callid" value.
            </summary>
            <returns>Returns "callid" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_CallID.CallID">
            <summary>
            Gets or sets call ID.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding">
            <summary>
            Implements SIP "content-coding" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                content-coding = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.Parse(System.String)">
            <summary>
            Parses "content-coding" from specified value.
            </summary>
            <param name="value">SIP "content-coding" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "content-coding" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.ToStringValue">
            <summary>
            Converts this to valid "content-coding" value.
            </summary>
            <returns>Returns "content-coding" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.Encoding">
            <summary>
            Gets or sets content encoding.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogEntryType">
            <summary>
            Log entry type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.ReadFromRemoteEP">
            <summary>
            Data is readed from remote endpoint.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.SendToRemoteEP">
            <summary>
            Data is sent to remote endpoint.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.FreeText">
            <summary>
            Comment log entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue">
            <summary>
            Implements SIP "reason-value" value. Defined in rfc 3326.
            </summary>
            <remarks>
            <code>
            RFC 3326 Syntax:
                reason-value      =  protocol *(SEMI reason-params)
                protocol          =  "SIP" / "Q.850" / token
                reason-params     =  protocol-cause / reason-text / reason-extension
                protocol-cause    =  "cause" EQUAL cause
                cause             =  1*DIGIT
                reason-text       =  "text" EQUAL quoted-string
                reason-extension  =  generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP reason-value value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Parse(System.String)">
            <summary>
            Parses "reason-value" from specified value.
            </summary>
            <param name="value">SIP "reason-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "reason-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.ToStringValue">
            <summary>
            Converts this to valid "reason-value" value.
            </summary>
            <returns>Returns "reason-value" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Protocol">
            <summary>
            Gets or sets protocol.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Cause">
            <summary>
            Gets or sets 'cause' parameter value. The cause parameter contains a SIP status code. 
            Value -1 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Text">
            <summary>
            Gets or sets 'text' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_RAck">
            <summary>
            Implements SIP "RAck" value. Defined in RFC 3262.
            </summary>
            <remarks>
            <code>
            RFC 3262 Syntax:
                RAck         = response-num LWS CSeq-num LWS Method
                response-num = 1*DIGIT
                CSeq-num     = 1*DIGIT
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">RAck value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseNo">Response number.</param>
            <param name="cseqNo">CSeq number.</param>
            <param name="method">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.Parse(System.String)">
            <summary>
            Parses "RAck" from specified value.
            </summary>
            <param name="value">SIP "RAck" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "RAck" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.ToStringValue">
            <summary>
            Converts this to valid "RAck" value.
            </summary>
            <returns>Returns "RAck" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RAck.ResponseNumber">
            <summary>
            Gets or sets response number.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RAck.CSeqNumber">
            <summary>
            Gets or sets CSeq number.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RAck.Method">
            <summary>
            Gets or sets method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Join">
            <summary>
            Implements SIP "Join" value. Defined in RFC 3911.
            </summary>
            <remarks>
            <code>
            RFC 3911 Syntax:
                Join       = callid *(SEMI join-param)
                join-param = to-tag / from-tag / generic-param
                to-tag     = "to-tag" EQUAL token
                from-tag   = "from-tag" EQUAL token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Join.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Join value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Join.Parse(System.String)">
            <summary>
            Parses "Join" from specified value.
            </summary>
            <param name="value">SIP "Join" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Join.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Join" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Join.ToStringValue">
            <summary>
            Converts this to valid "Join" value.
            </summary>
            <returns>Returns "Join" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Join.CallID">
            <summary>
            Gets or sets call ID value.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised ´when null value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Join.ToTag">
            <summary>
            Gets or sets to-tag parameter value. This value is mandatory.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid ToTag value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Join.FromTag">
            <summary>
            Gets or sets from-tag parameter value. This value is mandatory.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid FromTag value is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Message">
            <summary>
            Holds POP3_Message info (ID,Size,...).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Message.#ctor(LumiSoft.Net.POP3.Server.POP3_MessageCollection,System.String,System.String,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="onwer">Owner collection.</param>
            <param name="id">Message ID.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.ID">
            <summary>
            Gets or sets message ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.UID">
            <summary>
            Gets or sets message UID. This UID is reported in UIDL command.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.Size">
            <summary>
            Gets or sets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.MarkedForDelete">
            <summary>
            Gets or sets message state flag.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.Tag">
            <summary>
            Gets or sets user data for message.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MailboxAddressCollection">
            <summary>
            Rfc 2822 3.4 mailbox-list. Syntax: mailbox *(',' mailbox).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Add(LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Adds a new mailbox to the end of the collection.
            </summary>
            <param name="mailbox">Mailbox to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Insert(System.Int32,LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Inserts a new mailbox into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the mailbox.</param>
            <param name="mailbox">Mailbox to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Remove(System.Int32)">
            <summary>
            Removes header field at the specified index from the collection.
            </summary>
            <param name="index">Index of the mailbox which to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Remove(LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Removes specified mailbox from the collection.
            </summary>
            <param name="mailbox">Mailbox to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Clear">
            <summary>
            Clears the collection of all mailboxes.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Parse(System.String)">
            <summary>
            Parses mailboxes from Rfc 2822 3.4 mailbox-list string. Syntax: mailbox *(',' mailbox).
            </summary>
            <param name="mailboxList">Mailbox list string.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.ToMailboxListString">
            <summary>
            Convert addresses to Rfc 2822 mailbox-list string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.OnCollectionChanged">
            <summary>
            This called when collection has changed. Item is added,deleted,changed or collection cleared.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Item(System.Int32)">
            <summary>
            Gets mailbox from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Count">
            <summary>
            Gets mailboxes count in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Owner">
            <summary>
            Gets or sets owner of this collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadToStream_EventArgs">
            <summary>
            This class provides data to asynchronous read to stream methods callback.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadToStream_EventArgs.#ctor(System.Exception,System.IO.Stream,System.Int32,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception what happened while reading data or null if data reading was successfull.</param>
            <param name="stream">Stream where data was stored.</param>
            <param name="count">Number of bytes readed.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadToStream_EventArgs.DataToString(System.Text.Encoding)">
            <summary>
            Converts byte[] line data to the specified encoding string.
            </summary>
            <param name="encoding">Encoding to use for convert.</param>
            <returns>Returns line data as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Exception">
            <summary>
            Gets exception what happened while reading data. Returns null if data reading completed sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Stream">
            <summary>
            Gets stream where data is stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Count">
            <summary>
            Gets number of bytes readed and written to <b>Stream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Data">
            <summary>
            Gets readed data. NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringDefault">
            <summary>
            Gets readed line data as string with system <b>default</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringAscii">
            <summary>
            Gets readed line data as string with <b>ASCII</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringUtf8">
            <summary>
            Gets readed line data as string with <b>UTF8</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Tag">
            <summary>
            Gets or stes user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Folder">
            <summary>
            IMAP folder.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folder.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Full path to folder, path separator = '/'. Eg. Inbox/myFolder .</param>
            <param name="selectable">Gets or sets if folder is selectable(SELECT command can select this folder).</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Folder.Folder">
            <summary>
            Gets IMAP folder name. Eg. Inbox, Inbox/myFolder, ... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Folder.Selectable">
            <summary>
            Gets or sets if folder is selectable (SELECT command can select this folder).
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs">
            <summary>
            Provides data for the filesytem related events for FTP_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.#ctor(LumiSoft.Net.FTP.Server.FTP_Session,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name"></param>
            <param name="newName"></param>
            <param name="session"></param>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.Session">
            <summary>
            Gets reference to FTP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.Name">
            <summary>
            Gets directory or file name with path.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.NewName">
            <summary>
            Gets new directory or new file name with path. This filled for Rename event only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.FileStream">
            <summary>
            Gets or sets file stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.Validated">
            <summary>
            Gets or sets if operation was successful. NOTE: default value is true.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.DirInfo">
            <summary>
            Gets reference to dir listing info. Please Fill .Tables["DirInfo"] table with required fields.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_MX">
            <summary>
            MX record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_MX.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="preference">MX record preference.</param>
            <param name="host">Mail host dns name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_MX.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_MX.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type. 
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>Returns 0 if two objects are equal, returns negative value if this object is less,
            returns positive value if this object is grater.</returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_MX.Preference">
            <summary>
            Gets MX record preference. The lower number is the higher priority server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_MX.Host">
            <summary>
            Gets mail host dns name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsCacheEntry">
            <summary>
            Dns cache entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCacheEntry.#ctor(LumiSoft.Net.Dns.Client.DnsServerResponse,System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="answers">Dns answers.</param>
            <param name="addTime">Entry add time.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCacheEntry.Answers">
            <summary>
            Gets dns answers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCacheEntry.Time">
            <summary>
            Gets entry add time.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsCache">
            <summary>
            This class implements dns query cache.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.GetFromCache(System.String,System.Int32)">
            <summary>
            Tries to get dns records from cache, if any.
            </summary>
            <param name="qname"></param>
            <param name="qtype"></param>
            <returns>Returns null if not in cache.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.AddToCache(System.String,System.Int32,LumiSoft.Net.Dns.Client.DnsServerResponse)">
            <summary>
            Adds dns records to cache. If old entry exists, it is replaced.
            </summary>
            <param name="qname"></param>
            <param name="qtype"></param>
            <param name="answers"></param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.ClearCache">
            <summary>
            Clears DNS cache.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.SerializeCache">
            <summary>
            Serializes current cache.
            </summary>
            <returns>Return serialized cache.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.DeSerializeCache(System.Byte[])">
            <summary>
            DeSerializes stored cache.
            </summary>
            <param name="cacheData">This value must be DnsCache.SerializeCache() method value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCache.CacheTime">
            <summary>
            Gets or sets how long(seconds) to cache dns query.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems">
            <summary>
            Provides data to event GetMessageItems.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message,LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to current IMAP session.</param>
            <param name="messageInfo">Message info what message items to get.</param>
            <param name="messageItems">Specifies message items what must be filled.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Finalize">
            <summary>
            Default deconstructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Validate">
            <summary>
            Checks that all required data items are provided, if not throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Session">
            <summary>
            Gets reference to current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageInfo">
            <summary>
            Gets message info what message items to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageItems">
            <summary>
            Gets what message items must be filled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.CloseMessageStream">
            <summary>
            Gets or sets if message stream is closed automatically if all actions on it are completed.
            Default value is true.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageStream">
            <summary>
            Gets or sets message stream. When setting this property Stream position must be where message begins.
            Fill this property only if IMAP_MessageItems_enum.Message flag is specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageSize">
            <summary>
            Gets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Header">
            <summary>
            Gets or sets message main header.
            Fill this property only if IMAP_MessageItems_enum.Header flag is specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Envelope">
            <summary>
            Gets or sets IMAP ENVELOPE string.
            Fill this property only if IMAP_MessageItems_enum.Envelope flag is specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.BodyStructure">
            <summary>
            Gets or sets IMAP BODYSTRUCTURE string.
            Fill this property only if IMAP_MessageItems_enum.BodyStructure flag is specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageExists">
            <summary>
            Gets or sets if message exists. Set this false, if message actually doesn't exist any more.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_Quota">
            <summary>
            IMAP quota entry. Defined in RFC 2087.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Quota.#ctor(System.String,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="quotaRootName">Quota root name.</param>
            <param name="messages">Number of current messages.</param>
            <param name="maxMessages">Number of maximum allowed messages.</param>
            <param name="storage">Current storage bytes.</param>
            <param name="maxStorage">Maximum allowed storage bytes.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.QuotaRootName">
            <summary>
            Gets quota root name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.Messages">
            <summary>
            Gets current messages count. Returns -1 if messages and maximum messages quota is not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.MaximumMessages">
            <summary>
            Gets maximum allowed messages count. Returns -1 if messages and maximum messages quota is not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.Storage">
            <summary>
            Gets current storage in bytes. Returns -1 if storage and maximum storage quota is not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.MaximumStorage">
            <summary>
            Gets maximum allowed storage in bytes. Returns -1 if storage and maximum storage quota is not defined.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1">
            <summary>
            This class provides data to .... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.#ctor(LumiSoft.Net.TCP.TCP_Server{`0},`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="server">TCP server.</param>
            <param name="session">TCP server session.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.Server">
            <summary>
            Gets TCP server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSessionEventArgs`1.Session">
            <summary>
            Gets TCP server session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_e_MailFrom">
            <summary>
            This class provided data for <b cref="E:LumiSoft.Net.SMTP.Server.SMTP_Session.MailFrom">SMTP_Session.MailFrom</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_e_MailFrom.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,LumiSoft.Net.SMTP.Server.SMTP_MailFrom,LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner SMTP server session.</param>
            <param name="from">MAIL FROM: value.</param>
            <param name="reply">SMTP server reply.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b>, <b>from</b> or <b>reply</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_MailFrom.Session">
            <summary>
            Gets owner SMTP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_MailFrom.MailFrom">
            <summary>
            Gets MAIL FROM: value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_MailFrom.Reply">
            <summary>
            Gets or sets SMTP server reply.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Utils">
            <summary>
            This class provides utility methods for RTP.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Utils.GenerateSSRC">
            <summary>
            Generates random SSRC value.
            </summary>
            <returns>Returns random SSRC value.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Utils.GenerateCNAME">
            <summary>
            Generates random CNAME value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Utils.DateTimeToNTP32(System.DateTime)">
            <summary>
            Converts specified DateTime value to short NTP time. Note: NTP time is in UTC.
            </summary>
            <param name="value">DateTime value to convert. This value must be in local time.</param>
            <returns>Returns NTP value.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Utils.DateTimeToNTP64(System.DateTime)">
            <summary>
            Converts specified DateTime value to long NTP time. Note: NTP time is in UTC.
            </summary>
            <param name="value">DateTime value to convert. This value must be in local time.</param>
            <returns>Returns NTP value.</returns>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_PacketType">
            <summary>
            This class holds known RTCP packet types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTCP_PacketType.SR">
            <summary>
            Sender report.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTCP_PacketType.RR">
            <summary>
            Receiver report.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTCP_PacketType.SDES">
            <summary>
            Session description.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTCP_PacketType.BYE">
            <summary>
            BYE.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTCP_PacketType.APP">
            <summary>
            Application specifiec data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_SourceState">
            <summary>
            This enum specifies <b>RTP_SyncSource</b> state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_SourceState.Passive">
            <summary>
            Source is passive, sending only RTCP packets.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_SourceState.Active">
            <summary>
            Source is active, sending RTP packets.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_SourceState.Disposed">
            <summary>
            Source has disposed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet_Unknown">
            <summary>
            This class represents unknown RTCP packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_Unknown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_ClientMessage">
            <summary>
            This class represents POP3 client message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.#ctor(LumiSoft.Net.POP3.Client.POP3_Client,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="pop3">Owner POP3 client.</param>
            <param name="seqNumber">Message 1 based sequence number.</param>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MarkForDeletion">
            <summary>
            Marks message as deleted.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.HeaderToString">
            <summary>
            Gets message header as string.
            </summary>
            <returns>Returns message header as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.HeaderToByte">
            <summary>
            Gets message header as byte[] data.
            </summary>
            <returns>Returns message header as byte[] data.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.HeaderToStream(System.IO.Stream)">
            <summary>
            Stores message header to the specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MessageToByte">
            <summary>
            Gets message as byte[] data.
            </summary>
            <returns>Returns message as byte[] data.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MessageToStream(System.IO.Stream)">
            <summary>
            Stores message to specified stream.
            </summary>
            <param name="stream">Stream where to store message.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MessageTopLinesToByte(System.Int32)">
            <summary>
            Gets message header + specified number lines of message body.
            </summary>
            <param name="lineCount">Number of lines to get from message body.</param>
            <returns>Returns message header + specified number lines of message body.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>numberOfLines</b> is negative value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.MessageTopLinesToStream(System.IO.Stream,System.Int32)">
            <summary>
            Stores message header + specified number lines of message body to the specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
            <param name="lineCount">Number of lines to get from message body.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>stream</b> value is null.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when message is marked for deletion and this method is accessed.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 serveer returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.Dispose">
            <summary>
            Disposes message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.SetUID(System.String)">
            <summary>
            Sets message UID value.
            </summary>
            <param name="uid">UID value.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientMessage.SetMarkedForDeletion(System.Boolean)">
            <summary>
            Sets IsMarkedForDeletion flag value.
            </summary>
            <param name="isMarkedForDeletion">New IsMarkedForDeletion value.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.IsDisposed">
            <summary>
            Gets if POP3 message is Disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.SequenceNumber">
            <summary>
            Gets message 1 based sequence number.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.UID">
            <summary>
            Gets message UID. NOTE: Before accessing this property, check that server supports UIDL command.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when POP3 server doesnt support UIDL command.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.Size">
            <summary>
            Gets message size in bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientMessage.IsMarkedForDeletion">
            <summary>
            Gets if message is marked for deletion.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Message">
            <summary>
            Represents a MIME message. Defined in RFC 2045 2.3.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Entity">
            <summary>
            Represents a MIME entity. Defined in RFC 2045 2.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToFile(System.String,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity to the specified file.
            </summary>
            <param name="file">File name with path where to store MIME entity.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Store MIME enity to the specified stream.
            </summary>
            <param name="stream">Stream where to store MIME entity. Storing starts form stream current position.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToString">
            <summary>
            Returns MIME entity as string.
            </summary>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as string.
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.ToByte(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns MIME entity as byte[].
            </summary>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <returns>Returns MIME entity as byte[].</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.Parse(LumiSoft.Net.IO.SmartStream,LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Parses MIME entiry from the specified stream.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="defaultContentType">Default content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>defaultContentType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Entity.SetParent(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Sets MIME entity parent entity.
            </summary>
            <param name="parent">Parent entity.</param>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.IsModified">
            <summary>
            Gets if this entity is modified since it has loaded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.Parent">
            <summary>
            Gets the parent entity of this entity, returns null if this is the root entity.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.Header">
            <summary>
            Gets MIME entity header field collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.MimeVersion">
            <summary>
            Gets or sets MIME version number. Value null means that header field does not exist. Normally this value is 1.0. Defined in RFC 2045 section 4.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>An indicator that this message is formatted according to the MIME
            standard, and an indication of which version of MIME is used.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentID">
            <summary>
            Gets or sets content body part ID. Value null means that header field does not exist. Defined in RFC 2045 7.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Specifies a Unique ID for one MIME body part of the content of a message.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentDescription">
            <summary>
            Gets or sets description of message body part. Value null means that header field does not exist. Defined in RFC 2045 8.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Description of a particular body part of a message; for example, a caption for an image body part.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentTransferEncoding">
            <summary>
            Gets or sets content transfer encoding. Value null means that header field does not exist. 
            RFC defined values are in <see cref="T:LumiSoft.Net.MIME.MIME_TransferEncodings">MIME_TransferEncodings</see>. Defined in RFC 2045 6.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Coding method used in a MIME message body part.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentType">
            <summary>
            Gets or sets MIME content type. Value null means that header field does not exist. Defined in RFC 2045 5.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentBase">
            <summary>
            Gets or sets base to be used for resolving relative URIs within this content part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Base to be used for resolving relative URIs within this content part. See also Content-Location.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentLocation">
            <summary>
            Gets or sets URI for retrieving a body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>URI using which the content of this body-part part was retrieved,
            might be retrievable, or which otherwise gives a globally unique identification of the content.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.Contentfeatures">
            <summary>
            Gets or sets content features of a MIME body part. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>The 'Content-features:' header can be used to annotate a MIME body part with a media feature expression, 
            to indicate features of the body part content. See also RFC 2533, RFC 2506, and RFC 2045.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentDisposition">
            <summary>
            Gets or sets content disposition. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Indicates whether a MIME body part is to be shown inline or is an attachment; can also indicate a 
            suggested filename for use when saving an attachment to a file.</remarks>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentLanguage">
            <summary>
            Gets or sets language of message content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Can include a code for the natural language used in a message; e.g., 'en' for English. 
            Can also contain a list of languages for a message containing more than one language.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentAlternative">
            <summary>
            Gets or sets message alternative content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Information about the media features of alternative content formats available for the current message.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentMD5">
            <summary>
            Gets or sets content MD5 checksum. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Checksum of content to ensure that it has not been modified.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.ContentDuration">
            <summary>
            Gets or sets time duration of content. Value null means that header field does not exist.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <remarks>Time duration of body part content, in seconds (e.g., for audio message).</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Entity.Body">
            <summary>
            Gets or sets MIME entity body.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.ParseFromFile(System.String)">
            <summary>
            Parses MIME message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse MIME message.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.ParseFromStream(System.IO.Stream)">
            <summary>
            Parses MIME message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse MIME message. Parsing starts from current stream position.</param>
            <returns>Returns parsed MIME message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.CreateAttachment(System.String)">
            <summary>
            Creates attachment entity.
            </summary>
            <param name="file">File name with optional path.</param>
            <returns>Returns created attachment entity.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.CreateAttachment(System.IO.Stream,System.String)">
            <summary>
            Creates attachment entity.
            </summary>
            <param name="stream">Attachment data stream.</param>
            <param name="fileName">File name.</param>
            <returns>Returns created attachment entity.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>fileName</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Message.GetEntityByCID(System.String)">
            <summary>
            Gets MIME entity with the specified Content-ID. Returns null if no such entity.
            </summary>
            <param name="cid">Content ID.</param>
            <returns>Returns MIME entity with the specified Content-ID or null if no such entity.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cid</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_Message.AllEntities">
            <summary>
            Gets all MIME entities as list.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Media.Codec.Codec">
            <summary>
            This class is base class for media codecs.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.Codec.Codec.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes specified data block.
            </summary>
            <param name="buffer">Data to encode.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to encode.</param>
            <returns>Returns encoded block.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.Codec.Codec.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes specified data block.
            </summary>
            <param name="buffer">Data to encode.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to decode.</param>
            <returns>Returns encoded data.</returns>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Codec.Name">
            <summary>
            Gets codec name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Multipart">
            <summary>
            This class represents MIME application/xxx bodies. Defined in RFC 2046 5.1.
            </summary>
            <remarks>
            The "multipart" represents single MIME body containing multiple child MIME entities.
            The "multipart" body must contain at least 1 MIME entity.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.ParseInternal(LumiSoft.Net.MIME.MIME_Entity,System.String,LumiSoft.Net.IO.SmartStream,LumiSoft.Net.MIME.MIME_b_Multipart)">
            <summary>
            Internal body parsing.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="mediaType">MIME media type. For example: text/plain.</param>
            <param name="stream">Stream from where to read body.</param>
            <param name="body">Multipart body instance.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b>, <b>stream</b> or <b>body</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.SetParent(LumiSoft.Net.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Sets body parent.
            </summary>
            <param name="entity">Owner entity.</param>
            <param name="setContentType">If true sets entity.ContentType header value.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.DefaultBodyPartContentType">
            <summary>
            Gets default body part Content-Type. For more info see RFC 2046 5.1.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.BodyParts">
            <summary>
            Gets multipart body body-parts collection.
            </summary>
            <remarks>Multipart entity child entities are called "body parts" in RFC 2045.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.TextPreamble">
            <summary>
            Gets or sets "preamble" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Preamble text is text between MIME entiy headers and first boundary.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart.TextEpilogue">
            <summary>
            Gets or sets "epilogue" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Epilogue text is text after last boundary end.</remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader">
            <summary>
            Implements  multipart "body parts" reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.#ctor(LumiSoft.Net.IO.SmartStream,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream from where to read body part.</param>
            <param name="boundary">Boundry ID what separates body parts.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>boundary</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Next">
            <summary>
            Moves to next "body part". Returns true if moved to next "body part" or false if there are no more parts.
            </summary>
            <returns>Returns true if moved to next "body part" or false if there are no more body parts.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.TextPreamble">
            <summary>
            Gets "preamble" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Preamble text is text between MIME entiy headers and first boundary.</remarks>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.TextEpilogue">
            <summary>
            Gets "epilogue" text. Defined in RFC 2046 5.1.1.
            </summary>
            <remarks>Epilogue text is text after last boundary end.</remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State">
            <summary>
            This enum specified multipart reader sate.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State.SeekFirst">
            <summary>
            First boundary must be seeked.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State.ReadNext">
            <summary>
            Read next boundary.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_b_Multipart._MultipartReader.State.Done">
            <summary>
            All boundraies readed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Audio">
            <summary>
            This class represents MIME audio/xxx bodies. Defined in RFC 2046 4.3.
            </summary>
            <remarks>A media type of "audio" indicates that the body contains audio data.</remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Audio.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Audio.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login">
            <summary>
            Implements "LOGIN" authenticaiton.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism">
            <summary>
            This base class for server SASL authentication mechanisms.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientRespone</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Name">
            <summary>
            Gets IANA-registered SASL authentication mechanism name.
            </summary>
            <remarks>The registered list is available from: http://www.iana.org/assignments/sasl-mechanisms .</remarks>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Login.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection">
            <summary>
            SIP header fields collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header field with specified name and value to the end of the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Add(LumiSoft.Net.SIP.Message.SIP_HeaderField)">
            <summary>
            Adds specified header field to the end of the collection.
            </summary>
            <param name="headerField">Header field.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the header field.</param>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Set(System.String,System.String)">
            <summary>
            Sets specified header field value. If header field existst, first found value is set.
            If field doesn't exist, it will be added.
            </summary>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Remove(System.Int32)">
            <summary>
            Removes header field at the specified index from the collection.
            </summary>
            <param name="index">The index of the header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Remove(LumiSoft.Net.SIP.Message.SIP_HeaderField)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.RemoveFirst(System.String)">
            <summary>
            Removes first header field with specified name.
            </summary>
            <param name="name">Header fields name.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with specified name from the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Clear">
            <summary>
            Clears the collection of all header fields.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Contains(System.String)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Contains(LumiSoft.Net.SIP.Message.SIP_HeaderField)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="headerField">Header field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.GetFirst(System.String)">
            <summary>
            Gets first header field with specified name, returns null if specified field doesn't exist.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Get(System.String)">
            <summary>
            Gets header fields with specified name.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Parse(System.String)">
            <summary>
            Parses header fields from string.
            </summary>
            <param name="headerString">Header string.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Parse(System.IO.Stream)">
            <summary>
            Parses header fields from stream. Stream position stays where header reading ends.
            </summary>
            <param name="stream">Stream from where to parse.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.ToHeaderString">
            <summary>
            Converts header fields to SIP message header string.
            </summary>
            <returns>Returns SIP message header as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.GetheaderField(System.String,System.String)">
            <summary>
            Gets right type header field.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field name.</param>
            <returns>Returns right type header field.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Item(System.Int32)">
            <summary>
            Gets header field from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Count">
            <summary>
            Gets header fields count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_NameAddress">
            <summary>
            Implements SIP "name-addr" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                name-addr = [ display-name ] LAQUOT addr-spec RAQUOT
                addr-spec = SIP-URI / SIPS-URI / absoluteURI
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP <b>name-addr</b> value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.#ctor(System.String,LumiSoft.Net.AbsoluteUri)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="uri">Uri.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.Parse(System.String)">
            <summary>
            Parses "name-addr" or "addr-spec" from specified value.
            </summary>
            <param name="value">SIP "name-addr" or "addr-spec" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "name-addr" or "addr-spec" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.ToStringValue">
            <summary>
            Converts this to valid name-addr or addr-spec string as needed.
            </summary>
            <returns>Returns name-addr or addr-spec string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.DisplayName">
            <summary>
            Gets or sets display name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.Uri">
            <summary>
            Gets or sets URI. This can be SIP-URI / SIPS-URI / absoluteURI.
            Examples: sip:ivar@lumisoft.ee,sips:ivar@lumisoft.ee,mailto:ivar@lumisoft.ee, .... .
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.IsSipOrSipsUri">
            <summary>
            Gets if current URI is sip or sips URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.IsSipUri">
            <summary>
            Gets if current URI is SIP uri.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.IsSecureSipUri">
            <summary>
            Gets if current URI is SIPS uri.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.IsMailToUri">
            <summary>
            Gets if current URI is MAILTO uri.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_From">
            <summary>
            Implements SIP "From" value. Defined in RFC 3261.
            The From header field indicates the initiator of the request.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                From       = ( name-addr / addr-spec ) *( SEMI from-param )
                from-param = tag-param / generic-param
                tag-param  = "tag" EQUAL token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">From: header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.#ctor(LumiSoft.Net.SIP.Message.SIP_t_NameAddress)">
            <summary>
            Default constructor.
            </summary>
            <param name="address">From address.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.Parse(System.String)">
            <summary>
            Parses "From" from specified value.
            </summary>
            <param name="value">SIP "accept-range" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "From" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.ToStringValue">
            <summary>
            Converts this to valid "From" value.
            </summary>
            <returns>Returns "From" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_From.Address">
            <summary>
            Gets address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_From.Tag">
            <summary>
            Gets or sets tag parameter value.
            The "tag" parameter serves as a general mechanism for dialog identification.
            Value null means that tag paramter doesn't exist.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_CSeq">
            <summary>
            Implements SIP "Cseq" value. Defined in RFC 3261.
            A CSeq in a request contains a single decimal sequence number and 
            the request method. The method part of CSeq is case-sensitive. The CSeq header 
            field serves to order transactions within a dialog, to provide a means to uniquely 
            identify transactions, and to differentiate between new requests and request retransmissions.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                CSeq = 1*DIGIT LWS Method
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">CSeq: header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="sequenceNumber">Command sequence number.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.Parse(System.String)">
            <summary>
            Parses "CSeq" from specified value.
            </summary>
            <param name="value">SIP "CSeq" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "CSeq" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.ToStringValue">
            <summary>
            Converts this to valid "CSeq" value.
            </summary>
            <returns>Returns "CSeq" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_CSeq.SequenceNumber">
            <summary>
            Gets or sets sequence number.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_CSeq.RequestMethod">
            <summary>
            Gets or sets request method. Note: this value is case-sensitive !
            </summary>
        </member>
        <member name="T:LumiSoft.Net.CircleCollection`1">
            <summary>
            Circle collection. Elements will be circled clockwise.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Add(`0[])">
            <summary>
            Adds specified items to the collection.
            </summary>
            <param name="items">Items to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>items</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Add(`0)">
            <summary>
            Adds specified item to the collection.
            </summary>
            <param name="item">Item to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>item</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Remove(`0)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>item</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Clear">
            <summary>
            Clears all items from collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Contains(`0)">
            <summary>
            Gets if the collection contain the specified item.
            </summary>
            <param name="item">Item to check.</param>
            <returns>Returns true if the collection contain the specified item, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Next">
            <summary>
            Gets next item from the collection. This method is thread-safe.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when thre is no items in the collection.</exception>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.ToArray">
            <summary>
            Copies all elements to new array, all elements will be in order they added. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.ToCurrentOrderArray">
            <summary>
            Copies all elements to new array, all elements will be in current circle order. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="P:LumiSoft.Net.CircleCollection`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.CircleCollection`1.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Item zero based index.</param>
            <returns>Returns item at the specified index.</returns>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.AuthUser_EventArgs">
            <summary>
            Provides data for the AuthUser event for POP3_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="userName">Username.</param>
            <param name="passwData">Password data.</param>
            <param name="data">Authentication specific data(as tag).</param>
            <param name="authType">Authentication type.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.Session">
            <summary>
            Gets reference to pop3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.PasswData">
            <summary>
            Password data. eg. for AUTH=PLAIN it's password and for AUTH=APOP it's md5HexHash.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.AuthData">
            <summary>
            Authentication specific data(as tag).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.Validated">
            <summary>
            Gets or sets if user is valid.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.ReturnData">
            <summary>
            Gets or sets authentication data what must be returned for connected client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.Plain">
            <summary>
            Plain username/password authentication.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.APOP">
            <summary>
            APOP
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.LOGIN">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.CRAM_MD5">
            <summary>
            Cram-md5 authentication.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.DIGEST_MD5">
            <summary>
            DIGEST-md5 authentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Core">
            <summary>
            Provides net core utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Core.GetHostName(System.Net.IPAddress)">
            <summary>
            Gets host name. If fails returns ip address.
            </summary>
            <param name="ip">IP address which to reverse lookup.</param>
            <returns>Returns host name of specified IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Core.GetArgsText(System.String,System.String)">
            <summary>
            Gets argument part of command text.
            </summary>
            <param name="input">Input srting from where to remove value.</param>
            <param name="cmdTxtToRemove">Command text which to remove.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsNumber(System.String)">
            <summary>
            Checks if specified string is number(long).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64Decode(System.Byte[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QuotedPrintableEncode(System.Byte[])">
            <summary>
            Encodes data with quoted-printable encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QuotedPrintableDecode(System.Byte[])">
            <summary>
            quoted-printable decoder. Defined in RFC 2045 6.7.
            </summary>
            <param name="data">Data which to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QDecode(System.Text.Encoding,System.String)">
            <summary>
            "Q" decoder. This is same as quoted-printable, except '_' is converted to ' '.
            Defined in RFC 2047 4.2.
            </summary>
            <param name="encoding">Input string encoding.</param>
            <param name="data">String which to encode.</param>
            <returns>Returns decoded string.</returns>		
        </member>
        <member name="M:LumiSoft.Net.Core.CanonicalDecode(System.String)">
            <summary>
            Canonical decoding. Decodes all canonical encoding occurences in specified text.
            Usually mime message header unicode/8bit values are encoded as Canonical.
            Format: =?charSet?type[Q or B]?encoded_string?= .
            Defined in RFC 2047.
            </summary>
            <param name="text">Text to decode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.CanonicalEncode(System.String,System.String)">
            <summary>
            Canonical encoding.
            </summary>
            <param name="str">String to encode.</param>
            <param name="charSet">With what charset to encode string. If you aren't sure about it, utf-8 is suggested.</param>
            <returns>Returns encoded text.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Encode_IMAP_UTF7_String(System.String)">
            <summary>
            Encodes specified data with IMAP modified UTF7 encoding. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            Example: öö is encoded to &amp;APYA9g-.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Decode_IMAP_UTF7_String(System.String)">
            <summary>
            Decodes IMAP modified UTF7 encoded data. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            Example: &amp;APYA9g- is decoded to öö.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsAscii(System.String)">
            <summary>
            Checks if specified string data is acii data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.GetFileNameFromPath(System.String)">
            <summary>
            Gets file name from path.
            </summary>
            <param name="filePath">File file path with file name. For examples: c:\fileName.xxx, aaa\fileName.xxx.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsIP(System.String)">
            <summary>
            Gets if specified value is IP address.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified value is IP address.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Core.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHexString(System.String)">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">String to convert.</param>
            <returns>Returns data as hex string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHexString(System.Byte[])">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns data as hex string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHex(System.Byte)">
            <summary>
            Convert byte to hex data.
            </summary>
            <param name="byteValue">Byte to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHex(System.Byte[])">
            <summary>
            Converts data to hex data.
            </summary>
            <param name="data">Data to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Resturns md5 value or md5 hex value.</returns>
        </member>
        <member name="T:LumiSoft.Net.Mime.MailboxAddress">
            <summary>
            RFC 2822 3.4. (Address Specification) Mailbox address. 
            <p/>
            Syntax: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.Address">
            <summary>
            Rfc 2822 3.4 Address class. This class is base class for MailboxAddress and GroupAddress.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.Address.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="groupAddress">Spcified is address is group or mailbox address.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.Address.IsGroupAddress">
            <summary>
            Gets if address is group address or mailbox address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Address.Owner">
            <summary>
            Gets or sets owner of this address.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor(System.String)">
            <summary>
            Creates new mailbox from specified email address.
            </summary>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor(System.String,System.String)">
            <summary>
            Creates new mailbox from specified name and email address.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.Parse(System.String)">
            <summary>
            Parses mailbox from mailbox address string.
            </summary>
            <param name="mailbox">Mailbox string. Format: ["diplay-name"&lt;SP&gt;]&lt;local-part@domain&gt;.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.ToMailboxAddressString">
            <summary>
            Converts this to valid mailbox address string.
            Defined in RFC 2822(3.4. Address Specification) string. Format: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            For example, "Ivar Lumi" &lt;ivar@lumisoft.ee&gt;.
            If display name contains unicode chrs, display name will be encoded with canonical encoding in utf-8 charset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.OnChanged">
            <summary>
            This called when mailox address has changed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.MailboxString">
            <summary>
            Gets Mailbox as RFC 2822(3.4. Address Specification) string. Format: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            For example, "Ivar Lumi" &lt;ivar@lumisoft.ee&gt;.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.DisplayName">
            <summary>
            Gets or sets display name. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.EmailAddress">
            <summary>
            Gets or sets email address. For example ivar@lumisoft.ee.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.LocalPart">
            <summary>
            Gets local-part from email address. For example mailbox is "ivar" from "ivar@lumisoft.ee".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.Domain">
            <summary>
            Gets domain from email address. For example domain is "lumisoft.ee" from "ivar@lumisoft.ee".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.GroupAddress">
            <summary>
            RFC 2822 3.4. (Address Specification) Group address.
            <p/>
            Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.Parse(System.String)">
            <summary>
            Parses Rfc 2822 3.4 group address from group address string. Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
            <param name="group">Group address string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.OnChanged">
            <summary>
            This called when group address has changed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.GroupString">
            <summary>
            Gets Group as RFC 2822(3.4. Address Specification) string. Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.DisplayName">
            <summary>
            Gets or sets display name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.GroupMembers">
            <summary>
            Gets group members collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Utils">
            <summary>
            Provides utility methods for IMAP.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ParseMessageFlags(System.String)">
            <summary>
            Parses message flags from string.
            </summary>
            <param name="flagsString">Message flags string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.MessageFlagsToString(LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Converts message flags to string. Eg. \SEEN \DELETED .
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ACL_to_String(LumiSoft.Net.IMAP.IMAP_ACL_Flags)">
            <summary>
            Converts IMAP_ACL_Flags to string.
            </summary>
            <param name="flags">Flags to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ACL_From_String(System.String)">
            <summary>
            Parses IMAP_ACL_Flags from string.
            </summary>
            <param name="aclString">String from where to convert</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ParseDate(System.String)">
            <summary>
            Parses IMAP date time from string.
            </summary>
            <param name="date">DateTime string.</param>
            <returns>Returns parsed date-time value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>date</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.DateTimeToString(System.DateTime)">
            <summary>
            Converts date time to IMAP date time string.
            </summary>
            <param name="date">DateTime to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.NormalizeFolder(System.String)">
            <summary>
            Normalizes folder path.  Example: /Inbox/SubFolder/ will be Inbox/SubFolder.
            </summary>
            <param name="folder">Folder path to normalize.</param>
            <returns>Returns normalized folder path.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ParseQuotedParam(System.String@)">
            <summary>
            Parses [quoted] parameter from args text. Parameter may be not quoted, then parameter is
            terminated by SP. Example: argsText="string gdkga agkgs";argsText=stringValue 10.
            
            This method also removes parsed parameter from argsText.
            </summary>
            <param name="argsText">Arguments line from where to parse param.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ParseBracketParam(System.String@)">
            <summary>
            Parses bracket parameter from args text. Parameter may be not between (), then
            then args text is considered as value. Example: (test test);test test.
            
            This method also removes parsed parameter from argsText.
            </summary>
            <param name="argsText"></param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType">
            <summary>
            IMAP flags store type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType.Add">
            <summary>
            Flags are added to existing ones.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType.Remove">
            <summary>
            Flags are removed from existing ones.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType.Replace">
            <summary>
            Flags are replaced.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs">
            <summary>
            Provides data for IMAP events.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.#ctor(System.String,System.String)">
            <summary>
            Folder rename constructor.
            </summary>
            <param name="folder"></param>
            <param name="newFolder"></param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.Folder">
            <summary>
            Gets folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.NewFolder">
            <summary>
            Gets new folder name, this is available for rename only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.ErrorText">
            <summary>
            Gets or sets custom error text, which is returned to client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_Envelope">
            <summary>
            IMAP ENVELOPE STRUCTURE (date, subject, from, sender, reply-to, to, cc, bcc, in-reply-to, and message-id).
             Defined in RFC 3501 7.4.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ConstructEnvelope(LumiSoft.Net.Mail.Mail_Message)">
            <summary>
            Construct secified mime entity ENVELOPE string.
            </summary>
            <param name="entity">Mail message.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.Parse(System.String)">
            <summary>
            Parses ENVELOPE from IMAP envelope string.
            </summary>
            <param name="envelopeString">Envelope string.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ParseAddresses(LumiSoft.Net.StringReader)">
            <summary>
            Parses addresses from IMAP ENVELOPE addresses structure.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ParseAddress(System.String)">
            <summary>
            Parses address from IMAP ENVELOPE address structure.
            </summary>
            <param name="addressString">Address structure string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ConstructAddresses(LumiSoft.Net.Mail.Mail_t_Mailbox[],LumiSoft.Net.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Constructs ENVELOPE addresses structure.
            </summary>
            <param name="mailboxes">Mailboxes.</param>
            <param name="wordEncoder">Unicode words encoder.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ConstructAddress(LumiSoft.Net.Mail.Mail_t_Mailbox,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Constructs ENVELOPE address structure.
            </summary>
            <param name="address">Mailbox address.</param>
            <param name="wordEncoder">Unicode words encoder.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Date">
            <summary>
            Gets header field "<b>Date:</b>" value. Returns DateTime.MinValue if no date or date parsing fails.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Subject">
            <summary>
            Gets header field "<b>Subject:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.From">
            <summary>
            Gets header field "<b>From:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Sender">
            <summary>
            Gets header field "<b>Sender:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.ReplyTo">
            <summary>
            Gets header field "<b>Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.To">
            <summary>
            Gets header field "<b>To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Cc">
            <summary>
            Gets header field "<b>Cc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Bcc">
            <summary>
            Gets header field "<b>Bcc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.InReplyTo">
            <summary>
            Gets header field "<b>In-Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.MessageID">
            <summary>
            Gets header field "<b>Message-ID:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_BODY">
            <summary>
            IMAP BODYSTRUCTURE. Defined in RFC 3501 7.4.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.ConstructBodyStructure(LumiSoft.Net.Mail.Mail_Message,System.Boolean)">
            <summary>
            Constructs FETCH BODY and BODYSTRUCTURE response.
            </summary>
            <param name="message">Mail message.</param>
            <param name="bodystructure">Specifies if to construct BODY or BODYSTRUCTURE.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.ConstructParts(LumiSoft.Net.MIME.MIME_Entity,System.Boolean)">
            <summary>
            Constructs specified entity and it's childentities bodystructure string.
            </summary>
            <param name="entity">Mime entity.</param>
            <param name="bodystructure">Specifies if to construct BODY or BODYSTRUCTURE.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.Parse(System.String)">
            <summary>
            Parses IMAP BODYSTRUCTURE from body structure string.
            </summary>
            <param name="bodyStructureString">Body structure string</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.GetEntities(LumiSoft.Net.IMAP.IMAP_BODY_Entity[],System.Collections.Generic.List{LumiSoft.Net.IMAP.IMAP_BODY_Entity})">
            <summary>
            Gets mime entities, including nested entries. 
            </summary>
            <param name="entities"></param>
            <param name="allEntries"></param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY.MainEntity">
            <summary>
            Gets main entity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY.Entities">
            <summary>
            Gets all entities contained in BODYSTRUCTURE, including child entities.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY.Attachmnets">
            <summary>
            Gets attachment entities. Entity is considered as attachmnet if:<p/>
                *) Content-Type: name = "" is specified  (old RFC 822 message)<p/>
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum">
            <summary>
            Specifies message itmes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.Header">
            <summary>
            Message main header.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.Envelope">
            <summary>
            IMAP ENVELOPE structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.BodyStructure">
            <summary>
            IMAP BODYSTRUCTURE structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.Message">
            <summary>
            Full message.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Message">
            <summary>
            IMAP message info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Message.#ctor(LumiSoft.Net.IMAP.Server.IMAP_MessageCollection,System.String,System.Int64,System.DateTime,System.Int64,LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Default constructor.
            </summary>
            <param name="onwer">Owner collection.</param>
            <param name="id">Message ID.</param>
            <param name="uid">Message IMAP UID value.</param>
            <param name="internalDate">Message store date.</param>
            <param name="size">Message size in bytes.</param>
            <param name="flags">Message flags.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Message.SetFlags(LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Sets message flags.
            </summary>
            <param name="flags">Message flags.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.SequenceNo">
            <summary>
            Gets message 1 based sequence number in the collection. This property is slow, use with care, never use in big for loops !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.ID">
            <summary>
            Gets message ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.UID">
            <summary>
            Gets message IMAP UID value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.InternalDate">
            <summary>
            Gets message store date.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.Size">
            <summary>
            Gets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.Flags">
            <summary>
            Gets message flags.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.FlagsString">
            <summary>
            Gets message flags string. For example: "\DELETES \SEEN".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet_BYE">
            <summary>
            This class represents BYE: Goodbye RTCP Packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_BYE.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_BYE.ParseInternal(System.Byte[],System.Int32@)">
            <summary>
            Parses BYE packet from raw byte[] bye packet.
            </summary>
            <param name="buffer">Buffer what contains BYE packet.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_BYE.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores BYE packet to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store BYE packet.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_BYE.Version">
            <summary>
            Gets RTCP version.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_BYE.Type">
            <summary>
            Gets RTCP packet type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_BYE.Sources">
            <summary>
            Gets or sets SSRC/CSRC identifiers included in this BYE packet. 
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_BYE.LeavingReason">
            <summary>
            Gets leaving reason.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_BYE.Size">
            <summary>
            Gets number of bytes needed for this packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_TransferEncodings">
            <summary>
            This class holds MIME content transfer encodings. Defined in RFC 2045 6.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.SevenBit">
            <summary>
            Up to 998 octets per line of the code range 1..127 with CR and LF (codes 13 and 10 respectively) only allowed to 
            appear as part of a CRLF line ending. This is the default value.
            Defined in RFC 2045 6.2.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.EightBit">
            <summary>
            Up to 998 octets per line with CR and LF (codes 13 and 10 respectively) only allowed to appear as part of a CRLF line ending.
            Defined in RFC 2045 6.2.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.QuotedPrintable">
            <summary>
            Used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. 
            Designed to be efficient and mostly human readable when used for text data consisting primarily of US-ASCII characters 
            but also containing a small proportion of bytes with values outside that range.
            Defined in RFC 2045 6.7.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.Base64">
            <summary>
            Used to encode arbitrary octet sequences into a form that satisfies the rules of 7bit. Has a fixed overhead and is 
            intended for non text data and text that is not ASCII heavy.
            Defined in RFC 2045 6.8.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_TransferEncodings.Binary">
            <summary>
            Any sequence of octets. This type is not widely used. Defined in RFC 3030.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WebDav.WebDav_p">
            <summary>
            This class is base class for any WebDav property.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_p.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p.Namespace">
            <summary>
            Gets property namespace.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p.Name">
            <summary>
            Gets property name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p.Value">
            <summary>
            Gets property value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ParseException">
            <summary>
            This exception is thrown when parse errors are encountered.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Unstructured">
            <summary>
            This class represents normal unstructured text header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unstructured.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> or <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unstructured.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unstructured.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unstructured.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unstructured.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unstructured.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unstructured.Value">
            <summary>
            Gets or sets header field value.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when when null reference is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_e_Authenticate">
            <summary>
            This class provides data for server userName/password authentications.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_e_Authenticate.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumnets has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.IsAuthenticated">
            <summary>
            Gets or sets if specified user is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.AuthorizationID">
            <summary>
            Gets authorization ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_Authenticate.Password">
            <summary>
            Gets password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.StringReader">
            <summary>
            String reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.StringReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Source string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.StringReader.AppenString(System.String)">
            <summary>
            Appends specified string to SourceString.
            </summary>
            <param name="str">String value to append.</param>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadToFirstChar">
            <summary>
            Reads to first char, skips white-space(SP,VTAB,HTAB,CR,LF) from the beginning of source string.
            </summary>
            <returns>Returns white-space chars which was readed.</returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadSpecifiedLength(System.Int32)">
            <summary>
            Reads string with specified length. Throws exception if read length is bigger than source string length.
            </summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiter in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadToEnd">
            <summary>
            Reads all remaining string, returns null if no chars left to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWith(System.String)">
            <summary>
            Gets if source string starts with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string starts with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWithWord">
            <summary>
            Gets if current source string starts with word. For example if source string starts with
            whiter space or parenthesize, this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.StringReader.Available">
            <summary>
            Gets how many chars are available for reading.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.OriginalString">
            <summary>
            Gets original string passed to class constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.SourceString">
            <summary>
            Gets currently remaining string.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.Position">
            <summary>
            Gets position in original string.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_IsLocalUriEventHandler">
            <summary>
            Represents the method that will handle the SIP_ProxyCore.IsLocalUri event.
            </summary>
            <param name="uri">Request URI.</param>
            <returns>Returns true if server local URI, otherwise false.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventHandler">
            <summary>
            Represents the method that will handle the SIP_ProxyCore.Authenticate event.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_AddressExistsEventHandler">
            <summary>
            Represents the method that will handle the SIP_ProxyCore.AddressExists event.
            </summary>
            <param name="address">SIP address to check.</param>
            <returns>Returns true if specified address exists, otherwise false.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_Proxy">
            <summary>
            Implements SIP registrar,statefull and stateless proxy.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sipStack</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.m_pStack_RequestReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            This method is called when SIP stack receives new request.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.m_pStack_ResponseReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when SIP stack receives new response.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.OnRequestReceived(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            This method is called when new request is received.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.OnResponseReceived(LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when new response is received.
            </summary>
            <param name="e">Response event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.ForwardRequest(System.Boolean,LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs,System.Boolean)">
            <summary>
            Forwards specified request to target recipient.
            </summary>
            <param name="statefull">Specifies if request is sent statefully or statelessly.</param>
            <param name="e">Request event arguments.</param>
            <param name="addRecordRoute">If true Record-Route header field is added.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.AuthenticateRequest(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Authenticates SIP request. This method also sends all needed replys to request sender.
            </summary>
            <param name="e">Request event arguments.</param>
            <returns>Returns true if request was authenticated.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.AuthenticateRequest(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs,System.String@)">
            <summary>
            Authenticates SIP request. This method also sends all needed replys to request sender.
            </summary>
            <param name="e">Request event arguments.</param>
            <param name="userName">If authentication sucessful, then authenticated user name is stored to this variable.</param>
            <returns>Returns true if request was authenticated.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.IsLocalRoute(LumiSoft.Net.SIP_Uri)">
            <summary>
            Gets if this proxy server is responsible for specified route.
            </summary>
            <param name="uri">Route value to check.</param>
            <returns>Returns trues if server route, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.OnIsLocalUri(System.String)">
            <summary>
            Raises 'IsLocalUri' event.
            </summary>
            <param name="uri">Request URI.</param>
            <returns>Returns true if server local URI, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.OnAuthenticate(LumiSoft.Net.AUTH.Auth_HttpDigest)">
            <summary>
            Is called by SIP proxy or registrar server when it needs to authenticate user.
            </summary>
            <param name="auth">Authentication context.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Proxy.OnAddressExists(System.String)">
            <summary>
            Is called by SIP proxy if it needs to check if specified address exists.
            </summary>
            <param name="address">SIP address to check.</param>
            <returns>Returns true if specified address exists, otherwise false.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Proxy.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Proxy.Stack">
            <summary>
            Gets owner SIP stack.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Proxy.ProxyMode">
            <summary>
            Gets or sets proxy mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid combination modes passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Proxy.ForkingMode">
            <summary>
            Gets or sets how proxy handle forking. This property applies for statefull proxy only.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Proxy.Registrar">
            <summary>
            Gets SIP registrar server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Proxy.B2BUA">
            <summary>
            Gets SIP B2BUA server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Proxy.Handlers">
            <summary>
            Gets SIP proxy request handlers collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <remarks>
            NOTE: Handlers with lower index number are processed first.
            </remarks>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_Proxy.IsLocalUri">
            <summary>
            This event is raised when SIP proxy needs to know if specified request URI is local URI or remote URI.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_Proxy.Authenticate">
            <summary>
            This event is raised when SIP proxy or registrar server needs to authenticate user.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_Proxy.AddressExists">
            <summary>
            This event is raised when SIP proxy needs to know if specified local server address exists.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs">
            <summary>
            This class provides data for ResponseReceived events.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_ClientTransaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <param name="transaction">Client transaction what response it is. This value can be null if no matching client response.</param>
            <param name="response">Received response.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs.Response">
            <summary>
            Gets response received by SIP stack.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs.ClientTransaction">
            <summary>
            Gets client transaction which response it is. This value is null if no matching client transaction.
            If this core is staless proxy then it's allowed, otherwise core MUST discard that response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs.Dialog">
            <summary>
            Gets SIP dialog where Response belongs to. Returns null if Response doesn't belong any dialog.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext">
            <summary>
            Implements SIP 'proxy context'. Defined in RFC 3261.
            </summary>
            <remarks>Proxy context is bridge between caller and calee. 
            Proxy context job is to forward request to contact(s) and send received responses back to caller.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.#ctor(LumiSoft.Net.SIP.Proxy.SIP_Proxy,LumiSoft.Net.SIP.Stack.SIP_ServerTransaction,LumiSoft.Net.SIP.Stack.SIP_Request,System.Boolean,LumiSoft.Net.SIP.Proxy.SIP_ForkingMode,System.Boolean,System.Boolean,System.Boolean,LumiSoft.Net.SIP.Proxy.SIP_ProxyTarget[])">
            <summary>
            Default constructor.
            </summary>
            <param name="proxy">Owner proxy.</param>
            <param name="transaction">Server transaction what is used to send SIP responses back to caller.</param>
            <param name="request">Request to forward.</param>
            <param name="addRecordRoute">If true, Record-Route header field will be added.</param>
            <param name="forkingMode">Specifies how proxy context must handle forking.</param>
            <param name="isB2BUA">Specifies if proxy context is in B2BUA or just transaction satefull mode.</param>
            <param name="noCancel">Specifies if proxy should not send Cancel to forked requests.</param>
            <param name="noRecurse">Specifies what proxy server does when it gets 3xx response. If true proxy will forward
            request to new specified address if false, proxy will return 3xx response to caller.</param>
            <param name="targets">Possible remote targets. NOTE: These values must be in priority order !</param>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the reference type prameters is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.m_pServerTransaction_Canceled(System.Object,System.EventArgs)">
            <summary>
            Is called when server transaction has canceled.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.m_pServerTransaction_Disposed(System.Object,System.EventArgs)">
            <summary>
            This method is called when server transaction has disposed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler_Disposed(LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler)">
            <summary>
            This method is called when specified target handler has disposed.
            </summary>
            <param name="handler">TargetHandler what disposed.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Start">
            <summary>
            Starts processing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called more than once.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Cancel">
            <summary>
            Cancels proxy context processing. All client transactions and owner server transaction will be canceled,
            proxy context will be disposed. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>Start</b> method is not called and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ProcessResponse(LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler,LumiSoft.Net.SIP.Stack.SIP_ClientTransaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes received response.
            </summary>
            <param name="handler">Target handler what received response.</param>
            <param name="transaction">Client transaction what response it is.</param>
            <param name="response">Response received.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>handler</b>,<b>transaction</b> or <b>response</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.SendResponse(LumiSoft.Net.SIP.Stack.SIP_ClientTransaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends SIP response to caller. If proxy context is in B2BUA mode, new response is generated 
            as needed.
            </summary>
            <param name="transaction">Client transaction what response it is.</param>
            <param name="response">Response to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.CancelAllTargets">
            <summary>
            Cancels all targets processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.GetBestFinalResponse">
            <summary>
            Gets best final response. If no final response in responses collection, null is returned.
            </summary>
            <returns>Resturns best final response or  null if no final response.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.GetCredential(System.String)">
            <summary>
            Gets credentials for specified realm. Returns null if none such credentials.
            </summary>
            <param name="realm">Realm which credentials to get.</param>
            <returns>Returns specified realm credentials or null in none.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>realm</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Proxy">
            <summary>
            Gets owner SIP proxy server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ID">
            <summary>
            Gets proxy context ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.CreateTime">
            <summary>
            Gets time when proxy context was created.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ForkingMode">
            <summary>
            Gets forking mode used by this 'proxy context'.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.NoCancel">
            <summary>
            Gets if proxy cancels forked requests what are not needed any more. If true, 
            requests not canceled, otherwise canceled.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Recurse">
            <summary>
            Gets what proxy server does when it gets 3xx response. If true proxy will forward
            request to new specified address if false, proxy will return 3xx response to caller.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ServerTransaction">
            <summary>
            Gets server transaction what is responsible for sending responses to caller.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Request">
            <summary>
            Gets request what is forwarded by proxy context.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Responses">
            <summary>
            Gets all responses what proxy context has received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Credentials">
            <summary>
            Gets credentials collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler">
            <summary>
            This class is responsible for sending <b>request</b> to target(HOPs) and processing responses.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.#ctor(LumiSoft.Net.SIP.Proxy.SIP_ProxyContext,LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP_Uri,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner proxy context.</param>
            <param name="flow">Data flow to use for sending. Value null means system will choose it.</param>
            <param name="targetUri">Target URI where to send request.</param>
            <param name="addRecordRoute">If true, handler will add Record-Route header to forwarded message.</param>
            <param name="isRecursed">If true then this target is redirected by proxy context.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>targetURI</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.Init">
            <summary>
            Initializes target.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.ClientTransaction_ResponseReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            Is called when client transactions receives response.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.ClientTransaction_TimedOut(System.Object,System.EventArgs)">
            <summary>
            Is called when client transaction has timed out.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.ClientTransaction_TransportError(System.Object,LumiSoft.Net.ExceptionEventArgs)">
            <summary>
            Is called when client transaction encountered transport error.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.m_pTransaction_Disposed(System.Object,System.EventArgs)">
            <summary>
            This method is called when client transaction has disposed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.Start">
            <summary>
            Starts target processing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>Start</b> method is already called and this method is called.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.Cancel">
            <summary>
            Cancels target processing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.SendToNextHop">
            <summary>
            Starts sending request to next hop in queue.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when no next hop available(m_pHops.Count == 0) and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.SendToFlow(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Sends specified request to the specified data flow.
            </summary>
            <param name="flow">SIP data flow.</param>
            <param name="request">SIP request to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>request</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.CleanUpActiveHop">
            <summary>
            Cleans up acitve hop resources.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.IsStarted">
            <summary>
            Gets if this target processing has been started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.IsCompleted">
            <summary>
            Gets if request sender has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.Request">
            <summary>
            Gets SIP request what this <b>Target</b> is sending.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.TargetUri">
            <summary>
            Gets target URI where request is being sent.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.IsRecordingRoute">
            <summary>
            Gets if this target is recording routing(By adding Record-Route header field to forwarded requests).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.IsRecursed">
            <summary>
            Gets if this target is redirected by proxy context.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.TargetHandler.HasReceivedResponse">
            <summary>
            Gets if this handler has received any response from target.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism">
            <summary>
            Implements SIP "sec-mechanism" value. Defined in RFC 3329.
            </summary>
            <remarks>
            <code>
            RFC 3329 Syntax:
                sec-mechanism    = mechanism-name *(SEMI mech-parameters)
                mechanism-name   = ( "digest" / "tls" / "ipsec-ike" / "ipsec-man" / token )
                mech-parameters  = ( preference / digest-algorithm / digest-qop / digest-verify / extension )
                preference       = "q" EQUAL qvalue
                qvalue           = ( "0" [ "." 0*3DIGIT ] ) / ( "1" [ "." 0*3("0") ] )
                digest-algorithm = "d-alg" EQUAL token
                digest-qop       = "d-qop" EQUAL token
                digest-verify    = "d-ver" EQUAL LDQUOT 32LHEX RDQUOT
                extension        = generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.Parse(System.String)">
            <summary>
            Parses "sec-mechanism" from specified value.
            </summary>
            <param name="value">SIP "sec-mechanism" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "sec-mechanism" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.ToStringValue">
            <summary>
            Converts this to valid "sec-mechanism" value.
            </summary>
            <returns>Returns "sec-mechanism" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.Mechanism">
            <summary>
            Gets or sets security mechanism name. Defined values: "digest","tls","ipsec-ike","ipsec-man".
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid Mechanism value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.Q">
            <summary>
            Gets or sets 'q' parameter value. Value -1 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.D_Alg">
            <summary>
            Gets or sets 'd-alg' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.D_Qop">
            <summary>
            Gets or sets 'd-qop' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.D_Ver">
            <summary>
            Gets or sets 'd-ver' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Replaces">
            <summary>
            Implements SIP "Replaces" value. Defined in RFC 3891.
            </summary>
            <remarks>
            <code>
            RFC 3891 Syntax:
                Replaces        = callid *(SEMI replaces-param)
                replaces-param  = to-tag / from-tag / early-flag / generic-param
                to-tag          = "to-tag" EQUAL token
                from-tag        = "from-tag" EQUAL token
                early-flag      = "early-only"
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Replaces.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Replaces.Parse(System.String)">
            <summary>
            Parses "Replaces" from specified value.
            </summary>
            <param name="value">SIP "Replaces" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Replaces.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Replaces" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Replaces.ToStringValue">
            <summary>
            Converts this to valid "Replaces" value.
            </summary>
            <returns>Returns "Replaces" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Replaces.CallID">
            <summary>
            Gets or sets call id.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Replaces.ToTag">
            <summary>
            Gets or sets Replaces 'to-tag' parameter. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Replaces.FromTag">
            <summary>
            Gets or sets Replaces 'from-tag' parameter. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Replaces.EarlyFlag">
            <summary>
            Gets or sets Replaces 'early-flag' parameter.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection">
            <summary>
            vCard delivery address collection implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.#ctor(LumiSoft.Net.Mime.vCard.vCard)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner vCard.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Add(LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add new delivery address to the collection.
            </summary>
            <param name="type">Delivery address type. Note: This value can be flagged value !</param>
            <param name="postOfficeAddress">Post office address.</param>
            <param name="extendedAddress">Extended address.</param>
            <param name="street">Street name.</param>
            <param name="locality">Locality(city).</param>
            <param name="region">Region.</param>
            <param name="postalCode">Postal code.</param>
            <param name="country">Country.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Remove(LumiSoft.Net.Mime.vCard.DeliveryAddress)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Index of item which to get.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder">
            <summary>
            Holds IMAP selected folder info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.Update(LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder)">
            <summary>
            Updates current folder messages info with new messages info.
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.Folder">
            <summary>
            Gets selected folder name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.FolderUID">
            <summary>
            Gets folder UID(UIDVADILITY) value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.ReadOnly">
            <summary>
            Gets or sets if folder is read only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.Messages">
            <summary>
            Gets selected folder messages info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.UnSeenCount">
            <summary>
            Gets number of messages with \UNSEEN flags in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.RecentCount">
            <summary>
            Gets number of messages with \RECENT flags in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.DeletedCount">
            <summary>
            Gets number of messages with \DELETED flags in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.FirstUnseen">
            <summary>
            Gets first message index in the collection which has not \SEEN flag set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.MessageUidNext">
            <summary>
            Gets next new message predicted UID.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SearchGroup">
            <summary>
            IMAP search command grouped(parenthesized) search-key collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses search key from current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.IsHeaderNeeded">
            <summary>
            Gets if message Header is needed for matching.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.IsBodyTextNeeded">
            <summary>
            Gets if message body text is needed for matching.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.ParseSearchKey(LumiSoft.Net.StringReader)">
            <summary>
            Parses SearchGroup or SearchItem from reader. If reader starts with (, then parses searchGroup, otherwise SearchItem.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.Match_Key_Value(System.Object,System.Int64,System.Int64,System.Int64,System.DateTime,LumiSoft.Net.IMAP.IMAP_MessageFlags,LumiSoft.Net.Mail.Mail_Message,System.String)">
            <summary>
            Gets if specified message matches to specified search key.
            </summary>
            <param name="searchKey">SearchKey or SearchGroup.</param>
            <param name="no">IMAP message sequence number.</param>
            <param name="uid">IMAP message UID.</param>
            <param name="size">IMAP message size in bytes.</param>
            <param name="internalDate">IMAP message INTERNALDATE (dateTime when server stored message).</param>
            <param name="flags">IMAP message flags.</param>
            <param name="message">Mime message main header only.</param>
            <param name="bodyText">Message body text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.IsHeaderNeededForKey(System.Object)">
            <summary>
            Gets if message header is needed for matching.
            </summary>
            <param name="searchKey"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.IsBodyTextNeededForKey(System.Object)">
            <summary>
            Gets if message body text is needed for matching.
            </summary>
            <param name="searchKey"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.Match(System.Int64,System.Int64,System.Int64,System.DateTime,LumiSoft.Net.IMAP.IMAP_MessageFlags,LumiSoft.Net.Mail.Mail_Message,System.String)">
            <summary>
            Gets if specified message matches with this class search-key.
            </summary>
            <param name="no">IMAP message sequence number.</param>
            <param name="uid">IMAP message UID.</param>
            <param name="size">IMAP message size in bytes.</param>
            <param name="internalDate">IMAP message INTERNALDATE (dateTime when server stored message).</param>
            <param name="flags">IMAP message flags.</param>
            <param name="message">Mime message main header only.</param>
            <param name="bodyText">Message body text.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_FetchItem">
            <summary>
            IMAP fetch item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],LumiSoft.Net.IMAP.IMAP_MessageFlags,System.String,System.String,System.String,LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags)">
            <summary>
            Default constructor.
            </summary>
            <param name="no">Number of message in folder.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size.</param>
            <param name="data">Message data.</param>
            <param name="flags">Message flags.</param>
            <param name="internalDate">Message INTERNALDATE.</param>
            <param name="envelope">Envelope string.</param>
            <param name="bodyStructure">BODYSTRUCTURE string.</param>
            <param name="fetchFlags">Specifies what data fetched from IMAP server.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.FetchFlags">
            <summary>
            Specifies what data this IMAP_FetchItem contains. This is flagged value and can contain multiple values.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.MessageNumber">
            <summary>
            Gets number of message in folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.UID">
            <summary>
            Gets message UID. This property is available only if IMAP_FetchItem_Flags.UID was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.Size">
            <summary>
            Gets message size. This property is available only if IMAP_FetchItem_Flags.Size was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.InternalDate">
            <summary>
            Gets message IMAP server INTERNAL date. This property is available only if IMAP_FetchItem_Flags.InternalDate was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.MessageFlags">
            <summary>
            Gets message flags. This property is available only if IMAP_FetchItem_Flags.MessageFlags was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.Envelope">
            <summary>
            Gets message IMAP ENVELOPE. This property is available only if IMAP_FetchItem_Flags.Envelope was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.BodyStructure">
            <summary>
            Gets message IMAP BODYSTRUCTURE. This property is available only if IMAP_FetchItem_Flags.BodyStructure was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.HeaderData">
            <summary>
            Gets message header data. This property is available only if IMAP_FetchItem_Flags.Header was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.MessageData">
            <summary>
            Gets message data. This property is available only if IMAP_FetchItem_Flags.Message was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.IsNewMessage">
            <summary>
            Gets if message is unseen. This property is available only if IMAP_FetchItem_Flags.MessageFlags was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.IsAnswered">
            <summary>
            Gets if message is answered. This property is available only if IMAP_FetchItem_Flags.MessageFlags was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.Data">
            <summary>
            Gets message data(headers or full message), it depends on HeadersOnly property.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.HeadersOnly">
            <summary>
            Gets if headers or full message requested in fetch.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.AuthUserEventHandler">
            <summary>
            Represents the method that will handle the AuthUser event for FTP_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A AuthUser_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FileSysEntryEventHandler">
            <summary>
            Represents the method that will handle the filsystem rerlated events for FTP_Server.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_Server">
            <summary>
            FTP Server component.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.#ctor">
            <summary>
            Defalut constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.OnValidate_IpAddress(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Raises event ValidateIP event.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
            <returns>Returns true if connection allowed.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.OnAuthUser(LumiSoft.Net.FTP.Server.FTP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Authenticates user.
            </summary>
            <param name="session">Reference to current pop3 session.</param>
            <param name="userName">User name.</param>
            <param name="passwData"></param>
            <param name="data"></param>
            <param name="authType"></param>
            <returns></returns>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.ValidateIPAddress">
            <summary>
            Occurs when new computer connected to FTP server.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.AuthUser">
            <summary>
            Occurs when connected user tryes to authenticate.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.GetDirInfo">
            <summary>
            Occurs when server needs directory info (directories,files in deirectory).
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.DirExists">
            <summary>
            Occurs when server needs to validatee directory.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.CreateDir">
            <summary>
            Occurs when server needs needs to create directory.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.DeleteDir">
            <summary>
            Occurs when server needs needs to delete directory.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.FileExists">
            <summary>
            Occurs when server needs needs validate file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.StoreFile">
            <summary>
            Occurs when server needs needs to store file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.GetFile">
            <summary>
            Occurs when server needs needs to get file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.DeleteFile">
            <summary>
            Occurs when server needs needs to delete file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.RenameDirFile">
            <summary>
            Occurs when server needs needs to rname directory or file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.SessionLog">
            <summary>
            Occurs when POP3 session has finished and session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Server.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Server.PassivePublicIP">
            <summary>
            Gets or sets passive mode public IP address what is reported to clients. 
            This property is manly needed if FTP server is running behind NAT. 
            Value null means not spcified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Server.PassiveStartPort">
            <summary>
            Gets or sets passive mode start port form which server starts using ports.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when ivalid value is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.TransferType">
            <summary>
            Transfer type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.Client.TransferType.Ascii">
            <summary>
            ASCII transfer data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.Client.TransferType.Binary">
            <summary>
            Binary transfer data. 
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.FTP_Client">
            <summary>
            This class implements FTP client. Defined in RFC 959.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client">
            <summary>
            This class implements generic TCP client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Session">
            <summary>
            This is base class for TCP_Client and TCP_ServerSession.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Session.Disconnect">
            <summary>
            Disconnects session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsConnected">
            <summary>
            Gets if session is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.ID">
            <summary>
            Gets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.IsAuthenticated">
            <summary>
            Gets if this session is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity , returns null if not authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Session.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.Net.IPEndPoint,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginConnect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts connection to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use for connect.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginConnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndConnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Connect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use for connet.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.Disconnect">
            <summary>
            Disconnects connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Starts disconnecting connection.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous disconnect request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginDisconnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndDisconnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.SwitchToSecure">
            <summary>
            Switches session to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected or is already secure.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.OnError(System.Exception)">
            <summary>
            This must be called when unexpected error happens. When inheriting <b>TCP_Client</b> class, be sure that you call <b>OnError</b>
            method for each unexpected error.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.ReadLine">
            <summary>
            Reads and logs specified line from connected host.
            </summary>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddRead(System.Int64,System.String)">
            <summary>
            Logs read operation.
            </summary>
            <param name="size">Number of bytes readed.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddWrite(System.Int64,System.String)">
            <summary>
            Logs write operation.
            </summary>
            <param name="size">Number of bytes written.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddText(System.String)">
            <summary>
            Logs free text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Client.LogAddException(System.String,System.Exception)">
            <summary>
            Logs exception.
            </summary>
            <param name="text">Log text.</param>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.Logger">
            <summary>
            Gets or sets TCP client logger. Value null means no logging.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsConnected">
            <summary>
            Gets if TCP client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ID">
            <summary>
            Gets session ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Client.ValidateCertificateCallback">
            <summary>
            Gets or stes remote callback which is called when remote server certificate needs to be validated.
            Value null means not sepcified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.BeginConnectHostDelegate">
            <summary>
            Internal helper method for asynchronous Connect method.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.BeginConnectEPDelegate">
            <summary>
            Internal helper method for asynchronous Connect method.
            </summary>
            <param name="localEP">Local IP end point to use for connect.</param>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Client.DisconnectDelegate">
            <summary>
            Internal helper method for asynchronous Disconnect method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.#ctor">
            <summary>
            Default connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Dispose">
            <summary>
            Clean up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Disconnect">
            <summary>
            Closes connection to FTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Reinitialize">
            <summary>
            Terminates the user and flushes all state information on the server. The connection is left open. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user. Authenticate method chooses strongest possible authentication method supported by server.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or is already authenticated.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Noop">
            <summary>
            Send NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Abort">
            <summary>
            Aborts an active file transfer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetCurrentDir">
            <summary>
            Gets current working directory in the sFTP server.
            </summary>
            <returns>Returns current working directory.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.SetCurrentDir(System.String)">
            <summary>
            Changes the current working directory on the server.
            </summary>
            <param name="path">Directory absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetList">
            <summary>
            Gets files and directories in the current server directory.
            </summary>
            <returns>Returns current working directory listing.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetList(System.String)">
            <summary>
            Gets files and directories in the current server directory.
            </summary>
            <param name="path">Directory or file name which listing to get. Value null means current directory will be listed.</param>
            <returns>Returns current working directory listing.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetFile(System.String,System.String)">
            <summary>
            Gets specified file from FTP server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <param name="storePath">Local file path where to store received file.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> or <b>storePath</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetFile(System.String,System.IO.Stream)">
            <summary>
            Gets specified file from FTP server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <param name="stream">Stream where to store received file.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.AppendToFile(System.String,System.IO.Stream)">
            <summary>
            Appends specified data to the existing file. If existing file doesn't exist, it will be created.
            </summary>
            <param name="path">FTP server file absolute or relative path to the current working directory.</param>
            <param name="stream">Stream which data append to the specified FTP server file.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raied when <b>file</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.StoreFile(System.String,System.String)">
            <summary>
            Stores specified file to FTP server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <param name="sourcePath">File path which to store to FTP server.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> or <b>sourcePath</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.StoreFile(System.String,System.IO.Stream)">
            <summary>
            Stores specified file to FTP server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <param name="stream">Stream which data to store to FTP server.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected or FTP data connection has active read/write operation.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DeleteFile(System.String)">
            <summary>
            Deletes specified file from ftp server.
            </summary>
            <param name="path">File absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Rename(System.String,System.String)">
            <summary>
            Renames file or directory to the new specified name.
            </summary>
            <param name="fromPath">Exisitng file or directory absolute or relative path to the current working directory.</param>
            <param name="toPath">New file or directory absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>fromPath</b> or <b>toPath</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the FTP server.
            </summary>
            <param name="path">Directory absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DeleteDirectory(System.String)">
            <summary>
            Deletes specified directory from FTP server.
            </summary>
            <param name="path">Directory absolute or relative path to the current working directory.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when FTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>path</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.FTP.Client.FTP_ClientException">Is raised when FTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.SetTransferType(LumiSoft.Net.FTP.Client.TransferType)">
            <summary>
            Sets transfer typr.
            </summary>
            <param name="type">Transfer type.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Port">
            <summary>
            Sends PORT command to server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Pasv">
            <summary>
            Sends PASV command to server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.ReadResponse">
            <summary>
            Reads FTP server response line(s).
            </summary>
            <returns>Returns FTP server response.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.TransferMode">
            <summary>
            Gets or sets data connection establish mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataIP">
            <summary>
            Gets or sets local IP address to use for data connection. Value null means that system will allocate it.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataPortRange">
            <summary>
            Gets or sets ports what data connection may use. Value null means that system will allocate it.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.GreetingText">
            <summary>
            Gets greeting text which was sent by FTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and FTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.ExtenededCapabilities">
            <summary>
            Gets FTP exteneded capabilities supported by FTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and FTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and FTP client is not connected.</exception>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection">
            <summary>
            This class implements FTP client data connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.#ctor(LumiSoft.Net.FTP.Client.FTP_Client)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Data connection owner FTP client.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.SwitchToActive">
            <summary>
            Swtiches FTP data connection to active mode.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.SwitchToPassive(System.Net.IPEndPoint)">
            <summary>
            Swtiches FTP data connection to passive mode and connects to the sepcified FTP server.
            </summary>
            <param name="remoteEP">FTP server IP end point.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from FTP data connection and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.WriteAll(System.IO.Stream)">
            <summary>
            Writes all data from the specified stream to FTP data connection.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.WaitFtpServerToConnect(System.Int32)">
            <summary>
            Waits FTP server to connect to this data connection.
            </summary>
            <param name="waitTime">Wait time out in seconds.</param>
            <returns>Returns connected network stream.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.CreateSocket">
            <summary>
            Creates new socket for data connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.CleanUpSocket">
            <summary>
            Cleans up socket for reuse.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.TransferStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all source stream data to the specified target stream.
            </summary>
            <param name="source">Source stream.</param>
            <param name="target">Target stream.</param>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.LocalEndPoint">
            <summary>
            Gets data connection local IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.LastActivity">
            <summary>
            Gets last time when data connection has read or written data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.DataConnection.IsActive">
            <summary>
            Gets if there is active read or write job in data stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_A">
            <summary>
            A record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_A.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_A.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_A.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.PacketReceivedHandler">
            <summary>
            Represents the method that will handle the <b>UdpServer.PacketReceived</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_Server">
            <summary>
            This class implements generic UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Start">
            <summary>
            Starts UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Stop">
            <summary>
            Stops UDP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.Restart">
            <summary>
            Restarts running server. If server is not running, this methods has no efffect.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint@)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="localEP">Returns local IP end point which was used to send UDP packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="localEP">Local end point to use for sending.</param>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.SendPacket(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint@)">
            <summary>
            Sends specified UDP packet to the specified remote end point.
            </summary>
            <param name="socket">UDP socket to use for data sending.</param>
            <param name="packet">UDP packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="localEP">Returns local IP end point which was used to send UDP packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.GetLocalEndPoint(System.Net.IPEndPoint)">
            <summary>
            Gets suitable local IP end point for the specified remote endpoint.
            If there are multiple sending local end points, they will be load-balanched with round-robin.
            </summary>
            <param name="remoteEP">Remote end point.</param>
            <returns>Returns local IP end point.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>remoteEP</b> has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when no suitable IPv4 or IPv6 socket for <b>remoteEP</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.ProcessIncomingUdp">
            <summary>
            Processes incoming UDP data and queues it for processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.ProcessQueuedPackets">
            <summary>
            This method processes queued UDP packets.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.ProcessPacketOnTrPool(System.Object)">
            <summary>
            Processes UDP packet on thread pool thread.
            </summary>
            <param name="state">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.OnUdpPacketReceived(LumiSoft.Net.UDP.UDP_Server.UdpPacket)">
            <summary>
            Raises PacketReceived event.
            </summary>
            <param name="packet">UDP packet.</param>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.OnError(System.Exception)">
            <summary>
            Raises Error event.
            </summary>
            <param name="x">Exception occured.</param>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.IsRunning">
            <summary>
            Gets if UDP server is running.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.ProcessMode">
            <summary>
            Gets or sets UDP packets process mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when server is running and this property value is tried to set.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.MTU">
            <summary>
            Gets or sets maximum network transmission unit.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when server is running and this property value is tried to set.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.MaxQueueSize">
            <summary>
            Gets maximum UDP packets to queue.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.Bindings">
            <summary>
            Gets or sets IP end point where UDP server is binded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.StartTime">
            <summary>
            Gets time when server was started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.BytesReceived">
            <summary>
            Gets how many bytes this UDP server has received since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.PacketsReceived">
            <summary>
            Gets how many UDP packets this UDP server has received since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.BytesSent">
            <summary>
            Gets how many bytes this UDP server has sent since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.PacketsSent">
            <summary>
            Gets how many UDP packets this UDP server has sent since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan UDP server is not running and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.UDP.UDP_Server.PacketReceived">
            <summary>
            This event is raised when new UDP packet received.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.UDP.UDP_Server.Error">
            <summary>
            This event is raised when unexpected error happens.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_Server.UdpPacket">
            <summary>
            This class represents UDP packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.UDP.UDP_Server.UdpPacket.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket which received packet.</param>
            <param name="remoteEP">Remote end point from where packet was received.</param>
            <param name="data">UDP packet data.</param>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.UdpPacket.Socket">
            <summary>
            Gets socket which received packet.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.UdpPacket.RemoteEndPoint">
            <summary>
            Gets remote end point from where packet was received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.UDP.UDP_Server.UdpPacket.Data">
            <summary>
            Gets UDP packet data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_Server">
            <summary>
            This class implements SMTP server.  Defined RFC 5321.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Server`1">
            <summary>
            This class implements generic TCP session based server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.m_pTimer_IdleTimeout_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when session idle check timer triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Start">
            <summary>
            Starts TCP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Stop">
            <summary>
            Stops TCP server, all active connections will be terminated.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.Restart">
            <summary>
            Restarts TCP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnMaxConnectionsExceeded(`0)">
            <summary>
            Is called when new incoming session and server maximum allowed connections exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnMaxConnectionsPerIPExceeded(`0)">
            <summary>
            Is called when new incoming session and server maximum allowed connections per connected IP exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.StartListen">
            <summary>
            Starts listening incoming connections. NOTE: All active listening points will be disposed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.IOCompletionBeginAccept(System.Net.Sockets.SocketAsyncEventArgs,System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Starts accepting connection(s).
            </summary>
            <param name="socketArgs">AcceptAsync method data.</param>
            <param name="listeningSocket">Local listening socket.</param>
            <param name="bindInfo">Local listening socket bind info.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socketArgs</b>,<b>listeningSocket</b> or <b>bindInfo</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.AsynSocketsAcceptCompleted(System.IAsyncResult)">
            <summary>
            This method is called when BeginAccept ha completed.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.ProcessConnection(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Processes specified connection.
            </summary>
            <param name="socket">Accpeted socket.</param>
            <param name="bindInfo">Local bind info what accpeted connection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> or <b>bindInfo</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnStarted">
            <summary>
            Raises <b>Started</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnStopped">
            <summary>
            Raises <b>Stopped</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnSessionCreated(`0)">
            <summary>
            Raises <b>SessionCreated</b> event.
            </summary>
            <param name="session">TCP server session that was created.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.IsDisposed">
            <summary>
            Gets if server is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.IsRunning">
            <summary>
            Gets if server is running.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Bindings">
            <summary>
            Gets or sets TCP server IP bindings.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.LocalEndPoints">
            <summary>
            Gets local listening IP end points.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.MaxConnections">
            <summary>
            Gets or sets maximum allowed concurent connections. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed connections for 1 IP address. Value 0 means unlimited.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.SessionIdleTimeout">
            <summary>
            Gets or sets maximum allowed session idle time in seconds, after what session will be terminated. Value 0 means unlimited,
            but this is strongly not recommened.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Logger">
            <summary>
            Gets or sets logger. Value null means no logging.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.StartTime">
            <summary>
            Gets the time when server was started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ConnectionsProcessed">
            <summary>
            Gets how many connections this TCP server has processed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.Sessions">
            <summary>
            Gets TCP server active sessions.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when TCP server is not running and this property is accesed.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Started">
            <summary>
            This event is raised when TCP server has started.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Stopped">
            <summary>
            This event is raised when TCP server has stopped.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Disposed">
            <summary>
            This event is raised when TCP server has disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.SessionCreated">
            <summary>
            This event is raised when TCP server creates new session.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_Server`1.Error">
            <summary>
            This event is raised when TCP server has unknown unhandled error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint">
            <summary>
            This class holds listening point info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Listening socket.</param>
            <param name="bind">Bind info what acceped socket.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.Socket">
            <summary>
            Gets socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_Server`1.ListeningPoint.BindInfo">
            <summary>
            Gets bind info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.OnMaxConnectionsExceeded(LumiSoft.Net.SMTP.Server.SMTP_Session)">
            <summary>
            Is called when new incoming session and server maximum allowed connections exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.OnMaxConnectionsPerIPExceeded(LumiSoft.Net.SMTP.Server.SMTP_Session)">
            <summary>
            Is called when new incoming session and server maximum allowed connections per connected IP exceeded.
            </summary>
            <param name="session">Incoming session.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.ServiceExtentions">
            <summary>
            Gets or sets SMTP server supported service extentions.
            Supported values: PIPELINING,SIZE,STARTTLS,8BITMIME,BINARYMIME,CHUNKING,DSN.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.GreetingText">
            <summary>
            Gets or sets server greeting text.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.MaxBadCommands">
            <summary>
            Gets or sets how many bad commands session can have before it's terminated. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.MaxTransactions">
            <summary>
            Gets or sets maximum mail transactions per session. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.MaxMessageSize">
            <summary>
            Gets or sets maximum message size in bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.MaxRecipients">
            <summary>
            Gets or sets maximum allowed recipients per SMTP transaction.
            </summary>
            <remarks>According RFC 5321 this value SHOULD NOT be less than 100.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.Extentions">
            <summary>
            Gets SMTP service extentions list.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_SmartHost">
            <summary>
            This class holds smart host settings.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="host">Smart host name or IP address.</param>
            <param name="port">Smart host port.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.#ctor(System.String,System.Int32,LumiSoft.Net.SslMode,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="host">Smart host name or IP address.</param>
            <param name="port">Smart host port.</param>
            <param name="sslMode">Smart host SSL mode.</param>
            <param name="userName">Smart host user name.</param>
            <param name="password">Smart host password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.Host">
            <summary>
            Gets smart host name or IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.Port">
            <summary>
            Gets smart host port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.SslMode">
            <summary>
            Gets smart host SSL mode.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.UserName">
            <summary>
            Gets smart host user name. Value null means no authentication used.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_SmartHost.Password">
            <summary>
            Gets smart host password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_UA_Registration">
            <summary>
            This class represent SIP UA registration.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP_Uri,System.String,LumiSoft.Net.AbsoluteUri,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Owner SIP stack.</param>
            <param name="server">Registrar server URI. For example: sip:domain.com.</param>
            <param name="aor">Address of record. For example: user@domain.com.</param>
            <param name="contact">Contact URI.</param>
            <param name="expires">Gets after how many seconds reigisration expires.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ua</b>,<b>server</b>,<b>transport</b>,<b>aor</b> or <b>contact</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments contains invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.m_pTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            This method is raised when registration needs to refresh server registration.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.m_pRegisterSender_ResponseReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when REGISTER has finished.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.m_pUnregisterSender_ResponseReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when un-REGISTER has finished.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.BeginRegister(System.Boolean)">
            <summary>
            Starts registering.
            </summary>
            <param name="autoRefresh">If true, registration takes care of refreshing itself to registrar server.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.BeginUnregister(System.Boolean)">
            <summary>
            Starts unregistering.
            </summary>
            <param name="dispose">If true, registration will be disposed after unregister.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.SetState(LumiSoft.Net.SIP.Stack.SIP_UA_RegistrationState)">
            <summary>
            Changes current registration state.
            </summary>
            <param name="newState">New registration state.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.OnStateChanged">
            <summary>
            Raises event <b>StateChanged</b>.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.OnRegistered">
            <summary>
            Raises event <b>Registered</b>.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.OnUnregistered">
            <summary>
            Raises event <b>Unregistered</b>.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.OnError(LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            Raises event <b>Error</b>.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.OnDisposed">
            <summary>
            Raises event <b>Disposed</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.State">
            <summary>
            Gets registration state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.Expires">
            <summary>
            Gets after how many seconds contact expires.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.AOR">
            <summary>
            Gets registration address of record.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.Contact">
            <summary>
            Gets registration contact URI.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.AutoFixContact">
            <summary>
            If true and contact is different than received or rport, received and rport is used as contact.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.StateChanged">
            <summary>
            This event is raised when registration state has changed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.Registered">
            <summary>
            This event is raised when REGISTER has completed successfully.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.Unregistered">
            <summary>
            This event is raised when un-REGISTER has completed successfully.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.Error">
            <summary>
            This event is raised when REGISTER/un-REGISTER has failed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_UA_Registration.Disposed">
            <summary>
            This event is raised when registration has disposed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.UA.SIP_UA_Call_EventArgs">
            <summary>
            This class provides data for <b>SIP_UA.IncomingCall</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call_EventArgs.#ctor(LumiSoft.Net.SIP.UA.SIP_UA_Call)">
            <summary>
            Default constructor.
            </summary>
            <param name="call">SIP UA call.</param>
            <exception cref="T:System.ArgumentNullException">Is called when <b>call</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call_EventArgs.Call">
            <summary>
            Gets call.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_TcpInfo">
            <summary>
            Represents Received: header "TCP-info" value. Defined in RFC 5321. 4.4.
            </summary>
            <remarks>
            <code>
            RFC 5321 4.4.
                TCP-info        = address-literal / ( Domain FWS address-literal )
                address-literal = "[" ( IPv4-address-literal / IPv6-address-literal / General-address-literal ) "]"
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_TcpInfo.#ctor(System.Net.IPAddress,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="hostName">Host name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_TcpInfo.ToString">
            <summary>
            Returns this as string.
            </summary>
            <returns>Returns this as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_TcpInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_TcpInfo.HostName">
            <summary>
            Gets host value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_Received">
             <summary>
             Represents "Received:" header. Defined in RFC 5321 4.4.
             </summary>
             <remarks>
             <code>
             RFC 5321 4.4.
                 Time-stamp-line = "Received:" FWS Stamp CRLF
                 
                 Stamp           = From-domain By-domain Opt-info [CFWS] ";" FWS date-time
                                 ; where "date-time" is as defined in RFC 5322 [4]
                                 ; but the "obs-" forms, especially two-digit
                                 ; years, are prohibited in SMTP and MUST NOT be used.
                                 
                 From-domain     = "FROM" FWS Extended-Domain
            
                 By-domain       = CFWS "BY" FWS Extended-Domain
            
                 Extended-Domain = Domain / ( Domain FWS "(" TCP-info ")" ) / ( address-literal FWS "(" TCP-info ")" )
            
                 TCP-info        = address-literal / ( Domain FWS address-literal )
                                 ; Information derived by server from TCP connection not client EHLO.
            
                 Opt-info        = [Via] [With] [ID] [For] [Additional-Registered-Clauses]
            
                 Via             = CFWS "VIA" FWS Link
            
                 With            = CFWS "WITH" FWS Protocol
            
                 ID              = CFWS "ID" FWS ( Atom / msg-id )
                                 ; msg-id is defined in RFC 5322 [4]
            
                 For            = CFWS "FOR" FWS ( Path / Mailbox )
                 
                 Additional-Registered-Clauses  = CFWS Atom FWS String
            
                 Link           = "TCP" / Addtl-Link
            
                 Addtl-Link     = Atom
                 
                 Protocol       = "ESMTP" / "SMTP" / Attdl-Protocol
                 
                 Mailbox        = Local-part "@" ( Domain / address-literal )
             </code>
             </remarks>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Received.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="from">Host from where message was received.</param>
            <param name="by">Host name what received message.</param>
            <param name="time">Date time when message was received.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>from</b> or <b>by</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Received.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Sender: john.doe@domain.com'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Received.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.Name">
            <summary>
            Returns always "Received".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.From">
            <summary>
            Gets or sets host from where message was received.
            </summary>
            <remarks>Normally this is just EHLO/HELO host name what client reported to SMTP server.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.From_TcpInfo">
            <summary>
            Gets or sets From TCP-Info value. Value null means not specified.
            </summary>
            <remarks>This value is message sender host IP and optional dns host name.
            This value is based on server connection info, not client reported info(EHLO/HELO).
            </remarks>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.By">
            <summary>
            Gets or sets host name what received message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.By_TcpInfo">
            <summary>
            Gets or sets By TCP-Info value. Value null means not specified.
            </summary>
            <remarks>RFC defines it, but i don't see any point about that value.</remarks>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.Via">
            <summary>
            Gets or sets non-internet transport. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.With">
            <summary>
            Gets or sets receiving protocol. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.ID">
            <summary>
            Gets or sets ID value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.For">
            <summary>
            Gets or sets mailbox for who message was received. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Received.Time">
            <summary>
            Gets or sets time when message was received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WebDav.WebDav_p_Default">
            <summary>
            This class represents WebDav default property.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_p_Default.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="nameSpace">Property namespace.</param>
            <param name="name">Property name.</param>
            <param name="value">Property value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p_Default.Namespace">
            <summary>
            Gets property namespace.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p_Default.Name">
            <summary>
            Gets property name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p_Default.Value">
            <summary>
            Gets property value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Dialog_Refer">
            <summary>
            This class represents REFER dialog. Defined in RFC 3515.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Refer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Refer.OnNotify">
            <summary>
            Raises <b>Notify</b> event.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Dialog_Refer.Notify">
            <summary>
            Is raised when NOTIFY request received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartRelated">
            <summary>
            This class represents MIME multipart/related body. Defined in RFC 2387.
            </summary>
            <remarks>
             The Multipart/Related content-type provides a common mechanism for
             representing objects that are aggregates of related MIME body parts.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartRelated.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartRelated.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartAlternative">
            <summary>
            This class represents MIME multipart/alternative body. Defined in RFC 2046 5.1.4.
            </summary>
            <remarks>
            The "multipart/alternative" is intended for use when each of the body parts is an "alternative" version of the same information.
            In general, user agents that compose "multipart/alternative" entities
            must place the body parts in increasing order of preference, that is,
            with the preferred format last.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartAlternative.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartAlternative.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadLineCallback">
            <summary>
            This delegate represents callback method for BeginReadLine.
            </summary>
            <param name="e">Method data.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadToStreamCallback">
            <summary>
            This delegate represents callback method for BeginReadToEnd,BeginReadHeader,BeginReadPeriodTerminated.
            </summary>
            <param name="e">Method data.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.WriteCallback">
            <summary>
            This delegate represents callback method for BeginWrite.
            </summary>
            <param name="e">Method data.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.WriteStreamCallback">
            <summary>
            This delegate represents callback method for BeginWrite,BeginWritePeriodTerminated.
            </summary>
            <param name="e">Method data.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.StreamHelper">
            <summary>
            Stream wrapper class, provides many usefull read and write methods for stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="maxLineSize">Specifies maximum line size in bytes.</param>
            <param name="bufferRead">Specifies if source stream reads are buffered..</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadByte">
            <summary>
            Reades byte from source stream. Returns -1 if end of stream reached and no more data.
            </summary>
            <returns>Returns readed byte or -1 if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginRead(System.IO.Stream,System.Int32,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Starts reading specified amount data and storing to the specified store stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream and write to store stream.</param>
            <param name="callback">Callback to be called if asynchronous reading completes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>count</b> less than 1.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.Read(System.IO.Stream,System.Int32)">
            <summary>
            Reads specified amount of data from source stream and stores to specified store stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream and write to store stream.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>count</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Raised source stream has reached end of stream and doesn't have so much data as specified by <b>count</b> argument.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadLine(System.Byte[],System.Object,LumiSoft.Net.IO.ReadLineCallback)">
            <summary>
            Starts reading line from source stream.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called whan asynchronous operation completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadLine(System.Byte[],LumiSoft.Net.IO.SizeExceededAction,System.Object,LumiSoft.Net.IO.ReadLineCallback)">
            <summary>
            Starts reading line from source stream.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called whan asynchronous operation completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadLineInternal(System.Byte[],LumiSoft.Net.IO.SizeExceededAction,System.Object,LumiSoft.Net.IO.ReadLineCallback,System.Boolean,System.Boolean)">
            <summary>
            Starts reading line from source stream. This method does not do any checks and read locks.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called whan asynchronous operation completes.</param>
            <param name="unlockRead">Specifies if read lock is released.</param>
            <param name="log">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLine(System.Byte[])">
            <summary>
            Reads line from source stream and stores to specified buffer. This method accepts LF or CRLF lines.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <returns>Returns number of bytes stored to buffer, returns -1 if end of stream reached and no more data.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLine(System.Byte[],LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads line from source stream and stores to specified buffer. This method accepts LF or CRLF lines.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <returns>Returns number of bytes stored to buffer, returns -1 if end of stream reached and no more data.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLine(System.Text.Encoding)">
            <summary>
            Reads line from source stream.
            </summary>
            <param name="encoding">Encoding to use to decode line.</param>
            <returns>Returns readed line with specified encoding or null if end of stream reached and no more data.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>encoding</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLine(System.Text.Encoding,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads line from source stream.
            </summary>
            <param name="encoding">Encoding to use to decode line.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <returns>Returns readed line with specified encoding or null if end of stream reached and no more data.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>encoding</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLineInternal(System.Byte[],LumiSoft.Net.IO.SizeExceededAction,System.Int32@,System.Boolean)">
            <summary>
            Reads line from source stream and stores to specified buffer. This method accepts LF or CRLF lines.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="readedCount">Returns how many bytes this method actually readed form source stream.</param>
            <param name="log">Specifies if read line is logged.</param>
            <returns>Returns number of bytes stored to buffer, returns -1 if end of stream reached and no more data.</returns>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadAll(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Starts reading all source stream data.
            </summary>
            <param name="storeStream">Stream where to store data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <param name="callback">Callback to be called if asynchronous reading completes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadAll(System.IO.Stream,System.Int32)">
            <summary>
            Reads all source stream data and stores to the specified store stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <returns>Returns number of bytes written to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>maxSize</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when maximum allowed data size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadAll(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads all source stream data and stores to the specified store stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <returns>Returns number of bytes written to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>maxSize</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when maximum allowed data size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Starts reading header from source stream. Reads header data while gets blank line, what is 
            header terminator. For example this method can be used for reading mail,http,sip, ... headers.
            </summary>
            <param name="storeStream">Stream where to store data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <param name="callback">Callback to be called if asynchronous reading completes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads header from source stream and stores to the specified stream. Reads header data while 
            gets blank line, what is header terminator. For example this method can be used for reading 
            mail,http,sip, ... headers.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line or data size exceeded.</param>
            <returns>Returns number of bytes written to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>maxSize</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when maximum allowed data size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadPeriodTerminated(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Begins reading period terminated data from source stream. Reads data while gets single period on line,
            what is data terminator.
            </summary>
            <param name="storeStream">Stream where to store data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <param name="callback">Callback to be called if asynchronous reading completes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadPeriodTerminated(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads period terminated data from source stream. Reads data while gets single period on line,
            what is data terminator.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <returns>Returns number of bytes written to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>maxSize</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when maximum allowed data size has exceeded.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Raised when source stream was reached end of stream and data is not period terminated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWrite(System.Byte[],LumiSoft.Net.IO.WriteCallback)">
            <summary>
            Starts writing specified data to source stream.
            </summary>
            <param name="data">Data what to write to source stream.</param>
            <param name="callback">Callback to be callled if write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWrite(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.WriteCallback)">
            <summary>
            Starts writing specified data to source stream.
            </summary>
            <param name="data">Data what to write to source stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the source stream.</param>
            <param name="count">The number of bytes to be written to the source stream.</param>
            <param name="callback">Callback to be callled if write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteCallback(System.IAsyncResult)">
            <summary>
            Is called when BeginWrite(byte[] data,int offset,int count) has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWrite(System.IO.Stream,System.Int32,LumiSoft.Net.IO.WriteStreamCallback)">
            <summary>
            Strats writing specified amount of data from <b>stream</b> to source stream.
            </summary>
            <param name="stream">Stream which data to wite to source stream.</param>
            <param name="count">Number of bytes read from <b>stream</b> and write to source stream.</param>
            <param name="callback">Callback to be called if asynchronous write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteStreamCallback(System.IAsyncResult)">
            <summary>
            This method is called when BeginWrite has readed new data block.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteStreamCompleted(System.Exception)">
            <summary>
            Is called when BeginWrite has completed.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.Write(System.Byte[])">
            <summary>
            Writes specified buffer data to source stream.
            </summary>
            <param name="data">Data buffer.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes specified buffer data to source stream.
            </summary>
            <param name="data">Data buffer.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the source stream.</param>
            <param name="count">The number of bytes to be written to the source stream.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.Write(System.IO.Stream,System.Int32)">
            <summary>
            Reads specified amount of data for the specified stream and writes it to source stream.
            </summary>
            <param name="stream">Stream from where to read data.</param>
            <param name="count">Number of bytes to read and write.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when argument <b>count</b> is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Raised <b>stream</b> has reached end of stream and doesn't have so much data as specified by <b>count</b> argument.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWriteAll(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.IO.WriteStreamCallback)">
            <summary>
            Starts writing all <b>stream</b> data to source stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="maxSize">Maximum number of bytes to read from <b>stream</b>.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called if asynchronous write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteAllCallback(System.IAsyncResult)">
            <summary>
            This method is called when BeginWriteAll has readed new data block.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteAllCompleted(System.Exception)">
            <summary>
            Is called when BeginWriteAll has completed.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.WriteAll(System.IO.Stream)">
            <summary>
            Writes all stream data to source stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <returns>Returns number of bytes written to source stream.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.WriteAll(System.IO.Stream,System.Int32)">
            <summary>
            Writes all stream data to source stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="maxSize">Maximum muber of bytes to read from <b>stream</b> and write source stream.</param>
            <returns>Returns number of bytes written to source stream.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when <b>stream</b> stream has more data than specified by <b>maxSize</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWritePeriodTerminated(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.IO.WriteStreamCallback)">
            <summary>
            Starts writing <b>stream</b> data to source stream. Data will be period handled and terminated as needed.
            </summary>
            <param name="stream">Stream which data to write to source stream.</param>
            <param name="maxSize">Maximum muber of bytes to read from <b>stream</b> and write source stream.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called if asynchronous write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWritePeriodTerminatedReadLineCompleted(LumiSoft.Net.IO.ReadLine_EventArgs)">
            <summary>
            Is called when BeginWritePeriodTerminated stream.BeginReadLine has completed.
            </summary>
            <param name="e">Callback data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWritePeriodTerminatedCompleted(System.Exception)">
            <summary>
            Is called when asynchronous write period terminated has completed.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Reades all data from the specified stream and writes it to source stream. Period handlign and period terminator is added as required.
            </summary>
            <param name="stream">Stream which data to write to source stream.</param>
            <returns>Returns number of bytes written to source stream. Note this value differs from 
            <b>stream</b> readed bytes count because of period handling and period terminator.
            </returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when <b>stream</b> contains line with bigger line size than allowed.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when <b>stream</b> has more data than <b>maxSize</b> allows..</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.WritePeriodTerminated(System.IO.Stream,System.Int32)">
            <summary>
            Reades all data from the specified stream and writes it to source stream. Period handlign and period terminator is added as required.
            </summary>
            <param name="stream">Stream which data to write to source stream.</param>
            <param name="maxSize">Maximum muber of bytes to read from <b>stream</b> and write source stream.</param>
            <returns>Returns number of bytes written to source stream. Note this value differs from 
            <b>stream</b> readed bytes count because of period handling and period terminator.
            </returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when <b>stream</b> contains line with bigger line size than allowed.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when <b>stream</b> has more data than <b>maxSize</b> allows..</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.OnReadByte_Completed(System.IAsyncResult)">
            <summary>
            Is called when asynchronous read byte operation has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.DoReadLine_Buffered">
            <summary>
            Tries to read line from data buffer, if no line in buffer, new data buffer will be readed(buffered).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.OnReadBuffer_Completed(System.IAsyncResult)">
            <summary>
            Is called when asynchronous data buffering has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.OnReadLineCompleted(System.Exception)">
            <summary>
            Is called when read line has completed.
            </summary>
            <param name="x">Excheption what happened during line reading or null if read line was completed sucessfully.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.StreamHelper.Stream">
            <summary>
            Gets underlying stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.StreamHelper.MaximumLineSize">
            <summary>
            Gets maximum allowed line size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.StreamHelper.IsReadBuffered">
            <summary>
            Gets if source stream reads are buffered.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.StreamHelper.Logger">
            <summary>
            Gets or sets logger to use for logging.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.StreamHelper._ToStreamReader">
            <summary>
            Asynchronous to stream reader implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.#ctor(LumiSoft.Net.IO.StreamHelper,System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="streamHelper">Reference to StreamHelper.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <param name="callback">Callback what will be called if asynchronous reading compltes.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.BeginRead(System.Int32)">
            <summary>
            Starts reading specified amount of data.
            </summary>
            <param name="count">Number of bytes to read from source stream and store to store stream.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.DoRead">
            <summary>
            Processes all buffer data and gets new buffer if active buffer consumed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnRead_ReadBuffer_Completed(System.IAsyncResult)">
            <summary>
            Is called when asynchrounous data buffer block reading has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnRead_Completed(System.Exception)">
            <summary>
            Is called when ReadHeader has completed.
            </summary>
            <param name="x">Exception happened during read or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.BeginReadPeriodTerminated">
            <summary>
            Starts reading period terminated data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnReadPeriodTerminated_ReadLine_Completed(LumiSoft.Net.IO.ReadLine_EventArgs)">
            <summary>
            Is called when asynchrounous line reading has completed.
            </summary>
            <param name="e">Callback data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.ReadPeriodTerminatedCompleted(System.Exception)">
            <summary>
            Is called when ReadPeriodTerminated has completd.
            </summary>
            <param name="x">Exeption happened or null if operation completed successfuly.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.BeginReadHeader">
            <summary>
            Starts reading header data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnReadHeader_ReadLine_Completed(LumiSoft.Net.IO.ReadLine_EventArgs)">
            <summary>
            Is called when asynchrounous line reading has completed.
            </summary>
            <param name="e">Callback data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.ReadHeaderCompleted(System.Exception)">
            <summary>
            Is called when ReadHeader has completed.
            </summary>
            <param name="x">Exception happened during read or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.BeginReadAll">
            <summary>
            Starts reading all source stream data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.DoReadAll">
            <summary>
            Processes all buffer data and gets new buffer if active buffer consumed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnReadAll_ReadBuffer_Completed(System.IAsyncResult)">
            <summary>
            Is called when asynchrounous data buffer block reading has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.ReadAllCompleted(System.Exception)">
            <summary>
            Is called when ReadToEnd has completed.
            </summary>
            <param name="x">Exception happened during read or null if operation was successfull.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes">
            <summary>
            This class holds SIP respnse codes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x100_Trying">
            <summary>
            This response indicates that the request has been received by the
            next-hop server and that some unspecified action is being taken on
            behalf of this call (for example, a database is being consulted).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x180_Ringing">
            <summary>
            The UA receiving the INVITE is trying to alert the user.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x181_Call_Forwarded">
            <summary>
            A server MAY use this status code to indicate that the call is being
            forwarded to a different set of destinations.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x182_Queued">
            <summary>
            The called party is temporarily unavailable, but the server has
            decided to queue the call rather than reject it.  When the callee
            becomes available, it will return the appropriate final status response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x183_Session_Progress">
            <summary>
            The 183 (Session Progress) response is used to convey information
            about the progress of the call that is not otherwise classified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x200_Ok">
            <summary>
            The request has succeeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x202_Ok">
            <summary>
            The request has accepted. Defined in rfc 3265.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x400_Bad_Request">
            <summary>
            The request could not be understood due to malformed syntax.  The
            Reason-Phrase SHOULD identify the syntax problem in more detail, for
            example, "Missing Call-ID header field".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x401_Unauthorized">
            <summary>
            The request requires user authentication.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x403_Forbidden">
            <summary>
            The server understood the request, but is refusing to fulfill it.
            Authorization will not help, and the request SHOULD NOT be repeated.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x404_Not_Found">
            <summary>
            The server has definitive information that the user does not exist at
            the domain specified in the Request-URI.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x405_Method_Not_Allowed">
            <summary>
            The method specified in the Request-Line is understood, but not
            allowed for the address identified by the Request-URI.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x406_Not_Acceptable">
            <summary>
            The resource identified by the request is only capable of generating
            response entities that have content characteristics not acceptable
            according to the Accept header field sent in the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x407_Proxy_Authentication_Required">
            <summary>
            This code is similar to 401 (Unauthorized), but indicates that the
            client MUST first authenticate itself with the proxy.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x408_Request_Timeout">
            <summary>
            The server could not produce a response within a suitable amount of
            time, for example, if it could not determine the location of the user in time.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x410_Gone">
            <summary>
            The requested resource is no longer available at the server and no
            forwarding address is known.  This condition is expected to be
            considered permanent.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x412_Conditional_Request_Failed">
            <summary>
            Is used to indicate that the precondition given for the request has failed. Defined in rfc 3903.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x413_Request_Entity_Too_Large">
            <summary>
            The server is refusing to process a request because the request
            entity-body is larger than the server is willing or able to process.
            The server MAY close the connection to prevent the client from
            continuing the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x414_RequestURI_Too_Long">
            <summary>
            The server is refusing to service the request because the Request-URI
            is longer than the server is willing to interpret.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x415_Unsupported_Media_Type">
            <summary>
            The server is refusing to service the request because the message
            body of the request is in a format not supported by the server for
            the requested method.  The server MUST return a list of acceptable
            formats using the Accept, Accept-Encoding, or Accept-Language header
            field, depending on the specific problem with the content.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x416_Unsupported_URI_Scheme">
            <summary>
            The server cannot process the request because the scheme of the URI
            in the Request-URI is unknown to the server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x417_Unknown_Resource_Priority">
            <summary>
            TODO: add description. Defined in rfc 4412.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x420_Bad_Extension">
            <summary>
            The server did not understand the protocol extension specified in a
            Proxy-Require or Require header field.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x421_Extension_Required">
            <summary>
            The UAS needs a particular extension to process the request, but this
            extension is not listed in a Supported header field in the request.
            Responses with this status code MUST contain a Require header field
            listing the required extensions.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x422_Session_Interval_Too_Small">
            <summary>
            It is generated by a UAS or proxy when a request contains a Session-Expires header field 
            with a duration below the minimum timer for the server. The 422 response MUST contain a Min-SE
            header field with the minimum timer for that server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x423_Interval_Too_Brief">
            <summary>
            The server is rejecting the request because the expiration time of
            the resource refreshed by the request is too short.  This response
            can be used by a registrar to reject a registration whose Contact
            header field expiration time was too small.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x428_Use_Identity_Header">
            <summary>
            It is used when the verifier receives a message with an Identity signature that does not 
            correspond to the digest-string calculated by the verifier. Defined in rfc 4474.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x429_Provide_Referrer_Identity">
            <summary>
            TODO: add description. Defined in rfc 3892.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x436_Bad_Identity_Info">
            <summary>
            It is used when the Identity-Info header contains a URI that cannot be dereferenced by the 
            verifier (either the URI scheme is unsupported by the verifier, or the resource designated by
            the URI is otherwise unavailable). Defined in rfc 4474.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x437_Unsupported_Certificate">
            <summary>
            It is used when the verifier cannot validate the certificate referenced by the URI of the 
            Identity-Info header, because, for example, the certificate is self-signed, or signed by a
            root certificate authority for whom the verifier does not possess a root certificate. 
            Defined in rfc 4474.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x438_Invalid_Identity_Header">
            <summary>
            It is used when the verifier receives a message with an Identity signature that does not 
            correspond to the digest-string calculated by the verifier. Defined in rfc 4474.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x480_Temporarily_Unavailable">
            <summary>
            The callee's end system was contacted successfully but the callee is
            currently unavailable (for example, is not logged in, logged in but
            in a state that precludes communication with the callee, or has
            activated the "do not disturb" feature).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x481_Call_Transaction_Does_Not_Exist">
            <summary>
            This status indicates that the UAS received a request that does not
            match any existing dialog or transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x482_Loop_Detected">
            <summary>
            The server has detected a loop.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x483_Too_Many_Hops">
            <summary>
            The server received a request that contains a Max-Forwards.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x484_Address_Incomplete">
            <summary>
            The server received a request with a Request-URI that was incomplete.
            Additional information SHOULD be provided in the reason phrase.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x485_Ambiguous">
            <summary>
            The Request-URI was ambiguous.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x486_Busy_Here">
            <summary>
            The callee's end system was contacted successfully, but the callee is
            currently not willing or able to take additional calls at this end
            system. The response MAY indicate a better time to call in the
            Retry-After header field.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x487_Request_Terminated">
            <summary>
            The request was terminated by a BYE or CANCEL request. This response
            is never returned for a CANCEL request itself.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x488_Not_Acceptable_Here">
            <summary>
            The response has the same meaning as 606 (Not Acceptable), but only
            applies to the specific resource addressed by the Request-URI and the
            request may succeed elsewhere.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x489_Bad_Event">
            <summary>
            Is used to indicate that the server did not understand the event package specified 
            in a "Event" header field. Defined in rfc 3265.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x491_Request_Pending">
            <summary>
            The request was received by a UAS that had a pending request within
            the same dialog.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x493_Undecipherable">
            <summary>
            The request was received by a UAS that contained an encrypted MIME
            body for which the recipient does not possess or will not provide an
            appropriate decryption key.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x494_Security_Agreement_Required">
            <summary>
            TODO: add description. Defined in rfc 3329.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x500_Server_Internal_Error">
            <summary>
            The server encountered an unexpected condition that prevented it from
            fulfilling the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x501_Not_Implemented">
            <summary>
            The server does not support the functionality required to fulfill the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x502_Bad_Gateway">
            <summary>
            The server, while acting as a gateway or proxy, received an invalid
            response from the downstream server it accessed in attempting to
            fulfill the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x503_Service_Unavailable">
            <summary>
            The server is temporarily unable to process the request due to a
            temporary overloading or maintenance of the server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x504_Timeout">
            <summary>
            The server did not receive a timely response from an external server
            it accessed in attempting to process the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x504_Version_Not_Supported">
            <summary>
            The server does not support, or refuses to support, the SIP protocol
            version that was used in the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x513_Message_Too_Large">
            <summary>
            The server was unable to process the request since the message length
            exceeded its capabilities.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x580_Precondition_Failure">
            <summary>
            When a UAS, acting as an answerer, cannot or is not willing to meet the preconditions 
            in the offer. Defined in rfc 3312.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x600_Busy_Everywhere">
            <summary>
            The callee's end system was contacted successfully but the callee is
            busy and does not wish to take the call at this time.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x603_Decline">
            <summary>
            The callee's machine was successfully contacted but the user
            explicitly does not wish to or cannot participate.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x604_Does_Not_Exist_Anywhere">
            <summary>
            The server has authoritative information that the user indicated in
            the Request-URI does not exist anywhere
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x606_Not_Acceptable">
            <summary>
            The user's agent was contacted successfully but some aspects of the
            session description such as the requested media, bandwidth, or
            addressing style were not acceptable.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Transaction">
            <summary>
            This is base class for SIP client and server transaction.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Owner SIP stack.</param>
            <param name="flow">Transaction data flow.</param>
            <param name="request">SIP request that transaction will handle.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b>,<b>flow</b> or <b>request</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.Cancel">
            <summary>
            Cancels current transaction.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.SetState(LumiSoft.Net.SIP.Stack.SIP_TransactionState)">
            <summary>
            Changes transaction state.
            </summary>
            <param name="state">New transaction state.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.AddResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Adds specified response to transaction responses collection.
            </summary>
            <param name="response">SIP response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnStateChanged">
            <summary>
            Raises event <b>StateChanged</b>.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnDisposed">
            <summary>
            Raises event <b>Disposed</b>.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnTimedOut">
            <summary>
            Raises TimedOut event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnTransportError(System.Exception)">
            <summary>
            Raises TimedOut event.
            </summary>
            <param name="exception">Transport exception.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnTransactionError(System.String)">
            <summary>
            Raises TransactionError event.
            </summary>
            <param name="errorText">Text describing error.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the dialog.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.IsDisposed">
            <summary>
            Gets if transaction is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.State">
            <summary>
            Gets current transaction state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Stack">
            <summary>
            Gets owner SIP stack.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Flow">
            <summary>
            Gets transaction data flow.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Request">
            <summary>
            Gets SIP request what caused this transaction creation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Method">
            <summary>
            Gets request method that transaction handles.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.ID">
            <summary>
            Gets transaction ID (Via: branch parameter value).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.CreateTime">
            <summary>
            Gets time when this transaction was created.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Responses">
            <summary>
            Gets transaction processed responses.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.LastProvisionalResponse">
            <summary>
            Gets transaction final(1xx) response from responses collection. Returns null if no provisional responses.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.FinalResponse">
            <summary>
            Gets transaction final(2xx - 699) response from responses collection. Returns null if no final responses.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.HasProvisionalResponse">
            <summary>
            Gets if transaction has any provisional(1xx) in responses collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Dialog">
            <summary>
            Gets transaction related SIP dialog. Returns null if no dialog available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Key">
            <summary>
            Gets transaction indexing key.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.StateChanged">
            <summary>
            Is raised when transaction state has changed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.Disposed">
            <summary>
            Is raised when transaction is disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.TimedOut">
            <summary>
            Is raised if transaction is timed out. 
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.TransportError">
            <summary>
            Is raised when there is transport error. 
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.TransactionError">
            <summary>
            Is raised when there is transaction error. For example this is raised when server transaction never
            gets ACK.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode">
            <summary>
            Specifies SIP proxy mode.
            <example>
            All flags may be combined, except Stateless,Statefull,B2BUA.
            For example: (Stateless | Statefull) not allowed, but (Registrar | Presence | Statefull) is allowed.
            </example>
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.Registrar">
            <summary>
            Proxy implements SIP registrar.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.Presence">
            <summary>
            Proxy implements SIP presence server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.Stateless">
            <summary>
            Proxy runs in stateless mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.Statefull">
            <summary>
            Proxy runs in statefull mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.B2BUA">
            <summary>
            Proxy runs in B2BUA(back to back user agent) mode.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_To">
            <summary>
            Implements SIP "To" value. Defined in RFC 3261.
            The To header field specifies the logical recipient of the request.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                To        = ( name-addr / addr-spec ) *( SEMI to-param )
                to-param  = tag-param / generic-param
                tag-param = "tag" EQUAL token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">To: header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.#ctor(LumiSoft.Net.SIP.Message.SIP_t_NameAddress)">
            <summary>
            Default constructor.
            </summary>
            <param name="address">To address.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.Parse(System.String)">
            <summary>
            Parses "To" from specified value.
            </summary>
            <param name="value">SIP "To" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "To" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.ToStringValue">
            <summary>
            Converts this to valid "To" value.
            </summary>
            <returns>Returns "To" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_To.Address">
            <summary>
            Gets to address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_To.Tag">
            <summary>
            Gets or sets tag parameter value.
            The "tag" parameter serves as a general mechanism for dialog identification.
            Value null means that 'tag' paramter doesn't exist.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IPBindInfo">
            <summary>
            Holds IP bind info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,LumiSoft.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,System.Net.IPAddress,System.Int32,LumiSoft.Net.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.#ctor(System.String,LumiSoft.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32,LumiSoft.Net.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.IPBindInfo.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.HostName">
            <summary>
            Gets host name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Protocol">
            <summary>
            Gets protocol.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.EndPoint">
            <summary>
            Gets IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Port">
            <summary>
            Gets port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.SslMode">
            <summary>
            Gets SSL mode.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.SSL_Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IPBindInfo.Tag">
            <summary>
            Gets or sets user data. This is used internally don't use it !!!.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ForkingMode">
            <summary>
            This enum specifies SIP proxy server 'forking' mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ForkingMode.None">
            <summary>
            No forking. The contact with highest q value is used.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ForkingMode.Parallel">
            <summary>
            All contacts are processed parallel at same time.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ForkingMode.Sequential">
            <summary>
            In a sequential search, a proxy server attempts each contact address in sequence, 
            proceeding to the next one only after the previous has generated a final response. 
            Contacts are processed from highest q value to lower.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WellKnownPorts">
            <summary>
            This class provides well known TCP/UDP service ports.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Data">
            <summary>
            FTP - data port.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Control">
            <summary>
            FTP - control (command) port.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.SMTP">
            <summary>
            SMTP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.DNS">
            <summary>
            DNS protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.HTTP">
            <summary>
            HTTP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.POP3">
            <summary>
            POP3 protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.NNTP">
            <summary>
            NNTP (Network News Transfer Protocol)  protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.NTP">
            <summary>
            NTP (Network Time Protocol) protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.IMAP4">
            <summary>
            IMAP4 protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.HTTPS">
            <summary>
            HTTPS protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.SMTP_SSL">
            <summary>
            SMTP over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.FTP_Control_SSL">
            <summary>
            FTP over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.IMAP4_SSL">
            <summary>
            IMAP4 over SSL protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WellKnownPorts.POP3_SSL">
            <summary>
            POP3 over SSL protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.PhoneNumber">
            <summary>
            vCard phone number implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumber.#ctor(LumiSoft.Net.Mime.vCard.Item,LumiSoft.Net.Mime.vCard.PhoneNumberType_enum,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="item">Owner vCard item.</param>
            <param name="type">Phone number type. Note: This value can be flagged value !</param>
            <param name="number">Phone number.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumber.Changed">
            <summary>
            This method is called when some property has changed, wee need to update underlaying vCard item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumber.Parse(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Parses phone from vCard TEL structure string.
            </summary>
            <param name="item">vCard TEL item.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumber.PhoneTypeToString(LumiSoft.Net.Mime.vCard.PhoneNumberType_enum)">
            <summary>
            Converts PhoneNumberType_enum to vCard item parameters string.
            </summary>
            <param name="type">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.PhoneNumber.Item">
            <summary>
            Gets underlaying vCrad item.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.PhoneNumber.NumberType">
            <summary>
            Gets or sets phone number type. Note: This property can be flagged value !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.PhoneNumber.Number">
            <summary>
            Gets or sets phone number.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeUtils">
            <summary>
            Provides mime related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseDate(System.String)">
            <summary>
            Parses rfc 2822 datetime.
            </summary>
            <param name="date">Date string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.DateTimeToRfc2822(System.DateTime)">
            <summary>
            Converts date to rfc 2822 date time string.
            </summary>
            <param name="dateTime">Date time value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaders(System.IO.Stream)">
            <summary>
            Parses headers from message or mime entry.
            </summary>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns>Returns header lines.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderField(System.String,System.IO.Stream)">
            <summary>
            Parse header specified header field value.
            
            Use this method only if you need to get only one header field, otherwise use
            MimeParser.ParseHeaderField(string fieldName,string headers).
            This avoid parsing headers multiple times.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderField(System.String,System.String)">
            <summary>
            Parse header specified header field value.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="headers">Full headers string. Use MimeParser.ParseHeaders() to get this value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderFiledParameter(System.String,System.String,System.String)">
            <summary>
            Parses header field parameter value. 
            For example: CONTENT-TYPE: application\octet-stream; name="yourFileName.xxx",
            fieldName="CONTENT-TYPE:" and subFieldName="name".
            </summary>
            <param name="fieldName">Main header field name.</param>
            <param name="parameterName">Header field's parameter name.</param>
            <param name="headers">Full headrs string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseMediaType(System.String)">
            <summary>
            Parses MediaType_enum from <b>Content-Type:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Type:</b> header field value. This value can be null, then MediaType_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.MediaTypeToString(LumiSoft.Net.Mime.MediaType_enum)">
            <summary>
            Converts MediaType_enum to string. NOTE: Returns null for MediaType_enum.NotSpecified.
            </summary>
            <param name="mediaType">MediaType_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseContentTransferEncoding(System.String)">
            <summary>
            Parses ContentTransferEncoding_enum from <b>Content-Transfer-Encoding:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Transfer-Encoding:</b> header field value. This value can be null, then ContentTransferEncoding_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ContentTransferEncodingToString(LumiSoft.Net.Mime.ContentTransferEncoding_enum)">
            <summary>
            Converts ContentTransferEncoding_enum to string. NOTE: Returns null for ContentTransferEncoding_enum.NotSpecified.
            </summary>
            <param name="encoding">ContentTransferEncoding_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseContentDisposition(System.String)">
            <summary>
            Parses ContentDisposition_enum from <b>Content-Disposition:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Disposition:</b> header field value. This value can be null, then ContentDisposition_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ContentDispositionToString(LumiSoft.Net.Mime.ContentDisposition_enum)">
            <summary>
            Converts ContentDisposition_enum to string. NOTE: Returns null for ContentDisposition_enum.NotSpecified.
            </summary>
            <param name="disposition">ContentDisposition_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.EncodeWord(System.String)">
            <summary>
            Encodes specified text as "encoded-word" if encode is required. For more information see RFC 2047.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded word.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.DecodeWords(System.String)">
            <summary>
            Decodes "encoded-word"'s from the specified text. For more information see RFC 2047.
            </summary>
            <param name="text">Text to decode.</param>
            <returns>Returns decoded text.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.EncodeHeaderField(System.String)">
            <summary>
            Encodes header field with quoted-printable encoding, if value contains ANSI or UNICODE chars.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.CreateMessageID">
            <summary>
            Creates Rfc 2822 3.6.4 message-id. Syntax: '&lt;' id-left '@' id-right '&gt;'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.FoldData(System.String)">
            <summary>
            Folds long data line to folded lines.
            </summary>
            <param name="data">Data to fold.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs">
            <summary>
            Provides data for DeleteFolderACL event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="folderName">Folder name which ACL to delete.</param>
            <param name="userName">User name which ACL to delete.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.Folder">
            <summary>
            Gets folder name which ACL to delete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.UserName">
            <summary>
            Gets user name which ACL to delete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_Session">
            <summary>
            FTP Session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServerSession">
            <summary>
            This is base class for SocketServer sessions.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.IPBindInfo,LumiSoft.Net.SocketServer)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.Kill">
            <summary>
            Kills session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.OnSessionTimeout">
            <summary>
            Times session out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.SetUserName(System.String)">
            <summary>
            Sets property UserName value.
            </summary>
            <param name="userName">User name.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionID">
            <summary>
            Gets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionStartTime">
            <summary>
            Gets session start time.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Authenticated">
            <summary>
            Gets if session is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.UserName">
            <summary>
            Gets authenticated user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.ExpectedTimeout">
            <summary>
            Gets how many seconds has left before timout is triggered.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionLastDataTime">
            <summary>
            Gets last data activity time.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.LocalEndPoint">
            <summary>
            Gets EndPoint which accepted conection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.RemoteEndPoint">
            <summary>
            Gets connected Host(client) EndPoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Tag">
            <summary>
            Gets or sets custom user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionActiveLog">
            <summary>
            Gets log entries that are currently in log buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.ReadedCount">
            <summary>
            Gets how many bytes are readed through this session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.WrittenCount">
            <summary>
            Gets how many bytes are written through this session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.IsSecureConnection">
            <summary>
            Gets if the connection is an SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Socket">
            <summary>
            Gets access to SocketEx.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.BindInfo">
            <summary>
            Gets access to BindInfo what accepted socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.IPBindInfo,LumiSoft.Net.FTP.Server.FTP_Server)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.StartSession">
            <summary>
            Starts session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.EndSession">
            <summary>
            Ends session, closes socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.Kill">
            <summary>
            Kill this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnSessionTimeout">
            <summary>
            Is called by server when session has timed out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnError(System.Exception)">
            <summary>
            Is called when error occures.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.BeginRecieveCmd">
            <summary>
            Starts recieveing command.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.EndRecieveCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called if command is recieved.
            </summary>
            <param name="result"></param>
            <param name="exception"></param>
            <param name="count"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.SwitchCommand(System.String)">
            <summary>
            Parses and executes POP3 commmand.
            </summary>
            <param name="commandTxt">FTP command text.</param>
            <returns>Returns true,if session must be terminated.</returns>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Session.PassiveMode">
            <summary>
            Gets if sessions is in passive mode.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.QTYPE">
            <summary>
            Query type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.A">
            <summary>
            IPv4 host address
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.NS">
            <summary>
            An authoritative name server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.CNAME">
            <summary>
            The canonical name for an alias.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.SOA">
            <summary>
            Marks the start of a zone of authority.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.PTR">
            <summary>
            A domain name pointer.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.HINFO">
            <summary>
            Host information.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.MX">
            <summary>
            Mail exchange.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.TXT">
            <summary>
            Text strings.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.AAAA">
            <summary>
            IPv6 host address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.SRV">
            <summary>
            SRV record specifies the location of services.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.NAPTR">
            <summary>
            NAPTR(Naming Authority Pointer) record.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.ANY">
            <summary>
            All records what server returns.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_Acl">
            <summary>
            IMAP ACL entry. Defined in RFC 2086.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Acl.#ctor(System.String,LumiSoft.Net.IMAP.IMAP_ACL_Flags)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Authentication identifier name. Normally this is user or group name.</param>
            <param name="rights">Rights associated with this ACL entry.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Acl.Parse(System.String)">
            <summary>
            Parses ACL entry from IMAP ACL response string.
            </summary>
            <param name="aclResponseString">IMAP ACL response string.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Acl.Name">
            <summary>
            Gets authentication identifier name. Normally this is user or group name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Acl.Rights">
            <summary>
            Gets the rights associated with this ACL entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Source_Remote">
            <summary>
            This class represents RTP remote source what we receive.
            </summary>
            <remarks>Source indicates an entity sending packets, either RTP and/or RTCP.
            Sources what send RTP packets are called "active", only RTCP sending ones are "passive".
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Remote.#ctor(LumiSoft.Net.RTP.RTP_Session,System.UInt32)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner RTP session.</param>
            <param name="ssrc">Synchronization source ID.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Remote.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Remote.SetParticipant(LumiSoft.Net.RTP.RTP_Participant_Remote)">
            <summary>
            Sets source owner participant.
            </summary>
            <param name="participant">RTP participant.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>participant</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Remote.OnRtpPacketReceived(LumiSoft.Net.RTP.RTP_Packet,System.Int32)">
            <summary>
            Is called when RTP session receives new RTP packet.
            </summary>
            <param name="packet">RTP packet.</param>
            <param name="size">Packet size in bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>packet</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Remote.OnSenderReport(LumiSoft.Net.RTP.RTCP_Report_Sender)">
            <summary>
            This method is called when this source got sender report.
            </summary>
            <param name="report">Sender report.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>report</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Remote.OnAppPacket(LumiSoft.Net.RTP.RTCP_Packet_APP)">
            <summary>
            This method is called when this source got RTCP APP apcket.
            </summary>
            <param name="packet">RTCP APP packet.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>packet</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Source_Remote.OnApplicationPacket(LumiSoft.Net.RTP.RTCP_Packet_APP)">
            <summary>
            Raises <b>ApplicationPacket</b> event.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>packet</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source_Remote.IsLocal">
            <summary>
            Returns false.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source_Remote.Participant">
            <summary>
            Gets remote participant. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source_Remote.Stream">
            <summary>
            Gets the stream we receive. Value null means that source is passive and doesn't send any RTP data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Source_Remote.CName">
            <summary>
            Gets source CNAME. Value null means that source not binded to participant.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Source_Remote.ApplicationPacket">
            <summary>
            Is raised when source sends RTCP APP packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_ReceiveStream">
            <summary>
            Implements RTP session receive stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.#ctor(LumiSoft.Net.RTP.RTP_Session,LumiSoft.Net.RTP.RTP_Source,System.UInt16)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner RTP session.</param>
            <param name="ssrc">Onwer synchronization source.</param>
            <param name="packetSeqNo">RTP packet <b>SeqNo</b> value.</param>
            <exception cref="T:System.ArgumentNullException">Is riased when <b>session</b> or <b>ssrc</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.Process(LumiSoft.Net.RTP.RTP_Packet,System.Int32)">
            <summary>
            Processes specified RTP packet thorugh this stream.
            </summary>
            <param name="packet">RTP packet.</param>
            <param name="size">RTP packet size in bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>packet</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.InitSeq(System.UInt16)">
            <summary>
            Initializes new sequence number.
            </summary>
            <param name="seqNo">Sequence number.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.UpdateSeq(System.UInt16)">
            <summary>
            Updates sequence number.
            </summary>
            <param name="seqNo">RTP packet sequence number.</param>
            <returns>Returns true if sequence is valid, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.SetSR(LumiSoft.Net.RTP.RTCP_Report_Sender)">
            <summary>
            Sets property <b>LastSR</b> value.
            </summary>
            <param name="report">Sender report.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>report</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.CreateReceiverReport">
            <summary>
            Creates receiver report.
            </summary>
            <returns>Returns created receiver report.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.OnClosed">
            <summary>
            Raises <b>Closed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.OnTimeout">
            <summary>
            Raised <b>Timeout</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.OnSenderReport">
            <summary>
            Raises <b>SenderReport</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStream.OnPacketReceived(LumiSoft.Net.RTP.RTP_Packet)">
            <summary>
            Raises <b>PacketReceived</b> event.
            </summary>
            <param name="packet">RTP packet.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.Session">
            <summary>
            Gets stream owner RTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.SSRC">
            <summary>
            Gets stream owner synchronization source.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.Participant">
            <summary>
            Gets remote participant who is owner of this stream. Returns null if this stream is not yet received RTCP SDES.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.SeqNoWrapCount">
            <summary>
            Gets number of times <b>SeqNo</b> has wrapped around.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.FirstSeqNo">
            <summary>
            Gets first sequence number what this stream got.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.MaxSeqNo">
            <summary>
            Gets maximum sequnce number that stream has got.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.PacketsReceived">
            <summary>
            Gets how many RTP packets has received by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.PacketsMisorder">
            <summary>
            Gets how many RTP misorder packets has received by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.PacketsLost">
            <summary>
            Gets how many RTP packets has lost during transmission.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.BytesReceived">
            <summary>
            Gets how many RTP data has received by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.Jitter">
            <summary>
            Gets inter arrival jitter.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.DelaySinceLastSR">
            <summary>
            Gets delay between las SR(sender report) and now in milliseconds. Returns -1 if no SR received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.LastSRTime">
            <summary>
            Gets time when last SR(sender report) was received. Returns <b>DateTime.MinValue</b> if no SR received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStream.LastSR">
            <summary>
            Gets last received RTCP SR(sender report). Value null means no  SR received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_ReceiveStream.Closed">
            <summary>
            Is raised when stream is closed by remote party (remote party sent BYE).
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_ReceiveStream.Timeout">
            <summary>
            Is raised when receive stream has timed out by RTP session.
            </summary>
            <remarks>After <b>Timeout</b> event stream will be disposed and has no longer accessible.</remarks>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_ReceiveStream.SenderReport">
            <summary>
            Is raised when steam gets new sender report from remote party.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_ReceiveStream.PacketReceived">
            <summary>
            Is raised when new RTP packet received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.FTP_ListItem">
            <summary>
            This class holds single file or directory in the FTP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.FTP_ListItem.#ctor(System.String,System.Int64,System.DateTime,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Directory or file name.</param>
            <param name="size">File size in bytes, zero for directory.</param>
            <param name="modified">Directory or file last modification time.</param>
            <param name="isDir">Specifies if list item is directory or file.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.IsDir">
            <summary>
            Gets if current item is directory.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.IsFile">
            <summary>
            Gets if current item is file.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.Size">
            <summary>
            Gets file size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.FTP_ListItem.Modified">
            <summary>
            Gets last time file or direcory was modified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOutDevice">
            <summary>
            This class represents audio oputput device(speakers,head-phones, ....).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOutDevice.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="index">Device index in devices.</param>
            <param name="name">Device name.</param>
            <param name="channels">Number of audio channels.</param>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOutDevice.Name">
            <summary>
            Gets device name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOutDevice.Channels">
            <summary>
            Gets number of output channels(mono,stereo,...) supported.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOutDevice.Index">
            <summary>
            Gets device index in devices.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Image">
            <summary>
            This class represents MIME image/xxx bodies. Defined in RFC 2046 4.2.
            </summary>
            <remarks>
            A media type of "image" indicates that the body contains an image.
            The subtype names the specific image format.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Image.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Image.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_MailboxList">
            <summary>
            This class represents <b>mailbox-list</b>. Defined in RFC 5322 3.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.Insert(System.Int32,LumiSoft.Net.Mail.Mail_t_Mailbox)">
            <summary>
            Inserts a address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="value">Address to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.Add(LumiSoft.Net.Mail.Mail_t_Mailbox)">
            <summary>
            Adds specified address to the end of the collection.
            </summary>
            <param name="value">Address to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.Remove(LumiSoft.Net.Mail.Mail_t_Mailbox)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="value">Address to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.ToArray">
            <summary>
            Copies addresses to new array.
            </summary>
            <returns>Returns addresses array.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.ToString">
            <summary>
            Returns address-list as string.
            </summary>
            <returns>Returns address-list as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.AcceptChanges">
            <summary>
            Resets IsModified property to false.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_MailboxList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_MailboxList.IsModified">
            <summary>
            Gets if list has modified since it was loaded.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_MailboxList.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_MailboxList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_AlertParam">
            <summary>
            Implements SIP "alert-param" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                alert-param = LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.Parse(System.String)">
            <summary>
            Parses "alert-param" from specified value.
            </summary>
            <param name="value">SIP "alert-param" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "alert-param" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.ToStringValue">
            <summary>
            Converts this to valid "alert-param" value.
            </summary>
            <returns>Returns "alert-param" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.Uri">
            <summary>
            Gets or sets uri value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_ParseException">
            <summary>
            The exception that is thrown when a SIP message parsing fails.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">The message what describes the error.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Session">
            <summary>
            POP3 Session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.IPBindInfo,LumiSoft.Net.POP3.Server.POP3_Server)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.StartSession">
            <summary>
            Starts session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.EndSession">
            <summary>
            Ends session, closes socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.Kill">
            <summary>
            Kill this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnSessionTimeout">
            <summary>
            Is called by server when session has timed out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnError(System.Exception)">
            <summary>
            Is called when error occures.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.BeginRecieveCmd">
            <summary>
            Starts recieveing command.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.EndRecieveCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called if command is recieved.
            </summary>
            <param name="result"></param>
            <param name="exception"></param>
            <param name="count"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.SwitchCommand(System.String)">
            <summary>
            Parses and executes POP3 commmand.
            </summary>
            <param name="POP3_commandTxt">POP3 command text.</param>
            <returns>Returns true,if session must be terminated.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.EndSend(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when asynchronous send completes.
            </summary>
            <param name="result">If true, then send was successfull.</param>
            <param name="count">Count sended.</param>
            <param name="exception">Exception happend on send. NOTE: available only is result=false.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.AuthUserEventHandler">
            <summary>
            Represents the method that will handle the AuthUser event for POP3_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A AuthUser_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.GetMessagesInfoHandler">
            <summary>
            Represents the method that will handle the GetMessgesList event for POP3_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A GetMessagesInfo_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.MessageHandler">
            <summary>
            Represents the method that will handle the GetMessage,DeleteMessage,GetTopLines event for POP3_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A GetMessage_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.GetMessageStreamHandler">
            <summary>
            Represents the method that will handle the GetMessageStream event for POP3_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Server">
            <summary>
            POP3 server component.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.#ctor">
            <summary>
            Defalut constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.IPBindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.IsUserLoggedIn(System.String)">
            <summary>
            Checks if user is logged in.
            </summary>
            <param name="userName">User name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnValidate_IpAddress(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Raises event ValidateIP event.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
            <returns>Returns true if connection allowed.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnAuthUser(LumiSoft.Net.POP3.Server.POP3_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Authenticates user.
            </summary>
            <param name="session">Reference to current pop3 session.</param>
            <param name="userName">User name.</param>
            <param name="passwData"></param>
            <param name="data"></param>
            <param name="authType"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnGetMessagesInfo(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_MessageCollection)">
            <summary>
            Gest pop3 messages info.
            </summary>
            <param name="session"></param>
            <param name="messages"></param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnGetMessageStream(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message)">
            <summary>
            Raises event 'GetMessageStream'.
            </summary>
            <param name="session">Reference to POP3 session.</param>
            <param name="messageInfo">Message info what message stream to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnDeleteMessage(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message)">
            <summary>
            Raises delete message event.
            </summary>
            <param name="session"></param>
            <param name="message">Message which to delete.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnGetTopLines(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message,System.Int32)">
            <summary>
            Raises event GetTopLines.
            </summary>
            <param name="session"></param>
            <param name="message">Message wich top lines to get.</param>
            <param name="nLines">Header + number of body lines to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnSessionEnd(System.Object)">
            <summary>
            Raises SessionEnd event.
            </summary>
            <param name="session">Session which is ended.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnSessionResetted(System.Object)">
            <summary>
            Raises SessionResetted event.
            </summary>
            <param name="session">Session which is resetted.</param>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.ValidateIPAddress">
            <summary>
            Occurs when new computer connected to POP3 server.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.AuthUser">
            <summary>
            Occurs when connected user tryes to authenticate.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.SessionEnd">
            <summary>
            Occurs user session ends. This is place for clean up.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.SessionResetted">
            <summary>
            Occurs user session resetted. Messages marked for deletion are unmarked.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.GetMessgesList">
            <summary>
            Occurs when server needs to know logged in user's maibox messages.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.GetMessageStream">
            <summary>
            Occurs when user requests to get specified message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.DeleteMessage">
            <summary>
            Occurs when user requests delete message.
            </summary>		
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.GetTopLines">
            <summary>
            Occurs when user requests specified message TOP lines.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.SessionLog">
            <summary>
            Occurs when POP3 session has finished and session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.SupportedAuthentications">
            <summary>
            Gets or sets server supported authentication types.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.GreetingText">
            <summary>
            Gets or sets server greeting text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed conncurent connections from 1 IP address. Value 0 means unlimited connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderField">
            <summary>
            Mime entity header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderField.#ctor">
            <summary>
            Default construtor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderField.#ctor(System.String,System.String)">
            <summary>
            Creates new header field with specified name and value.
            </summary>
            <param name="name">Header field name. Header field name must end with colon(:) and may contain US-ASCII character values between 33 and 126.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.Name">
            <summary>
            Gets or sets header field name. Header field name must end with colon(:) and may contain US-ASCII character values between 33 and 126.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.EncodedValue">
            <summary>
            Gets header field encoded value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.LogEntryType">
            <summary>
            Specifies log entry type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Read">
            <summary>
            Read entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Write">
            <summary>
            Write entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Text">
            <summary>
            Text entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Exception">
            <summary>
            Exception entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.LogEntry">
            <summary>
            Implements log entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Int64,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="size">Specified how much data was readed or written.</param>
            <param name="text">Description text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="userIdentity">Log entry owner user or null if none.</param>
            <param name="size">Log entry read/write size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="data">Log data.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.String,System.Security.Principal.GenericIdentity,System.Int64,System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="id">Log entry ID.</param>
            <param name="userIdentity">Log entry owner user or null if none.</param>
            <param name="size">Log entry read/write size in bytes.</param>
            <param name="text">Log text.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="exception">Exception happened. Can be null.</param>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.EntryType">
            <summary>
            Gets log entry type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.ID">
            <summary>
            Gets log entry ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Time">
            <summary>
            Gets time when log entry was created.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.UserIdentity">
            <summary>
            Gets log entry related user identity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Size">
            <summary>
            Gets how much data was readed or written, depends on <b>LogEntryType</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Text">
            <summary>
            Gets describing text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Exception">
            <summary>
            Gets exception happened. This property is available only if LogEntryType.Exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.LocalEndPoint">
            <summary>
            Gets local IP end point. Value null means no local end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.RemoteEndPoint">
            <summary>
            Gets remote IP end point. Value null means no remote end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Data">
            <summary>
            Gest log data. Value null means no log data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs">
            <summary>
            Summary description for SharedRootFolders_EventArgs.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs.SharedRootFolders">
            <summary>
            Gets or sets users shared root folders. Ususaly there is only one root folder 'Shared Folders'.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs.PublicRootFolders">
            <summary>
            Gets or sets public root folders. Ususaly there is only one root folder 'Public Folders'.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_MessageFlags">
            <summary>
            IMAP message flags.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.None">
            <summary>
            No flags defined.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Seen">
            <summary>
            Message has been read.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Answered">
            <summary>
            Message has been answered.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Flagged">
            <summary>
            Message is "flagged" for urgent/special attention.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Deleted">
            <summary>
            Message is "deleted" for removal by later EXPUNGE.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Draft">
            <summary>
            Message has not completed composition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Recent">
            <summary>
            Message is "recently" arrived in this mailbox.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_Client">
            <summary>
            IMAP client.
            </summary>
            <example>
            <code>
            using(IMAP_Client c = new IMAP_Client()){
            	c.Connect("ivx",143);
            	c.Authenticate("test","test");
            			
            	c.SelectFolder("Inbox");
            			
            	IMAP_SequenceSet sequence_set = new IMAP_SequenceSet();
            	// First message
            	sequence_set.Parse("1");
            	// All messages
            //  sequence_set.Parse("1:*");
            	// Messages 1,3,6 and 100 to last
            //  sequence_set.Parse("1,3,6,100:*");
            
            	// Get messages flags and header
            	IMAP_FetchItem msgsInfo = c.FetchMessages(sequence_set,IMAP_FetchItem_Flags.MessageFlags | IMAP_FetchItem_Flags.Header,true,false);
            	
            	// Do your suff
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.Disconnect">
            <summary>
            Closes connection to POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.StartTLS">
            <summary>
            Switches IMAP connection to SSL.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected or is authenticated or is already secure connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected or is already authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.CreateFolder(System.String)">
            <summary>
            Creates specified folder.
            </summary>
            <param name="folderName">Folder name. Eg. test, Inbox/SomeSubFolder. NOTE: use GetFolderSeparator() to get right folder separator.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.DeleteFolder(System.String)">
            <summary>
            Deletes specified folder.
            </summary>
            <param name="folderName">Folder name.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.RenameFolder(System.String,System.String)">
            <summary>
            Renames specified folder.
            </summary>
            <param name="sourceFolderName">Source folder name.</param>
            <param name="destinationFolderName">Destination folder name.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolders">
            <summary>
             Gets all available folders.
            </summary>
            <returns>Returns user folders.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetSubscribedFolders">
            <summary>
            Gets all subscribed folders.
            </summary>
            <returns>Returns user subscribed folders.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.SubscribeFolder(System.String)">
            <summary>
            Subscribes specified folder.
            </summary>
            <param name="folderName">Folder name.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.UnSubscribeFolder(System.String)">
            <summary>
            UnSubscribes specified folder.
            </summary>
            <param name="folderName">Folder name.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.SelectFolder(System.String)">
            <summary>
            Selects specified folder.
            </summary>
            <param name="folderName">Folder name.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolderQuota(System.String)">
            <summary>
            Gets specified folder quota info. Throws Exception if server doesn't support QUOTA.
            </summary>
            <param name="folder">Folder name.</param>
            <returns>Returns specified folder quota info.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetNamespacesInfo">
            <summary>
            Gets IMAP server namespaces info.
            </summary>
            <returns>Returns user namespaces.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolderACL(System.String)">
            <summary>
            Gets specified folder ACL entries.
            </summary>
            <param name="folderName">Folder which ACL entries to get.</param>
            <returns>Returns specified folder ACL entries.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.SetFolderACL(System.String,System.String,LumiSoft.Net.IMAP.IMAP_ACL_Flags)">
            <summary>
            Sets specified user ACL permissions for specified folder.
            </summary>
            <param name="folderName">Folder name which ACL to set.</param>
            <param name="userName">User name who's ACL to set.</param>
            <param name="acl">ACL permissions to set.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.DeleteFolderACL(System.String,System.String)">
            <summary>
            Deletes specified user access to specified folder.
            </summary>
            <param name="folderName">Folder which ACL to remove.</param>
            <param name="userName">User name who's ACL to remove.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolderMyrights(System.String)">
            <summary>
            Gets myrights to specified folder.
            </summary>
            <param name="folderName">Folder which my rifgts to get.</param>
            <returns>Returns myrights to specified folder.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.CopyMessages(LumiSoft.Net.IMAP.IMAP_SequenceSet,System.String,System.Boolean)">
            <summary>
            Copies specified messages to specified folder.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="destFolder">Destination folder name.</param>
            <param name="uidCopy">Specifies if UID COPY or COPY. 
            For UID COPY all sequence_set numers must be message UID values and for normal COPY message numbers.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.MoveMessages(LumiSoft.Net.IMAP.IMAP_SequenceSet,System.String,System.Boolean)">
            <summary>
            Moves specified messages to specified folder.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="destFolder">Folder where to copy messages.</param>
            <param name="uidMove">Specifies if sequence-set contains message UIDs or message numbers.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.DeleteMessages(LumiSoft.Net.IMAP.IMAP_SequenceSet,System.Boolean)">
            <summary>
            Deletes specified messages.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="uidDelete">Specifies if sequence-set contains message UIDs or message numbers.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.StoreMessage(System.String,System.Byte[])">
            <summary>
            Stores message to specified folder.
            </summary>
            <param name="folderName">Folder where to store message.</param>
            <param name="data">Message data which to store.</param>	
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>	
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.StoreMessage(System.String,LumiSoft.Net.IMAP.IMAP_MessageFlags,System.DateTime,System.Byte[])">
            <summary>
            Stores message to specified folder.
            </summary>
            <param name="folderName">Folder where to store message.</param>
            <param name="messageFlags">Message flags what are stored for message.</param>
            <param name="inernalDate">Internal date value what are stored for message.</param>
            <param name="data">Message data which to store.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.FetchMessages(LumiSoft.Net.IMAP.IMAP_SequenceSet,LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags,System.Boolean,System.Boolean)">
            <summary>
            Fetches specifes messages specified fetch items.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="fetchFlags">Specifies what data to fetch from IMAP server.</param>
            <param name="setSeenFlag">If true message seen flag is setted.</param>
            <param name="uidFetch">Specifies if sequence-set contains message UIDs or message numbers.</param>
            <returns>Returns requested fetch items.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.FetchMessage(System.Int32,System.IO.Stream)">
            <summary>
            Gets specified message from server and stores to specified stream.
            </summary>
            <param name="uid">Message UID which to get.</param>
            <param name="storeStream">Stream where to store message.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.StoreMessageFlags(LumiSoft.Net.IMAP.IMAP_SequenceSet,LumiSoft.Net.IMAP.IMAP_MessageFlags,System.Boolean)">
            <summary>
            Stores specified message flags to specified messages.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="msgFlags">Message flags.</param>
            <param name="uidStore">Specifies if UID STORE or STORE. 
            For UID STORE all sequence_set numers must be message UID values and for normal STORE message numbers.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetMessagesTotalSize">
            <summary>
            Gets messages total size in selected folder.
            </summary>
            <returns>Returns messages total size in selected folder.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetUnseenMessagesCount">
            <summary>
            Gets unseen messages count in selected folder.
            </summary>
            <returns>Returns number of unseen messages.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when IMAP client is not connected,not authenticated and folder not selected.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolderSeparator">
            <summary>
            Gets IMAP server folder separator char.
            </summary>
            <returns>Returns IMAP server folder separator char.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.RemoveCmdTag(System.String)">
            <summary>
            Removes command tag from response line.
            </summary>
            <param name="responseLine">Response line with command tag.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.ProcessStatusResponse(System.String)">
            <summary>
            Processes IMAP STATUS response and updates this class status info.
            </summary>
            <param name="statusResponse">IMAP STATUS response line.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.IsStatusResponse(System.String)">
            <summary>
            Gets if specified line is STATUS response.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetNextCmdTag">
            <summary>
            Gets next command tag.
            </summary>
            <returns>Returns next command tag.</returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.PathSeparator">
            <summary>
            Gets IMAP server path separator char.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.SelectedFolder">
            <summary>
            Gets selected folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.UIDValidity">
            <summary>
            Gets folder UID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.UIDNext">
            <summary>
            Gets next predicted message UID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.RecentMessagesCount">
            <summary>
            Gets numbers of recent(not accessed messages) in selected folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.MessagesCount">
            <summary>
            Gets numbers of messages in selected folder.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_TXT">
            <summary>
            TXT record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_TXT.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="text">Text.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_TXT.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_TXT.Text">
            <summary>
            Gets text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.SMTP_ServiceExtensions">
            <summary>
             This class holds known SMTP service extensions. Defined in http://www.iana.org/assignments/mail-parameters.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.SEND">
            <summary>
            Send as mail. Defined in RFC RFC 821.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.SOML">
            <summary>
            Send as mail or terminal. Defined in RFC 821.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.SAML">
            <summary>
            Send as mail and terminal. Defined in RFC 821.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.EXPN">
            <summary>
            Expand the mailing list. Defined in RFC 821,
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.HELP">
            <summary>
            Supply helpful information. Defined in RFC 821.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.TURN">
            <summary>
            Turn the operation around. Defined in RFC 821.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions._8BITMIME">
            <summary>
            Use 8-bit data. Defined in RFC 1652.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.SIZE">
            <summary>
            Message size declaration. Defined in RFC 1870.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.CHUNKING">
            <summary>
            Chunking. Defined in RFC 3030.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.BINARYMIME">
            <summary>
            Binary MIME. Defined in RFC 3030.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.CHECKPOINT">
            <summary>
            Checkpoint/Restart. Defined in RFC 1845.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.PIPELINING">
            <summary>
            Command Pipelining. Defined in RFC 2920.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.DSN">
            <summary>
            Delivery Status Notification. Defined in RFC 1891.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.ETRN">
            <summary>
            Extended Turn. Defined in RFC 1985.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.ENHANCEDSTATUSCODES">
            <summary>
            Enhanced Status Codes. Defined in RFC 2034.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.STARTTLS">
            <summary>
            Start TLS. Defined in RFC 3207.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.NO_SOLICITING">
            <summary>
            Notification of no soliciting. Defined in RFC 3865.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.MTRK">
            <summary>
            Message Tracking. Defined in RFC 3885.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.SUBMITTER">
            <summary>
            SMTP Responsible Submitter. Defined in RFC 4405.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.ATRN">
            <summary>
            Authenticated TURN. Defined in RFC 2645.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.AUTH">
            <summary>
            Authentication. Defined in RFC 4954.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.BURL">
            <summary>
            Remote Content. Defined in RFC 4468.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_ServiceExtensions.FUTURERELEASE">
            <summary>
            Future Message Release. Defined in RFC 4865.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.SMTP_DSN_Notify">
            <summary>
            This value implements SMTP Notify value. Defined in RFC 3461.
            </summary>
            <remarks>Values Success,Failure,Delay may be mixed if NotSpecified or Never flag is not set.</remarks>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_DSN_Notify.NotSpecified">
            <summary>
            Notify value not specified.
            </summary>
            <remarks>
            For compatibility with SMTP clients that do not use the NOTIFY
            facility, the absence of a NOTIFY parameter in a RCPT command may be
            interpreted as either NOTIFY=FAILURE or NOTIFY=FAILURE,DELAY.
            </remarks>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_DSN_Notify.Never">
            <summary>
            DSN should not be returned to the sender under any conditions.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_DSN_Notify.Success">
            <summary>
            DSN should be sent on successful delivery.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_DSN_Notify.Failure">
            <summary>
            DSN should be sent on delivery failure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.SMTP_DSN_Notify.Delay">
            <summary>
            DSN should be sent on delayed delivery.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_Reply">
            <summary>
            This class implements SMTP server reply.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Reply.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="replyCode">SMTP server reply code.</param>
            <param name="replyLine">SMTP server reply line.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>replyLine</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Reply.#ctor(System.Int32,System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="replyCode">SMTP server reply code.</param>
            <param name="replyLines">SMTP server reply line(s).</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>replyLines</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Reply.ToString">
            <summary>
            Returns SMTP server reply as string.
            </summary>
            <returns>Returns SMTP server reply as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Reply.ReplyCode">
            <summary>
            Gets SMTP server reply code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Reply.ReplyLines">
            <summary>
            Gets SMTP server reply lines.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Flow">
            <summary>
            Implements SIP Flow. Defined in draft-ietf-sip-outbound.
            </summary>
            <remarks>A Flow is a network protocol layer (layer 4) association
             between two hosts that is represented by the network address and
             port number of both ends and by the protocol.  For TCP, a flow is
             equivalent to a TCP connection.  For UDP a flow is a bidirectional
             stream of datagrams between a single pair of IP addresses and
             ports of both peers.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,System.Boolean,System.Net.IPEndPoint,System.Net.IPEndPoint,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Owner stack.</param>
            <param name="isServer">Specifies if flow is server or client flow.</param>
            <param name="localEP">Local IP end point.</param>
            <param name="remoteEP">Remote IP end point.</param>
            <param name="transport">SIP transport.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b>,<b>localEP</b>,<b>remoteEP</b>  or <b>transport</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised whena any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.TCP.TCP_Session)">
            <summary>
            Server TCP,TLS constructor.
            </summary>
            <param name="stack">Owner stack.</param>
            <param name="session">TCP session.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b> or <b>session</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.Send(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Sends specified request to flow remote end point.
            </summary>
            <param name="request">SIP request to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>request</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.Send(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends specified response to flow remote end point.
            </summary>
            <param name="response">SIP response to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.Start">
            <summary>
            Starts flow processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.SendInternal(System.Byte[])">
            <summary>
            Sends specified data to the remote end point.
            </summary>
            <param name="data">Data to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.BeginReadHeader">
            <summary>
            Starts reading SIP message header.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.BeginReadHeader_Completed(System.IAsyncResult)">
            <summary>
            This method is called when SIP message header reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.BeginReadData_Completed(System.IAsyncResult)">
            <summary>
            This method is called when SIP message data reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.OnUdpPacketReceived(LumiSoft.Net.UDP.UDP_PacketEventArgs)">
            <summary>
            This method is called when flow gets new UDP packet.
            </summary>
            <param name="e">UDP data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>e</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Flow.OnDisposing">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.IsServer">
            <summary>
            Gets if this flow is server flow or client flow.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.CreateTime">
            <summary>
            Gets time when flow was created.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.ID">
            <summary>
            Gets flow ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.LocalEP">
            <summary>
            Gets flow local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.RemoteEP">
            <summary>
            Gets flow remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.Transport">
            <summary>
            Gets flow transport.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.IsReliable">
            <summary>
            Gets if flow is reliable transport.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.IsSecure">
            <summary>
            Gets if this connection is secure.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.SendKeepAlives">
            <summary>
            Gets or sets if flow sends keep-alive packets.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.LastActivity">
            <summary>
            Gets when flow had last(send or receive) activity.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Flow.BytesWritten">
            <summary>
            Gets how many bytes this flow has sent to remote party.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Flow.IsDisposing">
            <summary>
            Is raised when flow is disposing.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_SendStream">
            <summary>
            Implements RTP session send stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.#ctor(LumiSoft.Net.RTP.RTP_Source_Local)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Owner RTP source.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.Close">
            <summary>
            Closes this sending stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.Close(System.String)">
            <summary>
            Closes this sending stream.
            </summary>
            <param name="closeReason">Stream closing reason text what is reported to the remote party. Value null means not specified.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.Send(LumiSoft.Net.RTP.RTP_Packet)">
            <summary>
            Sends specified packet to the RTP session remote party.
            </summary>
            <param name="packet">RTP packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>packet</b> is null reference.</exception>
            <remarks>Properties <b>packet.SSRC</b>,<b>packet.SeqNo</b>,<b>packet.PayloadType</b> filled by this method automatically.</remarks>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.RtcpCycle">
            <summary>
            Is called by RTP session if RTCP cycle compled.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.NextSeqNo">
            <summary>
            Gets next packet sequence number.
            </summary>
            <returns>Returns next packet sequence number.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStream.OnClosed">
            <summary>
            Raises <b>Closed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.Session">
            <summary>
            Gets stream owner RTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.Source">
            <summary>
            Gets stream owner source.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.SeqNoWrapCount">
            <summary>
            Gets number of times <b>SeqNo</b> has wrapped around.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.SeqNo">
            <summary>
            Gets next packet sequence number.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.LastPacketTime">
            <summary>
            Gets last packet send time.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.LastPacketRtpTimestamp">
            <summary>
            Gets last sent RTP packet RTP timestamp header value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.RtpPacketsSent">
            <summary>
            Gets how many RTP packets has sent by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.RtpBytesSent">
            <summary>
            Gets how many RTP bytes has sent by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.RtpDataBytesSent">
            <summary>
            Gets how many RTP data(no RTP header included) bytes has sent by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStream.RtcpCyclesSinceWeSent">
            <summary>
            Gets how many RTCP cycles has passed since we sent data.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_SendStream.Disposed">
            <summary>
            Is raised when stream has disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_SendStream.Closed">
            <summary>
            Is raised when stream is closed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_PacketEventArgs">
            <summary>
            This class provides data for RTP packet related events/methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_PacketEventArgs.#ctor(LumiSoft.Net.RTP.RTP_Packet)">
            <summary>
            Default constructor.
            </summary>
            <param name="packet">RTP packet.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_PacketEventArgs.Packet">
            <summary>
            Gets RTP packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Address">
            <summary>
            This class implements RTP session address.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Address.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Unicast constructor.
            </summary>
            <param name="ip">Unicast IP address.</param>
            <param name="dataPort">RTP data port.</param>
            <param name="controlPort">RTP control port. Usualy this is <b>dataPort</b> + 1.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid values.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Address.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
            <summary>
            Multicast constructor.
            </summary>
            <param name="ip">Multicast IP address.</param>
            <param name="dataPort">RTP data port.</param>
            <param name="controlPort">RTP control port. Usualy this is <b>dataPort</b> + 1.</param>
            <param name="ttl">RTP control port. Usualy this is <b>dataPort</b> + 1.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid values.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Address.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>True if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Address.GetHashCode">
            <summary>
            Gets this hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Address.IsMulticast">
            <summary>
            Gets if this is multicast RTP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Address.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Address.DataPort">
            <summary>
            Gets RTP data port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Address.ControlPort">
            <summary>
            Gets RTCP control port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Address.TTL">
            <summary>
            Gets mulicast TTL(time to live) value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Address.RtpEP">
            <summary>
            Gets RTP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Address.RtcpEP">
            <summary>
            Gets RTPCP end point.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream">
            <summary>
            This class is wrapper to normal stream, provides most needed stream methods which are missing from normal stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream to wrap.</param>
            <param name="owner">Specifies if SmartStream is owner of <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadLine(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous line reading from the source stream.
            </summary>
            <param name="buffer">Buffer where to store readed line data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadLine(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous line reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>. Returns -1 if no more data, end of stream reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when <b>maxCount</b> value is exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLine(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">
            <summary>
            Begins line reading.
            </summary>
            <param name="op">Read line opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous header reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadHeader(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous header reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads header from stream and stores to the specified <b>storeStream</b>.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <returns>Returns how many bytes readed from source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminated(LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP,System.Boolean)">
            <summary>
            Begins period-terminated data reading.
            </summary>
            <param name="op">Read period terminated opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginReadFixedCount(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous data reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndReadFixedCount(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadToStream</b> has already been called for specified <b>asyncResult</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadFixedCount(System.IO.Stream,System.Int64)">
            <summary>
            Reads specified number of bytes from source stream and writes to the specified stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadFixedCountString(System.Int32)">
            <summary>
            Reads specified number of bytes from source stream and converts it to string with current encoding.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Returns readed data as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from source stream and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Write(System.String)">
            <summary>
            Writes specified string data to stream.
            </summary>
            <param name="data">Data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteLine(System.String)">
            <summary>
            Writes specified line to stream. If CRLF is missing, it will be added automatically to line data.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null.</exception>
            <returns>Returns number of raw bytes written.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStream(System.IO.Stream)">
            <summary>
            Writes all source <b>stream</b> data to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteStream(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified number of bytes from source <b>stream</b> to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>count</b> argument has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Reads all data from the source <b>stream</b> and writes it to stream. Period handling and period terminator is added as required.
            </summary>
            <param name="stream">Source stream which data to write to stream.</param>
            <returns>Returns number of bytes written to source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.WriteHeader(System.IO.Stream)">
            <summary>
            Reads header from source <b>stream</b> and writes it to stream.
            </summary>
            <param name="stream">Stream from where to read header.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous read, which could still be pending.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The total number of bytes read into the <b>buffer</b>. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferRead(System.Boolean,LumiSoft.Net.IO.SmartStream.BufferCallback)">
            <summary>
            Begins buffering read-buffer.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="asyncCallback">The callback that is executed when asynchronous operation completes. 
            If operation completes synchronously, no callback called.</param>
            <returns>
            Returns true if the I/O operation is pending. The BufferReadAsyncEventArgs.Completed event on the context parameter will be raised upon completion of the operation. 
            Returns false if the I/O operation completed synchronously. The BufferReadAsyncEventArgs.Completed event on the context parameter will not be raised and the context object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. 
            </returns>
            <exception cref="T:System.InvalidOperationException">Is raised when there is data in read buffer and this method is called.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.SourceStream">
            <summary>
            Gets this stream underlying stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.IsOwner">
            <summary>
            Gets if SmartStream is owner of source stream. This property affects like closing this stream will close SourceStream if IsOwner true.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.LastActivity">
            <summary>
            Gets the last time when data was read or written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesReaded">
            <summary>
            Gets how many bytes are readed through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesWritten">
            <summary>
            Gets how many bytes are written through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BytesInReadBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Encoding">
            <summary>
            Gets or sets string related methods default encoding.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation">
            <summary>
            This class implements asynchronous line reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.DoLineReading">
            <summary>
            Does line reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.BytesReaded">
            <summary>
            Gets number of bytes readed from source stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation">
            <summary>
            This class implements asynchronous line-based terminated data reader, where terminator is on line itself.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.String,System.IO.Stream,System.Int64,LumiSoft.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="terminator">Data terminator.</param>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>terminator</b> or <b>storeStream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.ReadLine_Completed(System.IAsyncResult)">
            <summary>
            This method is called when asyynchronous line reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Terminator">
            <summary>
            Gets terminator.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToTerminatorAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation">
            <summary>
            This class implements asynchronous read to stream data reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.DoDataReading">
            <summary>
            Does data reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadToStreamAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation">
            <summary>
            This class implements asynchronous data reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.#ctor(LumiSoft.Net.IO.SmartStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.DoRead">
            <summary>
            Does asynchronous data reading.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP">
            <summary>
            This class implements read line operation.
            </summary>
            <remarks>This class can be reused on multiple calls of <see cref="M:LumiSoft.Net.IO.SmartStream.ReadLine(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">SmartStream.ReadLine</see> method.</remarks>
        </member>
        <member name="T:LumiSoft.Net.AsyncOP">
            <summary>
            This is base class for asynchronous operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AsyncOP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.#ctor(System.Byte[],LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="buffer">Line buffer.</param>
            <param name="exceededAction">Specifies how line-reader behaves when maximum line size exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Start(System.Boolean,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Starts reading line.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.DoLineReading(System.Boolean)">
            <summary>
            Starts/continues line reading.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if line reading completed.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.SetInfo(System.Int32,System.Exception)">
            <summary>
            Sets specified field values.
            </summary>
            <param name="bytesInBuffer">Number of bytes in buffer.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.SizeExceededAction">
            <summary>
            Gets line size exceeded action.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Buffer">
            <summary>
            Gets line buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in the buffer. Ending line-feed characters included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineBytesInBuffer">
            <summary>
            Gets number of line data bytes stored in the buffer. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineAscii">
            <summary>
            Gets line as ASCII string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineUtf8">
            <summary>
            Gets line as UTF-8 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.LineUtf32">
            <summary>
            Gets line as UTF-32 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP">
            <summary>
            This class implements read period-terminated operation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.#ctor(System.IO.Stream,System.Int64,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream wehre to sore readed data.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how period-terminated reader behaves when <b>maxCount</b> exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Start(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Starts period-terminated data reading.
            </summary>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.m_pReadLineOP_Completed(System.Object,LumiSoft.Net.EventArgs{LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP})">
            <summary>
            Is called when asynchronous line reading has completed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.DoRead">
            <summary>
            Continues period-terminated reading.
            </summary>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.ProcessReadedLine">
            <summary>
            Processes readed line.
            </summary>
            <returns>Returns true if read period-terminated operation has completed.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">
            <summary>
            Gets stream where period terminated data has stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.BytesStored">
            <summary>
            Gets number of bytes stored to <see cref="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.LinesStored">
            <summary>
            Gets number of lines stored to <see cref="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP">
            <summary>
            This class implements asynchronous read buffering.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.#ctor(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Start(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Starts asynchronous operation.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="buffer">Buffer where to store readed data.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <returns>Returns true if operation completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.ReleaseEvents">
            <summary>
            Releases all events attached to this class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Buffer">
            <summary>
            Gets read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.IO.SmartStream.BufferReadAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.FTP_TransferMode">
            <summary>
            Specifies FTP data connection transfer mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.FTP_TransferMode.Active">
            <summary>
            Active transfer mode - FTP server opens data connection FTP client.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.FTP_TransferMode.Passive">
            <summary>
            Passive transfer mode - FTP client opens data connection FTP server.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WebDav.WebDav_Response">
            <summary>
            This class represent WeDav 'DAV:response' element. Definded in RFC 4918 14.24.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_Response.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_Response.Parse(System.Xml.XmlNode)">
            <summary>
            Parses WebDav_Response from 'DAV:response' element.
            </summary>
            <param name="reponseNode">The 'DAV:response' element</param>
            <returns>Returns DAV response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when when <b>responseNode</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when there are any parsing error.</exception>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_Response.HRef">
            <summary>
            Gets response href.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_Response.PropStats">
            <summary>
            Gets 'propstat' elements.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartFormData">
            <summary>
            This class represents MIME multipart/from-data body. Defined in RFC 2046.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartFormData.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartFormData.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadWriteControlledStream">
            <summary>
            This class implements read,write or read-write access stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadWriteControlledStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadWriteControlledStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Request">
            <summary>
            SIP server request. Related RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="method">SIP request method.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>method</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.Copy">
            <summary>
            Clones this request.
            </summary>
            <returns>Returns new cloned request.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.Validate">
            <summary>
            Checks if SIP request has all required values as request line,header fields and their values.
            Throws Exception if not valid SIP request.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.Parse(System.Byte[])">
            <summary>
            Parses SIP_Request from byte array.
            </summary>
            <param name="data">Valid SIP request data.</param>
            <returns>Returns parsed SIP_Request obeject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.Parse(System.IO.Stream)">
            <summary>
            Parses SIP_Request from stream.
            </summary>
            <param name="stream">Stream what contains valid SIP request.</param>
            <returns>Returns parsed SIP_Request obeject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.ToStream(System.IO.Stream)">
            <summary>
            Stores SIP_Request to specified stream.
            </summary>
            <param name="stream">Stream where to store.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.ToByteData">
            <summary>
            Converts this request to raw srver request data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.ToString">
            <summary>
            Returns request as string.
            </summary>
            <returns>Returns request as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.RequestLine">
            <summary>
            Gets request-line.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.Flow">
            <summary>
            Gets or sets flow what received or sent this request. Returns null if this request isn't sent or received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.LocalEndPoint">
            <summary>
            Gets or sets local end point what sent/received this request. Returns null if this request isn't sent or received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.RemoteEndPoint">
            <summary>
            Gets or sets remote end point what sent/received this request. Returns null if this request isn't sent or received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">
            <summary>
            The exception that is thrown when a transport error occurs.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="errorText">Error text describing error.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Method">
            <summary>
            Implements SIP "Method" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                Method           = INVITEm / ACKm / OPTIONSm / BYEm / CANCELm / REGISTERm / extension-method
                extension-method = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Method.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Method.Parse(System.String)">
            <summary>
            Parses "Method" from specified value.
            </summary>
            <param name="value">SIP "Method" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Method.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Method" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Method.ToStringValue">
            <summary>
            Converts this to valid "Method" value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Method.Method">
            <summary>
            Gets or sets SIP method what is allowed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UriSchemes">
            <summary>
            This class represents well known URI schemes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.dav">
            <summary>
            HTTP Extensions for Distributed Authoring (WebDAV).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.file">
            <summary>
            Addressing files on local or network file systems.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.ftp">
            <summary>
            FTP resources.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.http">
            <summary>
            HTTP resources.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.https">
            <summary>
            HTTP connections secured using SSL/TLS.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.mailto">
            <summary>
            SMTP e-mail addresses and default content.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.sip">
            <summary>
            Session Initiation Protocol (SIP).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.sips">
            <summary>
            Session Initiation Protocol (SIP) using TLS.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UriSchemes.tel">
            <summary>
            Telephone numbers.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message">
            <summary>
            Implements STUN message. Defined in RFC 3489.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.Parse(System.Byte[])">
            <summary>
            Parses STUN message from raw data packet.
            </summary>
            <param name="data">Raw STUN message.</param>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ToByteData">
            <summary>
            Converts this to raw STUN packet.
            </summary>
            <returns>Returns raw STUN packet.</returns>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ParseAttribute(System.Byte[],System.Int32@)">
            <summary>
            Parses attribute from data.
            </summary>
            <param name="data">SIP message data.</param>
            <param name="offset">Offset in data.</param>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ParseEndPoint(System.Byte[],System.Int32@)">
            <summary>
            Pasrses IP endpoint attribute.
            </summary>
            <param name="data">STUN message data.</param>
            <param name="offset">Offset in data.</param>
            <returns>Returns parsed IP end point.</returns>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.StoreEndPoint(LumiSoft.Net.STUN.Message.STUN_Message.AttributeType,System.Net.IPEndPoint,System.Byte[],System.Int32@)">
            <summary>
            Stores ip end point attribute to buffer.
            </summary>
            <param name="type">Attribute type.</param>
            <param name="endPoint">IP end point.</param>
            <param name="message">Buffer where to store.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.Type">
            <summary>
            Gets STUN message type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.TransactionID">
            <summary>
            Gets transaction ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.MappedAddress">
            <summary>
            Gets or sets IP end point what was actually connected to STUN server. Returns null if not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ResponseAddress">
            <summary>
            Gets or sets IP end point where to STUN client likes to receive response.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ChangeRequest">
            <summary>
            Gets or sets how and where STUN server must send response back to STUN client.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.SourceAddress">
            <summary>
            Gets or sets STUN server IP end point what sent response to STUN client. Value null
            means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ChangedAddress">
            <summary>
            Gets or sets IP end point where STUN server will send response back to STUN client 
            if the "change IP" and "change port" flags had been set in the ChangeRequest.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.UserName">
            <summary>
            Gets or sets user name. Value null means not specified.
            </summary>          
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.Password">
            <summary>
            Gets or sets password. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ErrorCode">
            <summary>
            Gets or sets error info. Returns null if not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ReflectedFrom">
            <summary>
            Gets or sets IP endpoint from which IP end point STUN server got STUN client request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ServerName">
            <summary>
            Gets or sets server name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message.AttributeType">
            <summary>
            Specifies STUN attribute type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message.IPFamily">
            <summary>
            Specifies IP address family.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy">
            <summary>
            Implements SIP "Referred-By" value. Defined in RFC 3892.
            </summary>
            <remarks>
            <code>
            RFC 3892 Syntax:
                Referred-By         =  referrer-uri *( SEMI (referredby-id-param / generic-param) )
                referrer-uri        = ( name-addr / addr-spec )
                referredby-id-param = "cid" EQUAL sip-clean-msg-id
                sip-clean-msg-id    = LDQUOT dot-atom "@" (dot-atom / host) RDQUOT
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP 'Referred-By' value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.Parse(System.String)">
            <summary>
            Parses "Referred-By" from specified value.
            </summary>
            <param name="value">SIP "Referred-By" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Referred-By" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.ToStringValue">
            <summary>
            Converts this to valid "Referred-By" value.
            </summary>
            <returns>Returns "Referred-By" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.Address">
            <summary>
            Gets or sets address.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.CID">
            <summary>
            Gets or sets 'cid' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.EmailAddressCollection">
            <summary>
            vCard email address collection implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.#ctor(LumiSoft.Net.Mime.vCard.vCard)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner vCard.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Add(LumiSoft.Net.Mime.vCard.EmailAddressType_enum,System.String)">
            <summary>
            Add new email address to the collection.
            </summary>
            <param name="type">Email address type. Note: This value can be flagged value !</param>
            <param name="email">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Remove(LumiSoft.Net.Mime.vCard.EmailAddress)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Index of item which to get.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Session">
            <summary>
            IMAP session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.IPBindInfo,LumiSoft.Net.IMAP.Server.IMAP_Server)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.StartSession">
            <summary>
            Starts session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.EndSession">
            <summary>
            Ends session, closes socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.Kill">
            <summary>
            Kill this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.OnSessionTimeout">
            <summary>
            Is called by server when session has timed out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.OnError(System.Exception)">
            <summary>
            Is called when error occures.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.BeginRecieveCmd">
            <summary>
            Starts recieveing command.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.EndRecieveCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called if command is recieved.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.SwitchCommand(System.String)">
            <summary>
            Executes IMAP command.
            </summary>
            <param name="IMAP_commandTxt">Original command text.</param>
            <returns>Returns true if must end session(command loop).</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.BeginAppendCmd(System.String,System.String)">
            <summary>
            Returns true if command ended syncronously.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.EndAppendCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when DATA command is finnished.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.Idle(System.String,System.String)">
            <summary>
            Processes IDLE command.
            </summary>
            <param name="cmdTag">Command tag.</param>
            <param name="argsText">Command arguments text.</param>
            <returns>Returns true if IDLE comand accepted, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.ProcessMailboxChanges">
            <summary>
            Processes changes and sends status responses if there are changes in selected mailbox.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Session.SelectedMailbox">
            <summary>
            Gets selected mailbox.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Session.Command_IDLE">
            <summary>
            This class implements IDLE command. Defined in RFC 2177.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.Command_IDLE.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="cmdTag">IDLE command command-tag.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> or <b>cmdTag</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.Command_IDLE.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.Command_IDLE.Start">
            <summary>
            Starts IDLE command processing.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_BODY_Entity">
            <summary>
            IMAP BODY mime entity info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY_Entity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY_Entity.Parse(System.String)">
            <summary>
            Parses entity and it's child entities.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ParentEntity">
            <summary>
            Gets parent entity of this entity. If this entity is top level, then this property returns null.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ChildEntities">
            <summary>
            Gets child entities. This property is available only if ContentType = multipart/... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentType">
            <summary>
            Gets header field "<b>Content-Type:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentID">
            <summary>
            Gets header field "<b>Content-ID:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentDescription">
            <summary>
            Gets header field "<b>Content-Description:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentTransferEncoding">
            <summary>
            Gets header field "<b>Content-Transfer-Encoding:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentSize">
            <summary>
            Gets content encoded data size. NOTE: This property is available only for non-multipart contentype !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentLines">
            <summary>
            Gets content encoded data lines. NOTE: This property is available only for text/xxx content type !
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_Session">
            <summary>
            This class implements SMTP relay server session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.#ctor(LumiSoft.Net.SMTP.Relay.Relay_Server,LumiSoft.Net.IPBindInfo,LumiSoft.Net.SMTP.Relay.Relay_QueueItem)">
            <summary>
            Dns relay session constructor.
            </summary>
            <param name="server">Owner relay server.</param>
            <param name="localBindInfo">Local bind info.</param>
            <param name="realyItem">Relay item.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>server</b>,<b>localBindInfo</b> or <b>realyItem</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.#ctor(LumiSoft.Net.SMTP.Relay.Relay_Server,LumiSoft.Net.IPBindInfo,LumiSoft.Net.SMTP.Relay.Relay_QueueItem,LumiSoft.Net.SMTP.Relay.Relay_SmartHost[])">
            <summary>
            Smart host relay session constructor.
            </summary>
            <param name="server">Owner relay server.</param>
            <param name="localBindInfo">Local bind info.</param>
            <param name="realyItem">Relay item.</param>
            <param name="smartHosts">Smart hosts.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>server</b>,<b>localBindInfo</b>,<b>realyItem</b> or <b>smartHosts</b>is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.Dispose">
            <summary>
            Completes relay session and does clean up. This method is thread-safe.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.Dispose(System.Exception)">
            <summary>
            Completes relay session and does clean up. This method is thread-safe.
            </summary>
            <param name="exception">Exception happened or null if relay completed successfully.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.Start(System.Object)">
            <summary>
            Start processing relay message.
            </summary>
            <param name="state">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.Disconnect">
            <summary>
            Closes relay connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.Disconnect(System.String)">
            <summary>
            Closes relay connection.
            </summary>
            <param name="text">Text to send to the connected host.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.BeginConnect">
            <summary>
            Starts connecting to best target. 
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.ConnectCallback(System.IAsyncResult)">
            <summary>
            This method is called when asynchronous Connect method completes.
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.StartTlsCallback(System.IAsyncResult)">
            <summary>
            This method is called when asynchronous <b>StartTLS</b> method completes.
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.AuthenticateCallback(System.IAsyncResult)">
            <summary>
            This method is called when asynchronous <b>Authenticate</b> method completes.
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.MailFromCallback(System.IAsyncResult)">
            <summary>
            This method is called when asynchronous MailFrom method completes.
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.RcptToCallback(System.IAsyncResult)">
            <summary>
            This method is called when asynchronous RcptTo method completes.
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.SendMessageCallback(System.IAsyncResult)">
            <summary>
            This method is called when asynchronous SendMessage method completes.
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.SmtpClient_WriteLog(System.Object,LumiSoft.Net.Log.WriteLogEventArgs)">
            <summary>
            Thsi method is called when SMTP client has new log entry available.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.LogText(System.String)">
            <summary>
            Logs specified text if logging enabled.
            </summary>
            <param name="text">Text to log.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.IsDsnSupported">
            <summary>
            Gets if DSN extention is supported by remote server.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.LocalHostName">
            <summary>
            Gets local host name for LoaclEP.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.SessionCreateTime">
            <summary>
            Gets time when relay session created.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.ExpectedTimeout">
            <summary>
            Gets how many seconds has left before timout is triggered.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.From">
            <summary>
            Gets from address.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.To">
            <summary>
            Gets target recipient.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.MessageID">
            <summary>
            Gets message ID which is being relayed now.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.MessageStream">
            <summary>
            Gets message what is being relayed now.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.RemoteHostName">
            <summary>
            Gets current remote host name. Returns null if not connected to any target.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.Queue">
            <summary>
            Gets relay queue which session it is.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.QueueTag">
            <summary>
            Gets user data what was procided to Relay_Queue.QueueMessage method.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and relay session is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.IsConnected">
            <summary>
            Gets if session is connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.ID">
            <summary>
            Gets session ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_Session.Relay_Target">
            <summary>
            This class holds relay target information.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.Relay_Target.#ctor(System.String,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Target host name.</param>
            <param name="target">Target host IP end point.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Session.Relay_Target.#ctor(System.String,System.Net.IPEndPoint,LumiSoft.Net.SslMode,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Target host name.</param>
            <param name="target">Target host IP end point.</param>
            <param name="sslMode">SSL mode.</param>
            <param name="userName">Target host user name.</param>
            <param name="password">Target host password.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.Relay_Target.HostName">
            <summary>
            Gets target host name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.Relay_Target.Target">
            <summary>
            Gets specified target IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.Relay_Target.SslMode">
            <summary>
            Gets target SSL mode.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.Relay_Target.UserName">
            <summary>
            Gets target server user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Session.Relay_Target.Password">
            <summary>
            Gets target server password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_SendStreamEventArgs">
            <summary>
            This method provides data for RTP send stream related events and methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SendStreamEventArgs.#ctor(LumiSoft.Net.RTP.RTP_SendStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">RTP send stream.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SendStreamEventArgs.Stream">
            <summary>
            Gets RTP stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_MultimediaSession">
            <summary>
            This class represents RTP single-media and multimedia session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="cname">Canonical name of participant. <seealso cref="M:LumiSoft.Net.RTP.RTP_Utils.GenerateCNAME"/>RTP_Utils.GenerateCNAME 
            can be used to create this value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cname</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.Close(System.String)">
            <summary>
            Closes RTP multimedia session, sends BYE with optional reason text to remote targets.
            </summary>
            <param name="closeReason">Close reason. Value null means not specified.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.Start">
            <summary>
            Starts session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.Stop">
            <summary>
            Stops session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.CreateSession(LumiSoft.Net.RTP.RTP_Address,LumiSoft.Net.RTP.RTP_Clock)">
            <summary>
            Creates new RTP session.
            </summary>
            <param name="localEP">Local RTP end point.</param>
            <param name="clock">RTP media clock.</param>
            <returns>Returns created session.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b> or <b>clock</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.GetOrCreateParticipant(System.String)">
            <summary>
            Gets or creates new participant if participant does not exist.
            </summary>
            <param name="cname">Participant canonical name.</param>
            <returns>Returns specified participant.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.OnSessionCreated(LumiSoft.Net.RTP.RTP_Session)">
            <summary>
            Raises <b>SessionCreated</b> event.
            </summary>
            <param name="session">RTP session.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.OnNewParticipant(LumiSoft.Net.RTP.RTP_Participant_Remote)">
            <summary>
            Raises <b>NewParticipant</b> event.
            </summary>
            <param name="participant">New participant.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_MultimediaSession.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="exception">Exception.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_MultimediaSession.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_MultimediaSession.Sessions">
            <summary>
            Gets media sessions.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_MultimediaSession.LocalParticipant">
            <summary>
            Gets local participant.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_MultimediaSession.RemoteParticipants">
            <summary>
            Gets session remote participants.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_MultimediaSession.SessionCreated">
            <summary>
            Is raised when new session has created.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_MultimediaSession.NewParticipant">
            <summary>
            Is raised when new remote participant has joined to session.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_MultimediaSession.Error">
            <summary>
            Is raised when unknown error has happened.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartDigest">
            <summary>
            This class represents MIME multipart/digest body. Defined in RFC 2046 5.1.5.
            </summary>
            <remarks>
            The "multipart/digest" Content-Type is intended to be used to send collections of messages.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartDigest.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartDigest.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MultipartDigest.DefaultBodyPartContentType">
            <summary>
            Gets default body part Content-Type. For more info see RFC 2046 5.1.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Stack">
            <summary>
            Implements SIP stack.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.Start">
            <summary>
            Starts SIP stack.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.Stop">
            <summary>
            Stops SIP stack.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.CreateRequest(System.String,LumiSoft.Net.SIP.Message.SIP_t_NameAddress,LumiSoft.Net.SIP.Message.SIP_t_NameAddress)">
            <summary>
            Creates new out-off dialog SIP request.
            </summary>
            <param name="method">SIP request-method.</param>
            <param name="to">Recipient address. For example: sip:user@domain.com</param>
            <param name="from">Senders address. For example: sip:user@domain.com</param>
            <returns>Returns created request.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>method</b>,<b>to</b> or <b>from</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.CreateRequestSender(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Creates SIP request sender for the specified request.
            </summary>
            <param name="request">SIP request.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>request</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.CreateRequestSender(LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Flow)">
            <summary>
            Creates SIP request sender for the specified request.
            </summary>
            <param name="request">SIP request.</param>
            <param name="flow">Data flow.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>request</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.ConsumeCSeq">
            <summary>
            Consumes current CSeq number and increments it by 1.
            </summary>
            <returns>Returns CSeq number.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.CreateResponse(System.String,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Creates response for the specified request.
            </summary>
            <param name="statusCode_reasonText">Status-code reasontext.</param>
            <param name="request">SIP request.</param>
            <returns>Returns created response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>statusCode_reasonText</b> or <b>request</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when request is ACK-request. ACK request is response less.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.CreateResponse(System.String,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Flow)">
            <summary>
            Creates response for the specified request.
            </summary>
            <param name="statusCode_reasonText">Status-code reasontext.</param>
            <param name="request">SIP request.</param>
            <param name="flow">Data flow what sends response. This value is used to construct Contact: header value. 
            This value can be null, but then adding Contact: header is response sender responsibility.</param>
            <returns>Returns created response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>statusCode_reasonText</b> or <b>request</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when request is ACK-request. ACK request is response less.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.GetHops(LumiSoft.Net.SIP_Uri,System.Int32,System.Boolean)">
            <summary>
            Gets target hops(address,port,transport) of the specified URI.
            </summary>
            <param name="uri">Target URI.</param>
            <param name="messageSize">SIP message size.</param>
            <param name="forceTLS">If true only TLS hops are returned.</param>
            <returns>Returns target hops(address,port,transport) of the specified URI.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.CreateRegistration(LumiSoft.Net.SIP_Uri,System.String,LumiSoft.Net.AbsoluteUri,System.Int32)">
            <summary>
            Creates new registration.
            </summary>
            <param name="server">Registrar server URI. For example: sip:domain.com.</param>
            <param name="aor">Registration address of record. For example: user@domain.com.</param>
            <param name="contact">Contact URI.</param>
            <param name="expires">Gets after how many seconds reigisration expires.</param>
            <returns>Returns created registration.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>server</b>,<b>aor</b> or <b>contact</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.OnValidateRequest(LumiSoft.Net.SIP.Stack.SIP_Request,System.Net.IPEndPoint)">
            <summary>
            Is called by Transport layer when new incoming SIP request is received.
            </summary>
            <param name="request">Incoming SIP request.</param>
            <param name="remoteEndPoint">Request maker IP end point.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.OnRequestReceived(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Raises <b>RequestReceived</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.OnResponseReceived(LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            Raises <b>ResponseReceived</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.OnError(System.Exception)">
            <summary>
            Is called when ever unknown error happens.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.Enabled">
            <summary>
            Gets or sets if SIP stack is running.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.IsRunning">
            <summary>
            Gets if SIP stack has started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.TransportLayer">
            <summary>
            Gets transport layer what is used to receive and send requests and responses.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.TransactionLayer">
            <summary>
            Gets transaction layer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.DigestNonceManager">
            <summary>
            Gets digest authentication nonce manager.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.StunServer">
            <summary>
            Gets or sets STUN server name or IP address. This value must be filled if SIP stack is running behind a NAT.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.ProxyServers">
            <summary>
            Gets SIP outbound proxy servers collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.Realm">
            <summary>
            Gets or sets SIP <b>realm</b> value. Mostly this value is used by <b>digest</b> authentication.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.MaxForwards">
            <summary>
            Gets or sets maximum forwards SIP request may have.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when value contains invalid value.</exception>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.MinimumExpireTime">
            <summary>
            Gets or sets minimum expire time in seconds what server allows.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.MaximumConnections">
            <summary>
            Gets or sets how many cunncurent connections allowed. Value 0 means not limited. This is used only for TCP based connections.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.MaximumMessageSize">
            <summary>
            Gets or sets maximum allowed SIP message size in bytes. This is used only for TCP based connections.
            Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.MinimumSessionExpries">
            <summary>
            Gets or sets minimum session expires value in seconds. NOTE: Minimum value is 90 !
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.SessionExpries">
            <summary>
            Gets or sets session expires value in seconds. NOTE: This value can't be smaller than MinimumSessionExpries.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.Credentials">
            <summary>
            Gets credentials collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.BindInfo">
            <summary>
            Gets or sets socket bind info. Use this property to specify on which protocol,IP,port server 
            listnes and also if connections is SSL.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.Dns">
            <summary>
            Gets stack DNS client.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.Logger">
            <summary>
            Gets SIP logger.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.Registrations">
            <summary>
            Gets current registrations.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Stack.ValidateRequest">
            <summary>
            This event is raised when new incoming SIP request is received. You can control incoming requests
            with that event. For example you can require authentication or send what ever error to request maker user.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Stack.RequestReceived">
            <summary>
            This event is raised when new SIP request is received.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Stack.ResponseReceived">
            <summary>
            This event is raised when new stray SIP response is received.
            Stray response means that response doesn't match to any transaction.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Stack.Error">
            <summary>
            This event is raised by any SIP element when unknown/unhandled error happened.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1">
            <summary>
            Implements single value header field.
            Used by header fields like To:,From:,CSeq:, ... .
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_HeaderField">
            <summary>
            Represents SIP message header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderField.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderField.SetMultiValue(System.Boolean)">
            <summary>
            Sets property IsMultiValue value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderField.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderField.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderField.IsMultiValue">
            <summary>
            Gets if header field is multi value header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.#ctor(System.String,`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses single value from specified reader.
            </summary>
            <param name="reader">Reader what contains </param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.ToStringValue">
            <summary>
            Convert this to string value.
            </summary>
            <returns>Returns this as string value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.ValueX">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_OptionTag">
            <summary>
            Implements SIP "option-tag" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                option-tag = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.Parse(System.String)">
            <summary>
            Parses "option-tag" from specified value.
            </summary>
            <param name="value">SIP "option-tag" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "option-tag" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.ToStringValue">
            <summary>
            Converts this to valid "option-tag" value.
            </summary>
            <returns>Returns "option-tag" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.OptionTag">
            <summary>
            Gets or sets option tag.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange">
            <summary>
            Implements SIP "accept-range" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                accept-range  = media-range [ accept-params ] 
                media-range   = ("*//*" / (m-type SLASH "*") / (m-type SLASH m-subtype)) *(SEMI m-parameter)
                accept-params = SEMI "q" EQUAL qvalue *(SEMI generic-param)
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.Parse(System.String)">
            <summary>
            Parses "accept-range" from specified value.
            </summary>
            <param name="value">SIP "accept-range" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "accept-range" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.ToStringValue">
            <summary>
            Converts this to valid "accept-range" value.
            </summary>
            <returns>Returns "accept-range" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.MediaType">
            <summary>
            Gets or sets media type. Value *(STAR) means all values. Syntax: mediaType / mediaSubType.
            Examples: */*,video/*,text/html.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.MediaParameters">
            <summary>
            Gets media parameters collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.Parameters">
            <summary>
            Gets accept value parameters.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.QValue">
            <summary>
            Gets or sets qvalue parameter. Targets are processed from highest qvalue to lowest. 
            This value must be between 0.0 and 1.0. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketBufferedWriter">
            <summary>
            Implements buffered writer for socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.#ctor(LumiSoft.Net.SocketEx)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket where to write data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Flush">
            <summary>
            Forces to send all data in buffer to destination host.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Write(System.String)">
            <summary>
            Queues specified data to write buffer. If write buffer is full, buffered data will be sent to detination host.
            </summary>
            <param name="data">Data to queue.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Write(System.Byte[])">
            <summary>
            Queues specified data to write buffer. If write buffer is full, buffered data will be sent to detination host.
            </summary>
            <param name="data">Data to queue.</param>
        </member>
        <member name="T:LumiSoft.Net.BindInfoProtocol">
            <summary>
            Specifies BindInfo protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BindInfoProtocol.TCP">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BindInfoProtocol.UDP">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType">
            <summary>
            Specifies SIP status code type. Defined in rfc 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.Provisional">
            <summary>
            Request received, continuing to process the request. 1xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.Success">
            <summary>
            Action was successfully received, understood, and accepted. 2xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.Redirection">
            <summary>
            Request must be redirected(forwarded). 3xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.RequestFailure">
            <summary>
            Request contains bad syntax or cannot be fulfilled at this server. 4xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.ServerFailure">
            <summary>
            Server failed to fulfill a valid request. 5xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.GlobalFailure">
            <summary>
            Request cannot be fulfilled at any server. 6xx status code.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventArgs">
            <summary>
            This class provides data for SIP_ProxyCore.Authenticate event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventArgs.#ctor(LumiSoft.Net.AUTH.Auth_HttpDigest)">
            <summary>
            Default constructor.
            </summary>
            <param name="auth">Authentication context.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventArgs.AuthContext">
            <summary>
            Gets authentication context.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventArgs.Authenticated">
            <summary>
            Gets or sets if specified request is authenticated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ReferSub">
            <summary>
            Implements SIP "refer-sub" value. Defined in RFC 4488.
            </summary>
            <remarks>
            <code>
            RFC 4488 Syntax:
                Refer-Sub       = refer-sub-value *(SEMI exten)
                refer-sub-value = "true" / "false"
                exten           = generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Refer-Sub value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.Parse(System.String)">
            <summary>
            Parses "Refer-Sub" from specified value.
            </summary>
            <param name="value">SIP "Refer-Sub" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Refer-Sub" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.ToStringValue">
            <summary>
            Converts this to valid "contact-param" value.
            </summary>
            <returns>Returns "contact-param" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.Value">
            <summary>
            Gets or sets refer-sub-value value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_RCValue">
            <summary>
            Implements SIP "rc-value" value. Defined in RFC 3841.
            </summary>
            <remarks>
            <code>
            RFC 3841 Syntax:
                rc-value  =  "*" *(SEMI rc-params)
                rc-params =  feature-param / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RCValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RCValue.Parse(System.String)">
            <summary>
            Parses "rc-value" from specified value.
            </summary>
            <param name="value">SIP "rc-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RCValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "rc-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RCValue.ToStringValue">
            <summary>
            Converts this to valid "rc-value" value.
            </summary>
            <returns>Returns "rc-value" value.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition">
            <summary>
            Implements SIP "Content-Disposition" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                Content-Disposition  = disp-type *( SEMI disp-param )
                disp-type            = "render" / "session" / "icon" / "alert" / disp-extension-token
                disp-param           = handling-param / generic-param
                handling-param       = "handling" EQUAL ( "optional" / "required" / other-handling )
                other-handling       = token
                disp-extension-token = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP SIP_t_ContentDisposition value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.Parse(System.String)">
            <summary>
            Parses "Content-Disposition" from specified value.
            </summary>
            <param name="value">SIP "Content-Disposition" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Content-Disposition" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.ToStringValue">
            <summary>
            Converts this to valid "Content-Disposition" value.
            </summary>
            <returns>Returns "Content-Disposition" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.DispositionType">
            <summary>
            Gets or sets disposition type. Known values: "render","session","icon","alert".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.Handling">
            <summary>
            Gets or sets 'handling' parameter value. Value null means not specified. 
            Known value: "optional","required".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.DeliveryAddress">
            <summary>
            vCard delivery address implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddress.#ctor(LumiSoft.Net.Mime.vCard.Item,LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="item">Owner vCard item.</param>
            <param name="addressType">Address type. Note: This value can be flagged value !</param>
            <param name="postOfficeAddress">Post office address.</param>
            <param name="extendedAddress">Extended address.</param>
            <param name="street">Street name.</param>
            <param name="locality">Locality(city).</param>
            <param name="region">Region.</param>
            <param name="postalCode">Postal code.</param>
            <param name="country">Country.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddress.Changed">
            <summary>
            This method is called when some property has changed, we need to update underlaying vCard item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddress.Parse(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Parses delivery address from vCard ADR structure string.
            </summary>
            <param name="item">vCard ADR item.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddress.AddressTypeToString(LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum)">
            <summary>
            Converts DeliveryAddressType_enum to vCard item parameters string.
            </summary>
            <param name="type">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Item">
            <summary>
            Gets underlaying vCrad item.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.AddressType">
            <summary>
            Gets or sets address type. Note: This property can be flagged value !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.PostOfficeAddress">
            <summary>
            Gets or sets post office address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.ExtendedAddress">
            <summary>
            Gests or sets extended address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Street">
            <summary>
            Gets or sets street.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Locality">
            <summary>
            Gets or sets locality(city).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Region">
            <summary>
            Gets or sets region.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.PostalCode">
            <summary>
            Gets or sets postal code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Country">
            <summary>
            Gets or sets country.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.Mime">
            <summary>
            Class for creating,parsing,modifing rfc 2822 mime messages.
            </summary>
            <remarks>
            <code>
            
            Message examples:
            
            <B>Simple message:</B>
            
            //--- Beginning of message
            From: sender@domain.com
            To: recipient@domain.com
            Subject: Message subject.
            Content-Type: text/plain
            
            Message body text. Bla blaa
            blaa,blaa.
            //--- End of message
            
            
            In simple message MainEntity is whole message.
            
            <B>Message with attachments:</B>
            
            //--- Beginning of message
            From: sender@domain.com
            To: recipient@domain.com
            Subject: Message subject.
            Content-Type: multipart/mixed; boundary="multipart_mixed"
            
            --multipart_mixed	/* text entity */
            Content-Type: text/plain
            
            Message body text. Bla blaa
            blaa,blaa.	
            --multipart_mixed	/* attachment entity */
            Content-Type: application/octet-stream
            
            attachment_data
            --multipart_mixed--
            //--- End of message
            
            MainEntity is multipart_mixed entity and text and attachment entities are child entities of MainEntity.
            </code>
            </remarks>
            <example>
            <code>
            // Parsing example:
            Mime m = Mime.Parse("message.eml");
            // Do your stuff with mime
            </code>
            <code>
            // Create simple message with simple way:
            AddressList from = new AddressList();
            from.Add(new MailboxAddress("dispaly name","user@domain.com"));
            AddressList to = new AddressList();
            to.Add(new MailboxAddress("dispaly name","user@domain.com"));
            
            Mime m = Mime.CreateSimple(from,to,"test subject","test body text","");
            </code>
            <code>
            // Creating a new simple message
            Mime m = new Mime();
            MimeEntity mainEntity = m.MainEntity;
            // Force to create From: header field
            mainEntity.From = new AddressList();
            mainEntity.From.Add(new MailboxAddress("dispaly name","user@domain.com"));
            // Force to create To: header field
            mainEntity.To = new AddressList();
            mainEntity.To.Add(new MailboxAddress("dispaly name","user@domain.com"));
            mainEntity.Subject = "subject";
            mainEntity.ContentType = MediaType_enum.Text_plain;
            mainEntity.ContentTransferEncoding = ContentTransferEncoding_enum.QuotedPrintable;
            mainEntity.DataText = "Message body text.";
            
            m.ToFile("message.eml");
            </code>
            <code>
            // Creating message with text and attachments
            Mime m = new Mime();
            MimeEntity mainEntity = m.MainEntity;
            // Force to create From: header field
            mainEntity.From = new AddressList();
            mainEntity.From.Add(new MailboxAddress("dispaly name","user@domain.com"));
            // Force to create To: header field
            mainEntity.To = new AddressList();
            mainEntity.To.Add(new MailboxAddress("dispaly name","user@domain.com"));
            mainEntity.Subject = "subject";
            mainEntity.ContentType = MediaType_enum.Multipart_mixed;
            
            MimeEntity textEntity = mainEntity.ChildEntities.Add();
            textEntity.ContentType = MediaType_enum.Text_plain;
            textEntity.ContentTransferEncoding = ContentTransferEncoding_enum.QuotedPrintable;
            textEntity.DataText = "Message body text.";
            
            MimeEntity attachmentEntity = mainEntity.ChildEntities.Add();
            attachmentEntity.ContentType = MediaType_enum.Application_octet_stream;
            attachmentEntity.ContentDisposition = ContentDisposition_enum.Attachment;
            attachmentEntity.ContentTransferEncoding = ContentTransferEncoding_enum.Base64;
            attachmentEntity.ContentDisposition_FileName = "yourfile.xxx";
            attachmentEntity.DataFromFile("yourfile.xxx");
            // or
            attachmentEntity.Data = your_attachment_data;
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.Byte[])">
            <summary>
            Parses mime message from byte[] data.
            </summary>
            <param name="data">Mime message data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.String)">
            <summary>
            Parses mime message from file.
            </summary>
            <param name="fileName">Mime message file.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.IO.Stream)">
            <summary>
            Parses mime message from stream.
            </summary>
            <param name="stream">Mime message stream.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.CreateSimple(LumiSoft.Net.Mime.AddressList,LumiSoft.Net.Mime.AddressList,System.String,System.String,System.String)">
            <summary>
            Creates simple mime message.
            </summary>
            <param name="from">Header field From: value.</param>
            <param name="to">Header field To: value.</param>
            <param name="subject">Header field Subject: value.</param>
            <param name="bodyText">Body text of message. NOTE: Pass null is body text isn't wanted.</param>
            <param name="bodyHtml">Body HTML text of message. NOTE: Pass null is body HTML text isn't wanted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.CreateSimple(LumiSoft.Net.Mime.AddressList,LumiSoft.Net.Mime.AddressList,System.String,System.String,System.String,System.String[])">
            <summary>
            Creates simple mime message with attachments.
            </summary>
            <param name="from">Header field From: value.</param>
            <param name="to">Header field To: value.</param>
            <param name="subject">Header field Subject: value.</param>
            <param name="bodyText">Body text of message. NOTE: Pass null is body text isn't wanted.</param>
            <param name="bodyHtml">Body HTML text of message. NOTE: Pass null is body HTML text isn't wanted.</param>
            <param name="attachmentFileNames">Attachment file names. Pass null if no attachments. NOTE: File name must contain full path to file, for example: c:\test.pdf.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToStringData">
            <summary>
            Stores mime message to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToByteData">
            <summary>
            Stores mime message to byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToFile(System.String)">
            <summary>
            Stores mime message to specified file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToStream(System.IO.Stream)">
            <summary>
            Stores mime message to specified stream. Stream position stays where mime writing ends.
            </summary>
            <param name="storeStream">Stream where to store mime message.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.GetEntities(LumiSoft.Net.Mime.MimeEntityCollection,System.Collections.Generic.List{LumiSoft.Net.Mime.MimeEntity})">
            <summary>
            Gets mime entities, including nested entries. 
            </summary>
            <param name="entities"></param>
            <param name="allEntries"></param>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.MainEntity">
            <summary>
            Message main(top-level) entity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.MimeEntities">
            <summary>
            Gets all mime entities contained in message, including child entities.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.Attachments">
            <summary>
            Gets attachment entities. Entity is considered as attachmnet if:<p/>
                *) Content-Disposition: attachment (RFC 2822 message)<p/>
                *) Content-Disposition: filename = "" is specified  (RFC 2822 message)<p/>
                *) Content-Type: name = "" is specified  (old RFC 822 message)<p/>
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.BodyText">
            <summary>
            Gets message body text. Returns null if no body text specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.BodyHtml">
            <summary>
            Gets message body html. Returns null if no body html text specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.Write_EventArgs">
            <summary>
            This class provides data for BeginWriteCallback delegate.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Write_EventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.Write_EventArgs.Exception">
            <summary>
            Gets exception happened during write or null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.WriteStream_EventArgs">
            <summary>
            This class provides data to asynchronous write from stream methods callback.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.WriteStream_EventArgs.#ctor(System.Exception,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
            <param name="stream">Stream which data was written.</param>
            <param name="countReaded">Number of bytes readed from <b>stream</b>.</param>
            <param name="countWritten">Number of bytes written to source stream.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.Exception">
            <summary>
            Gets exception happened during write or null if operation was successfull.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.Stream">
            <summary>
            Gets stream what data was written.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.CountReaded">
            <summary>
            Gets number of bytes readed from <b>Stream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.CountWritten">
            <summary>
            Gets number of bytes written to source stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SizeExceededAction">
            <summary>
            Specifies action what is done if requested action exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IO.SizeExceededAction.ThrowException">
            <summary>
            Throws exception at once when maximum size exceeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IO.SizeExceededAction.JunkAndThrowException">
            <summary>
            Junks all data what exceeds maximum allowed size and after requested operation completes,
            throws exception.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs">
            <summary>
            Provides data for SetFolderACL event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String,LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType,LumiSoft.Net.IMAP.IMAP_ACL_Flags)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="folderName">Folder name which ACL to set.</param>
            <param name="userName">User name which ACL to set.</param>
            <param name="flagsSetType">Specifies how flags must be stored.</param>
            <param name="aclFlags">Flags which to store.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.Folder">
            <summary>
            Gets folder name which ACL to set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.UserName">
            <summary>
            Gets user name which ACL to set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.FlagsSetType">
            <summary>
            Gets how ACL flags must be stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.ACL">
            <summary>
            Gets ACL flags. NOTE: See this.FlagsSetType how to store flags.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_PTR">
            <summary>
            PTR record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_PTR.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="domainName">DomainName.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_PTR.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_PTR.DomainName">
            <summary>
            Gets domain name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_NS">
            <summary>
            NS record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_NS.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="nameServer">Name server name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_NS.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_NS.NameServer">
            <summary>
            Gets name server name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota">
            <summary>
            Provides data for GetUserQuota event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.MaxMailboxSize">
            <summary>
            Gets or sets maximum mailbox size.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.MailboxSize">
            <summary>
            Gets or sets current mailbox size.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransactionState">
            <summary>
            This enum holds SIP transaction states. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_TransactionState.WaitingToStart">
            <summary>
            Client transaction waits <b>Start</b> method to be called.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_TransactionState.Calling">
            <summary>
            Calling to recipient. This is used only by INVITE client transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_TransactionState.Trying">
            <summary>
            This is transaction initial state. Used only in Non-INVITE transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_TransactionState.Proceeding">
            <summary>
            This is INVITE server transaction initial state. Used only in INVITE server transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_TransactionState.Completed">
            <summary>
            Transaction has got final response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_TransactionState.Confirmed">
            <summary>
            Transation has got ACK from request maker. This is used only by INVITE server transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_TransactionState.Terminated">
            <summary>
            Transaction has terminated and waits disposing.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_TransactionState.Disposed">
            <summary>
            Transaction has disposed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ResponseSentEventArgs">
            <summary>
            This class provides data for <b>SIP_ServerTransaction.ResponseSent</b> method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ResponseSentEventArgs.#ctor(LumiSoft.Net.SIP.Stack.SIP_ServerTransaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Default constructor.
            </summary>
            <param name="transaction">Server transaction.</param>
            <param name="response">SIP response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arguments is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ResponseSentEventArgs.ServerTransaction">
            <summary>
            Gets server transaction which sent response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ResponseSentEventArgs.Response">
            <summary>
            Gets response which was sent.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet_RR">
            <summary>
            This class represents RR: Receiver Report RTCP Packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_RR.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_RR.#ctor(System.UInt32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ssrc">SSRC of this packet sender.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_RR.ParseInternal(System.Byte[],System.Int32@)">
            <summary>
            Parses receiver report(RR) from byte buffer.
            </summary>
            <param name="buffer">Buffer wihich contains receiver report.</param>
            <param name="offset">Offset in buufer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_RR.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores receiver report(RR) packet to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store RR packet.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_RR.ToString">
            <summary>
            Returns RR packet as string.
            </summary>
            <returns>Returns RR packet as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_RR.Version">
            <summary>
            Gets RTCP version.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_RR.Type">
            <summary>
            Gets RTCP packet type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_RR.SSRC">
            <summary>
            Gets or sets sender(local reporting) synchronization source identifier.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_RR.ReportBlocks">
            <summary>
            Gets reports blocks.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_RR.Size">
            <summary>
            Gets number of bytes needed for this packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_ReceiveStreamEventArgs">
            <summary>
            This method provides data for RTP receive stream related events and methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ReceiveStreamEventArgs.#ctor(LumiSoft.Net.RTP.RTP_ReceiveStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">RTP stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ReceiveStreamEventArgs.Stream">
            <summary>
            Gets RTP stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Participant_Remote">
            <summary>
            Implements RTP <b>participant</b>. Defined in RFC 3550.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant_Remote.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="cname">Canonical name of participant. For example: john.doe@domain.com-randomTag.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cname</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant_Remote.ToString">
            <summary>
            Returns participant as string.
            </summary>
            <returns>Returns participant as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant_Remote.Update(LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk)">
            <summary>
            Updates participant data from SDES items.
            </summary>
            <param name="sdes">SDES chunk.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sdes</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant_Remote.OnChanged">
            <summary>
            Raises <b>Changed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Remote.Name">
            <summary>
            Gets the real name, eg. "John Doe". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Remote.Email">
            <summary>
            Gets email address. For example "John.Doe@example.com". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Remote.Phone">
            <summary>
            Gets phone number. For example "+1 908 555 1212". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Remote.Location">
            <summary>
            Gets location string. It may be geographic address or for example chat room name.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Remote.Tool">
            <summary>
            Gets streaming application name/version.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Remote.Note">
            <summary>
            Gets note text. The NOTE item is intended for transient messages describing the current state
            of the source, e.g., "on the phone, can't talk". Value null means not specified.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Participant_Remote.Changed">
            <summary>
            Is raised when participant data changed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_EntityCollection">
            <summary>
            Represents MIME child entity collection in multipart/xxx entity.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Add(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Adds specified MIME enity to the collection.
            </summary>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Insert(System.Int32,LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Inserts a new MIME entity into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the MIME entity.</param>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Remove(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Removes specified MIME entity from the collection.
            </summary>
            <param name="entity">MIME entity.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Remove(System.Int32)">
            <summary>
            Removes MIME entity at the specified index from the collection.
            </summary>
            <param name="index">The index of the MIME entity to remove.</param>
            <exception cref="T:System.IndexOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.Contains(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Gets if the collection contains specified MIME entity.
            </summary>
            <param name="entity">MIME entity.</param>
            <returns>Returns true if the specified MIME entity exists in the collection, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>entity</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.SetModified(System.Boolean)">
            <summary>
            Sets IsModified property value.
            </summary>
            <param name="isModified">Modified flag.</param>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_EntityCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_EntityCollection.IsModified">
            <summary>
            Gets if enity collection has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_EntityCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_EntityCollection.Item(System.Int32)">
            <summary>
            Gets MIME entity at the specified index.
            </summary>
            <param name="index">MIME entity zero-based index.</param>
            <returns>Returns MIME entity.</returns>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes">
            <summary>
            This class holds well known Content-Type header field media types. For example: text/plain, application/octet-stream.
            Full IANA registered list can be found from: http://www.iana.org/assignments/media-types.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Application">
            <summary>
            This class holds well-known application/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.octet_stream">
            <summary>
            "application/octet-stream". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.pdf">
            <summary>
            "application/pdf". Defined in RFC 3778.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.sdp">
            <summary>
            "application/sdp". Defined in RFC 4566.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.xml">
            <summary>
            "application/xml". Defined RFC 3023.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Application.zip">
            <summary>
            "application/zip". Defined in RFC 4566.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Image">
            <summary>
            This class holds well-known image/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Image.gif">
            <summary>
            "image/gif".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Image.jpeg">
            <summary>
            "image/jpeg".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Image.tiff">
            <summary>
            "image/tiff".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Text">
            <summary>
            This class holds well-known text/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.calendar">
            <summary>
            "text/calendar". Defined in RFC 2445.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.css">
            <summary>
            "text/css". Defined in RFC 2854
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.html">
            <summary>
            "text/html". Defined in RFC 2854.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.plain">
            <summary>
            "text/plain". Defined in RFC 2646,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.rfc822_headers">
            <summary>
            "text/rfc822-headers". Defined in RFC 1892.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.richtext">
            <summary>
            "text/richtext". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Text.xml">
            <summary>
            "text/xml". Defined in RFC 3023.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart">
            <summary>
            This class holds well-known multipart/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.alternative">
            <summary>
            "multipart/alternative". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.digest">
            <summary>
            "multipart/digest". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.encrypted">
            <summary>
            "multipart/digest". Defined in RFC 1847.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.form_data">
            <summary>
            "multipart/form-data". Defined in RFC 2388.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.mixed">
            <summary>
            "multipart/mixed". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.parallel">
            <summary>
            "multipart/parallel". Defined in RFC 2045,2046.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.related">
            <summary>
            "multipart/related". Defined in RFC 2387.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.report">
            <summary>
            "multipart/report". Defined in RFC 1892.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.signed">
            <summary>
            "multipart/signed". Defined in RFC 1847.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Multipart.voice_message">
            <summary>
            "multipart/voice-message". Defined in RFC 2421,2423.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_MediaTypes.Message">
            <summary>
            This class holds well-known message/xxx media types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Message.rfc822">
            <summary>
            "message/rfc822". 
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Message.disposition_notification">
            <summary>
            "message/disposition-notification". 
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_MediaTypes.Message.delivery_status">
            <summary>
            "message/delivery-status". Defined in RFC 3464.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.HostEndPoint">
            <summary>
            Represents a network endpoint as an host(name or IP address) and a port number.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">The port number associated with the host. Value -1 means port not specified.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.#ctor(System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="endPoint">Host IP end point.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>endPoint</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.Parse(System.String)">
            <summary>
            Parses HostEndPoint from the specified string.
            </summary>
            <param name="value">HostEndPoint value.</param>
            <returns>Returns parsed HostEndPoint value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.Parse(System.String,System.Int32)">
            <summary>
            Parses HostEndPoint from the specified string.
            </summary>
            <param name="value">HostEndPoint value.</param>
            <param name="defaultPort">If port isn't specified in value, specified port will be used.</param>
            <returns>Returns parsed HostEndPoint value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.HostEndPoint.ToString">
            <summary>
            Returns HostEndPoint as string.
            </summary>
            <returns>Returns HostEndPoint as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.IsIPAddress">
            <summary>
            Gets if <b>Host</b> is IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.Host">
            <summary>
            Gets host name or IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.HostEndPoint.Port">
            <summary>
            Gets the port number of the endpoint. Value -1 means port not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.OPCODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.QUERY">
            <summary>
            A standard query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.IQUERY">
            <summary>
            An inverse query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.STATUS">
            <summary>
            A server status request.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.EventArgs`1">
            <summary>
            This class universal event arguments for transporting single value.
            </summary>
            <typeparam name="T">Event data.</typeparam>
        </member>
        <member name="M:LumiSoft.Net.EventArgs`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Event data.</param>
        </member>
        <member name="P:LumiSoft.Net.EventArgs`1.Value">
            <summary>
            Gets event data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WebDav.WebDav_PropStat">
            <summary>
            This class represents WebDav 'DAV:propstat' element. Defined in RFC 4918 14.22.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_PropStat.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_PropStat.Parse(System.Xml.XmlNode)">
            <summary>
            Parses WebDav_PropStat from 'DAV:propstat' element.
            </summary>
            <param name="propstatNode">The 'DAV:propstat' element</param>
            <returns>Returns DAV propstat.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when when <b>propstatNode</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when there are any parsing error.</exception>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_PropStat.Status">
            <summary>
            Gets property HTTP status.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_PropStat.ResponseDescription">
            <summary>
            Gets human-readable status property description.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_PropStat.Prop">
            <summary>
            Gets 'prop' element value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WebDav.WebDav_MultiStatus">
            <summary>
            This class represent WeDav 'DAV:multistatus' element. Defined RFC 4918 13.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_MultiStatus.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_MultiStatus.Parse(System.IO.Stream)">
            <summary>
            Parses WebDav_MultiResponse from 'DAV:multistatus' element.
            </summary>
            <param name="stream">DAV:multistatus response stream.</param>
            <returns>Returns DAV multistatus.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when there are any parsing error.</exception>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_MultiStatus.Responses">
            <summary>
            Gets responses collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ProxyHandler">
            <summary>
            This base class for SIP proxy request handlers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyHandler.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyHandler.ProcessRequest(LumiSoft.Net.SIP.Proxy.SIP_RequestContext)">
            <summary>
            This method is called when new SIP request received.
            </summary>
            <param name="requestContext">SIP proxy request context.</param>
            <returns>Returns true if request handled by this method, otherwise false.</returns>
            <remarks>
            This method is called when SIP proxy receives new out of transaction request.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyHandler.IsLocalUri">
            <summary>
            Gets if the specified URI is local URI.
            </summary>
            <returns>Returns true if the specified uri is local URI.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use this handler.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyHandler.Tag">
            <summary>
            Gets or stets user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_MailboxList">
            <summary>
            This class represent generic <b>mailbox-list</b> header fields. For example: From header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header       = "FiledName:" mailbox-list CRLF
                mailbox-list =  (mailbox *("," mailbox)) / obs-mbox-list
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_MailboxList.#ctor(System.String,LumiSoft.Net.Mail.Mail_t_MailboxList)">
            <summary>
            Default constructor.
            </summary>
            <param name="filedName">Header field name. For example: "To".</param>
            <param name="values">Addresses collection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>values</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_MailboxList.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_MailboxList.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_MailboxList.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_MailboxList.Name">
            <summary>
            Gets header field name. For example "From".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_MailboxList.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TextUtils">
            <summary>
            This class provides usefull text methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.QuoteString(System.String)">
            <summary>
            Qoutes and escapes fishy(\") chars.
            </summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.UnQuoteString(System.String)">
            <summary>
            Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.
            </summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.EscapeString(System.String,System.Char[])">
            <summary>
            Escapes specified chars in the specified string.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.UnEscapeString(System.String)">
            <summary>
            Unescapes all escaped chars.
            </summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified char. The specified char in quoted string is skipped.
            Returns -1 if specified char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitString(System.String,System.Char)">
            <summary>
            Splits string into string arrays.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.IsToken(System.String)">
            <summary>
            Gets if specified string is valid "token" value.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified string value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Message">
            <summary>
            Session Description Protocol. Defined in RFC 4566.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.Parse(System.String)">
            <summary>
            Parses SDP from raw data.
            </summary>
            <param name="data">Raw SDP data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.ToFile(System.String)">
            <summary>
            Stores SDP data to specified file. Note: official suggested file extention is .sdp.
            </summary>
            <param name="fileName">File name with path where to store SDP data.</param>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Message.ToStringData">
            <summary>
            Returns SDP as string data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Version">
            <summary>
            Gets or sets version of the Session Description Protocol.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Originator">
            <summary>
            Gets originator and session identifier.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.SessionName">
            <summary>
            Gets or sets textual session name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.SessionDescription">
            <summary>
            Gets or sets textual information about the session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Uri">
            <summary>
            Gets or sets Uniform Resource Identifier. The URI should be a pointer to additional information 
            about the session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.ConnectionData">
            <summary>
            Gets or sets connection data. This is optional value if each media part specifies this value,
            null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Times">
            <summary>
            Gets start and stop times for a session. If Count = 0, t field not written dot SDP data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.RepeatTimes">
            <summary>
            Gets or sets repeat times for a session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Attributes">
            <summary>
            Gets attributes collection. This is optional value, Count == 0 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Message.Media">
            <summary>
            Gets media parts collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag">
            <summary>
            Implements SIP "language-tag" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                language-tag = primary-tag *( "-" subtag )
                primary-tag  = 1*8ALPHA
                subtag       = 1*8ALPHA
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.Parse(System.String)">
            <summary>
            Parses "language-tag" from specified value.
            </summary>
            <param name="value">SIP "language-tag" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "language-tag" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.ToStringValue">
            <summary>
            Converts this to valid "language-tag" value.
            </summary>
            <returns>Returns "language-tag" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.LanguageTag">
            <summary>
            Gets or sets language tag.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Language">
            <summary>
            Implements SIP "language" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                language       = language-range *(SEMI accept-param)
                language-range = ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
                accept-param   = ("q" EQUAL qvalue) / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Language.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Language.Parse(System.String)">
            <summary>
            Parses "language" from specified value.
            </summary>
            <param name="value">SIP "language" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Language.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "language" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Language.ToStringValue">
            <summary>
            Converts this to valid "language" value.
            </summary>
            <returns>Restuns "language" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Language.LanguageRange">
            <summary>
            Gets or sets language range. Value *(STAR) means all languages.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Language.QValue">
            <summary>
            Gets or sets qvalue parameter. Targets are processed from highest qvalue to lowest. 
            This value must be between 0.0 and 1.0. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketCallBack">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketCallBackResult">
            <summary>
            Asynchronous command execute result.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.Ok">
            <summary>
            Operation was successfull.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.LengthExceeded">
            <summary>
            Exceeded maximum allowed size.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.SocketClosed">
            <summary>
            Connected client closed connection.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.Exception">
            <summary>
            Exception happened.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ACValue">
            <summary>
            Implements SIP "ac-value" value. Defined in RFC 3841.
            </summary>
            <remarks>
            <code>
            RFC 3841 Syntax:
                ac-value       = "*" *(SEMI ac-params)
                ac-params      = feature-param / req-param / explicit-param / generic-param
                                 ;;feature param from RFC 3840
                                 ;;generic-param from RFC 3261
                req-param      = "require"
                explicit-param = "explicit"
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP 'ac-value' value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.Parse(System.String)">
            <summary>
            Parses "ac-value" from specified value.
            </summary>
            <param name="value">SIP "ac-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "ac-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.ToStringValue">
            <summary>
            Converts this to valid "ac-value" value.
            </summary>
            <returns>Returns "ac-value" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ACValue.Require">
            <summary>
            Gets or sets 'require' parameter value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ACValue.Explicit">
            <summary>
            Gets or sets 'explicit' parameter value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.ItemCollection">
            <summary>
            vCard item collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds new vCard item to the collection.
            </summary>
            <param name="name">Item name.</param>
            <param name="parametes">Item parameters.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Remove(System.String)">
            <summary>
            Removes all items with the specified name.
            </summary>
            <param name="name">Item name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Remove(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Clear">
            <summary>
            Clears all items in the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.GetFirst(System.String)">
            <summary>
            Gets first item with specified name. Returns null if specified item doesn't exists.
            </summary>
            <param name="name">Item name. Name compare is case-insensitive.</param>
            <returns>Returns first item with specified name or null if specified item doesn't exists.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Get(System.String)">
            <summary>
            Gets items with specified name.
            </summary>
            <param name="name">Item name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.SetDecodedValue(System.String,System.String)">
            <summary>
            Sets first item with specified value.  If item doesn't exist, item will be appended to the end.
            If value is null, all items with specified name will be removed.
            Value is encoed as needed and specified item.ParametersString will be updated accordingly.
            </summary>
            <param name="name">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.SetValue(System.String,System.String)">
            <summary>
            Sets first item with specified encoded value.  If item doesn't exist, item will be appended to the end.
            If value is null, all items with specified name will be removed.
            </summary>
            <param name="name">Item name.</param>
            <param name="value">Item encoded value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.SetValue(System.String,System.String,System.String)">
            <summary>
            Sets first item with specified name encoded value.  If item doesn't exist, item will be appended to the end.
            If value is null, all items with specified name will be removed.
            </summary>
            <param name="name">Item name.</param>
            <param name="parametes">Item parameters.</param>
            <param name="value">Item encoded value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.ItemCollection.Count">
            <summary>
            Gets number of vCard items in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.ParametizedHeaderField">
            <summary>
            Parametized header field. 
            <p/>
            Syntax: value;parameterName=parameterValue;parameterName=parameterValue;... .
            Example: (Content-Type:) text/html; charset="ascii".
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.#ctor(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Default constructor.
            </summary>
            <param name="headerField">Source header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.ParseParameters">
            <summary>
            Parses parameters from header field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.StoreParameters(System.String,System.Collections.Hashtable)">
            <summary>
            Stores parameters to header field Value property.
            </summary>
            <param name="value"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Parameters">
            <summary>
            Gets header field parameters.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeEntityCollection">
            <summary>
            Mime entity collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.#ctor(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Default constructor.
            </summary>
            <param name="ownerEntity">Mime entity what owns this collection.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Add">
            <summary>
            Creates a new mime entity to the end of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Add(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Adds specified mime entity to the end of the collection.
            </summary>
            <param name="entity">Mime entity to add to the collection.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Insert(System.Int32,LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Inserts a new mime entity into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the mime entity.</param>
            <param name="entity">Mime entity.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Remove(System.Int32)">
            <summary>
            Removes mime entity at the specified index from the collection.
            </summary>
            <param name="index">Index of mime entity to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Remove(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Removes specified mime entity from the collection.
            </summary>
            <param name="entity">Mime entity to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Clear">
            <summary>
            Clears the collection of all mome entities.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Contains(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Gets if collection contains specified mime entity.
            </summary>
            <param name="entity">Mime entity.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntityCollection.Item(System.Int32)">
            <summary>
            Gets mime entity at specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntityCollection.Count">
            <summary>
            Gets mime entities count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SearchKey">
            <summary>
            IMAP search key (RFC 3501 6.4.4 SEARCH Command).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.#ctor(System.String,System.Object)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses one search key from current position. Returns null if there isn't any search key left.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.IsHeaderNeeded">
            <summary>
            Gets if message Header is needed for matching.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.IsBodyTextNeeded">
            <summary>
            Gets if message body text is needed for matching.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.Match(System.Int64,System.Int64,System.Int64,System.DateTime,LumiSoft.Net.IMAP.IMAP_MessageFlags,LumiSoft.Net.Mail.Mail_Message,System.String)">
            <summary>
            Gets if specified message matches with this class search-key.
            </summary>
            <param name="no">IMAP message sequence number.</param>
            <param name="uid">IMAP message UID.</param>
            <param name="size">IMAP message size in bytes.</param>
            <param name="internalDate">IMAP message INTERNALDATE (dateTime when server stored message).</param>
            <param name="flags">IMAP message flags.</param>
            <param name="message">Mime message main header only.</param>
            <param name="bodyText">Message body text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.ReadString(LumiSoft.Net.StringReader)">
            <summary>
            Reads search-key &lt;string&gt; value.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Folders">
            <summary>
            IMAP folders collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folders.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="referenceName">Folder Path. Eg. Inbox\.</param>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folders.Add(System.String,System.Boolean)">
            <summary>
            Adds folder to folders list.
            </summary>
            <param name="folder">Full path to folder, path separator = '/'. Eg. Inbox/myFolder .</param>
            <param name="selectable">Gets or sets if folder is selectable(SELECT command can select this folder).</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folders.AstericMatch(System.String,System.String)">
            <summary>
            Checks if specified text matches to specified asteric pattern.
            </summary>
            <param name="pattern">Asteric pattern. Foe example: *xxx,*xxx*,xx*aa*xx, ... .</param>
            <param name="text">Text to match.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folders.FolderMatches(System.String,System.String)">
            <summary>
            Gets if folder matches to specified folder pattern.
            </summary>
            <param name="folderPattern">Folder pattern. * and % between path separators have same meaning (asteric pattern). 
            If % is at the end, then matches only last folder child folders and not child folder child folders.</param>
            <param name="folder">Folder name with full path.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Folders.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Folders.Folders">
            <summary>
            Gest list of IMAP folders.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_ACL_Flags">
            <summary>
            IMAP ACL(access control list) rights.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.None">
            <summary>
            No permissions at all.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.l">
            <summary>
            Lookup (mailbox is visible to LIST/LSUB commands).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.r">
            <summary>
            Read (SELECT the mailbox, perform CHECK, FETCH, PARTIAL,SEARCH, COPY from mailbox).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.s">
            <summary>
            Keep seen/unseen information across sessions (STORE SEEN flag).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.w">
            <summary>
            Write (STORE flags other than SEEN and DELETED).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.i">
            <summary>
            Insert (perform APPEND, COPY into mailbox).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.p">
            <summary>
            Post (send mail to submission address for mailbox,not enforced by IMAP4 itself).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.c">
            <summary>
            Create (CREATE new sub-mailboxes in any implementation-defined hierarchy).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.d">
            <summary>
            Delete (STORE DELETED flag, perform EXPUNGE).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.a">
            <summary>
            Administer (perform SETACL).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.All">
            <summary>
            All permissions
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsServerResponse">
            <summary>
            This class represents dns server response.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetARecords">
            <summary>
            Gets IPv4 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetNSRecords">
            <summary>
            Gets name server records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetCNAMERecords">
            <summary>
            Gets CNAME records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetSOARecords">
            <summary>
            Gets SOA records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetPTRRecords">
            <summary>
            Gets PTR records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetHINFORecords">
            <summary>
            Gets HINFO records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetMXRecords">
            <summary>
            Gets MX records.(MX records are sorted by preference, lower array element is prefered)
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetTXTRecords">
            <summary>
            Gets text records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetAAAARecords">
            <summary>
            Gets IPv6 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetSRVRecords">
            <summary>
            Gets SRV resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetNAPTRRecords">
            <summary>
            Gets NAPTR resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.FilterRecordsX(System.Collections.Generic.List{LumiSoft.Net.Dns.Client.DNS_rr_base},LumiSoft.Net.Dns.Client.QTYPE)">
            <summary>
            Filters out specified type of records from answer.
            </summary>
            <param name="answers"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.ConnectionOk">
            <summary>
            Gets if connection to dns server was successful.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.ResponseCode">
            <summary>
            Gets dns server response code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AllAnswers">
            <summary>
            Gets all resource records returned by server (answer records section + authority records section + additional records section). 
            NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.Answers">
            <summary>
            Gets dns server returned answers. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
            <code>
            // NOTE: DNS server may return diffrent record types even if you query MX.
            //       For example you query lumisoft.ee MX and server may response:	
            //		 1) MX - mail.lumisoft.ee
            //		 2) A  - lumisoft.ee
            // 
            //       Before casting to right record type, see what type record is !
            			
            
            foreach(DnsRecordBase record in Answers){
            	// MX record, cast it to MX_Record
            	if(record.RecordType == QTYPE.MX){
            		MX_Record mx = (MX_Record)record;
            	}
            }
            </code>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AuthoritiveAnswers">
            <summary>
            Gets name server resource records in the authority records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AdditionalAnswers">
            <summary>
            Gets resource records in the additional records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo">
            <summary>
            IMAP namespaces info. Defined in RFC 2342.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.#ctor(LumiSoft.Net.IMAP.Client.IMAP_Namespace[],LumiSoft.Net.IMAP.Client.IMAP_Namespace[],LumiSoft.Net.IMAP.Client.IMAP_Namespace[])">
            <summary>
            Default constructor.
            </summary>
            <param name="personalNamespaces">IMAP server "Personal Namespaces".</param>
            <param name="otherUsersNamespaces">IMAP server "Other Users Namespaces".</param>
            <param name="sharedNamespaces">IMAP server "Shared Namespaces".</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.Parse(System.String)">
            <summary>
            Parses namespace info from IMAP NAMESPACE response string.
            </summary>
            <param name="namespaceString">IMAP NAMESPACE response string.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.PersonalNamespaces">
            <summary>
            Gets IMAP server "Personal Namespaces". Returns null if namespace not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.OtherUsersNamespaces">
            <summary>
            Gets IMAP server "Other Users Namespaces". Returns null if namespace not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.SharedNamespaces">
            <summary>
            Gets IMAP server "Shared Namespaces". Returns null if namespace not defined.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.UDP.UDP_ProcessMode">
            <summary>
            This enum specified UDP server packets process mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UDP.UDP_ProcessMode.Sequential">
            <summary>
            UDP packets processed one by one in their receive order.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.UDP.UDP_ProcessMode.Parallel">
            <summary>
            UDP packets proecesses parallel.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SslMode">
            <summary>
            This enum holds SSL modes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.None">
            <summary>
            No SSL is used.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.SSL">
            <summary>
            Connection is SSL.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SslMode.TLS">
            <summary>
            Connection will be switched to SSL with start TLS.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.SMTP_Utils">
            <summary>
            This class provedes SMTP related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.SMTP_Utils.IsValidAddress(System.String)">
            <summary>
            Gets if specified smtp address has valid syntax.
            </summary>
            <param name="address">SMTP address, eg. ivar@lumisoft.ee.</param>
            <returns>Returns ture if address is valid, otherwise false.</returns>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client">
            <summary>
            This class implements SMTP client. Defined in RFC 2821.
            </summary>
            <example>
            Simple way:
            <code>
            /*
             To make this code to work, you need to import following namespaces:
             using LumiSoft.Net.SMTP.Client; 
            */
            
            // You can send any valid SMTP message here, from disk,memory, ... or
            // you can use LumiSoft.Net.Mime mime classes to compose valid SMTP mail message.
            
            // SMTP_Client.QuickSendSmartHost(...
            or
            // SMTP_Client.QuickSend(...
            </code>
            
            Advanced way:
            <code> 
            /*
             To make this code to work, you need to import following namespaces:
             using LumiSoft.Net.SMTP.Client; 
            */
            
            using(SMTP_Client smtp = new SMTP_Client()){
                // If you have registered DNS host name, set it here before connecting.
                // That name will be reported to SMTP server.
                // smtp.LocalHostName = "mail.domain.com";
                
                // You can use SMTP_Client.GetDomainHosts(... to get target receipient SMTP hosts for Connect method.
            	smtp.Connect("hostName",WellKnownPorts.SMTP); 
                // Authenticate if target server requires.
                // smtp.Authenticate("user","password");
                smtp.MailFrom("sender@domain.com");
                // Repeat this for all recipients.
                smtp.RcptTo("to@domain.com");
            
                // Send message to server.
                // You can send any valid SMTP message here, from disk,memory, ... or
                // you can use LumiSoft.Net.Mime mieclasses to compose valid SMTP mail message.
                // smtp.SendMessage(.... .
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.Disconnect">
            <summary>
            Closes connection to SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginNoop(System.AsyncCallback,System.Object)">
            <summary>
            Starts sending NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.EndNoop(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Noop request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.Noop">
            <summary>
            Send NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginStartTLS(System.AsyncCallback,System.Object)">
            <summary>
            Starts switching to SSL.
            </summary>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or is already secure connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.EndStartTLS(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous StartTLS request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.StartTLS">
            <summary>
            Switches SMTP connection to SSL.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or is already secure connection.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginAuthenticate(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts authentication.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or is already authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.EndAuthenticate(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous authentication request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user. Authenticate method chooses strongest possible authentication method supported by server, 
            preference order DIGEST-MD5 -&gt; CRAM-MD5 -&gt; LOGIN.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected or is already authenticated.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginMailFrom(System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Starts sending MAIL FROM: command to SMTP server.
            </summary>
            <param name="from">Sender email address reported to SMTP server.</param>
            <param name="messageSize">Sendable message size in bytes, -1 if message size unknown.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginMailFrom(System.String,System.Int64,LumiSoft.Net.SMTP.SMTP_DSN_Ret,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts sending MAIL FROM: command to SMTP server.
            </summary>
            <param name="from">Sender email address reported to SMTP server.</param>
            <param name="messageSize">Sendable message size in bytes, -1 if message size unknown.</param>
            <param name="ret">Delivery satus notification(DSN) ret value. For more info see RFC 3461.</param>
            <param name="envid">Envelope ID. Value null means not specified. For more info see RFC 3461.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <remarks>Before using <b>ret</b> or <b>envid</b> arguments, check that remote server supports SMTP DSN extention.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.EndMailFrom(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous MailFrom request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.MailFrom(System.String,System.Int64)">
            <summary>
            Sends MAIL FROM: command to SMTP server.
            </summary>
            <param name="from">Sender email address reported to SMTP server.</param>
            <param name="messageSize">Sendable message size in bytes, -1 if message size unknown.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.MailFrom(System.String,System.Int64,LumiSoft.Net.SMTP.SMTP_DSN_Ret,System.String)">
            <summary>
            Sends MAIL FROM: command to SMTP server.
            </summary>
            <param name="from">Sender email address reported to SMTP server.</param>
            <param name="messageSize">Sendable message size in bytes, -1 if message size unknown.</param>
            <param name="ret">Delivery satus notification(DSN) RET value. For more info see RFC 3461.</param>
            <param name="envid">Delivery satus notification(DSN) ENVID value. Value null means not specified. For more info see RFC 3461.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
            <remarks>Before using <b>ret</b> or <b>envid</b> arguments, check that remote server supports SMTP DSN extention.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginRcptTo(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts sending RCPT TO: command to SMTP server.
            </summary>
            <param name="to">Recipient email address.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginRcptTo(System.String,LumiSoft.Net.SMTP.SMTP_DSN_Notify,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts sending RCPT TO: command to SMTP server.
            </summary>
            <param name="to">Recipient email address.</param>
            <param name="notify">Delivery satus notification(DSN) NOTIFY value. For more info see RFC 3461.</param>
            <param name="orcpt">Delivery satus notification(DSN) ORCPT value. Value null means not specified. For more info see RFC 3461.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <remarks>Before using <b>notify</b> or <b>orcpt</b> arguments, check that remote server supports SMTP DSN extention.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.EndRcptTo(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous RcptTo request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.RcptTo(System.String)">
            <summary>
            Sends RCPT TO: command to SMTP server.
            </summary>
            <param name="to">Recipient email address.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.RcptTo(System.String,LumiSoft.Net.SMTP.SMTP_DSN_Notify,System.String)">
            <summary>
            Sends RCPT TO: command to SMTP server.
            </summary>
            <param name="to">Recipient email address.</param>
            <param name="notify">Delivery satus notification(DSN) NOTIFY value. For more info see RFC 3461.</param>
            <param name="orcpt">Delivery satus notification(DSN) ORCPT value. Value null means not specified. For more info see RFC 3461.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
            <remarks>Before using <b>notify</b> or <b>orcpt</b> arguments, check that remote server supports SMTP DSN extention.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginReset(System.AsyncCallback,System.Object)">
            <summary>
            Starts resetting SMTP session, all state data will be deleted.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.EndReset(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous reset request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.Reset">
            <summary>
            Resets SMTP session, all state data will be deleted.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginSendMessage(System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>
            Starts sending specified raw message to SMTP server.
            </summary>
            <param name="message">Message stream. Message will be readed from current stream position and to the end of stream.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous method.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>message</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.EndSendMessage(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous SendMessage request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.SendMessage(System.IO.Stream)">
            <summary>
            Sends specified raw message to SMTP server.
            </summary>
            <param name="message">Message stream. Message will be readed from current stream position and to the end of stream.</param>
            <remarks>The stream must contain data in MIME format, other formats normally are rejected by SMTP server.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>message</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.BeginGetDomainHosts(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts getting specified email domain SMTP hosts.
            </summary>
            <param name="domain">Email domain or email address. For example domain.com or user@domain.com.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous method.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.EndGetDomainHosts(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous BeginGetDomainHosts request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <returns>Returns specified email domain SMTP hosts.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.GetDomainHosts(System.String)">
            <summary>
            Gets specified email domain SMTP hosts. Values are in descending priority order.
            </summary>
            <param name="domain">Domain name. This value can be email address too, then domain parsed automatically.</param>
            <returns>Returns specified email domain SMTP hosts.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.Dns.Client.DNS_ClientException">Is raised when DNS query failure.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.QuickSend(LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified mime message.
            </summary>
            <param name="message">Message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>message</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.QuickSend(LumiSoft.Net.Mail.Mail_Message)">
            <summary>
            Sends specified mime message.
            </summary>
            <param name="message">Message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>message</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.QuickSend(System.String,System.String,System.IO.Stream)">
            <summary>
            Sends message directly to email domain. Domain email sever resolve order: MX recordds -&gt; A reords if no MX.
            </summary>
            <param name="from">Sender email what is reported to SMTP server.</param>
            <param name="to">Recipient email.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>from</b>,<b>to</b> or <b>message</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.QuickSend(System.String,System.String,System.String,System.IO.Stream)">
            <summary>
            Sends message directly to email domain. Domain email sever resolve order: MX recordds -&gt; A reords if no MX.
            </summary>
            <param name="localHost">Host name which is reported to SMTP server.</param>
            <param name="from">Sender email what is reported to SMTP server.</param>
            <param name="to">Recipient email.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>from</b>,<b>to</b> or <b>message</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.QuickSendSmartHost(System.String,System.Int32,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="from">Sender email what is reported to SMTP server.</param>
            <param name="to">Recipients email addresses.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b>,<b>from</b>,<b>to</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.QuickSendSmartHost(System.String,System.Int32,System.Boolean,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="ssl">Specifies if connected via SSL.</param>
            <param name="from">Sender email what is reported to SMTP server.</param>
            <param name="to">Recipients email addresses.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b>,<b>from</b>,<b>to</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.QuickSendSmartHost(System.String,System.String,System.Int32,System.Boolean,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="localHost">Host name which is reported to SMTP server.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="ssl">Specifies if connected via SSL.</param>
            <param name="from">Sender email what is reported to SMTP server.</param>
            <param name="to">Recipients email addresses.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b>,<b>from</b>,<b>to</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_Client.QuickSendSmartHost(System.String,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="localHost">Host name which is reported to SMTP server.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="ssl">Specifies if connected via SSL.</param>
            <param name="userName">SMTP server user name. This value may be null, then authentication not used.</param>
            <param name="password">SMTP server password.</param>
            <param name="from">Sender email what is reported to SMTP server.</param>
            <param name="to">Recipients email addresses.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b>,<b>from</b>,<b>to</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">Is raised when SMTP server returns error.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_Client.LocalHostName">
            <summary>
            Gets or sets host name which is reported to SMTP server. If value null, then local computer name is used.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_Client.RemoteHostName">
            <summary>
            Gets SMTP server host name which it reported to us.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_Client.GreetingText">
            <summary>
            Gets greeting text which was sent by SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_Client.IsEsmtpSupported">
            <summary>
            Gets if connected SMTP server suports ESMTP.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_Client.EsmtpFeatures">
            <summary>
            Gets what ESMTP features are supported by connected SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_Client.SaslAuthMethods">
            <summary>
            Gets SMTP server supported SASL authentication method.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_Client.MaxAllowedMessageSize">
            <summary>
            Gets maximum message size in bytes what SMTP server accepts. Value null means not known.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_Client.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and SMTP client is not connected.</exception>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client.NoopDelegate">
            <summary>
            Internal helper method for asynchronous Noop method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client.StartTLSDelegate">
            <summary>
            Internal helper method for asynchronous StartTLS method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client.AuthenticateDelegate">
            <summary>
            Internal helper method for asynchronous Authenticate method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client.MailFromDelegate">
            <summary>
            Internal helper method for asynchronous MailFrom method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client.RcptToDelegate">
            <summary>
            Internal helper method for asynchronous RcptTo method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client.ResetDelegate">
            <summary>
            Internal helper method for asynchronous Reset method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client.SendMessageDelegate">
            <summary>
            Internal helper method for asynchronous SendMessage method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_Client.GetDomainHostsDelegate">
            <summary>
            Internal helper method for asynchronous SendMessage method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_UA_RegistrationState">
            <summary>
            This class specifies SIP UA registration state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_UA_RegistrationState.Registering">
            <summary>
            Registration is currently registering.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_UA_RegistrationState.Registered">
            <summary>
            Registration is active.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_UA_RegistrationState.Unregistered">
            <summary>
            Registration is not registered to registrar server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_UA_RegistrationState.Error">
            <summary>
            Registering has failed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_UA_RegistrationState.Disposed">
            <summary>
            Registration has disposed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_RegistrationEventArgs">
            <summary>
            This class provides data for <b>SIP_Registrar.AorRegistered</b>,<b>SIP_Registrar.AorUnregistered</b> and <b>SIP_Registrar.AorUpdated</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationEventArgs.#ctor(LumiSoft.Net.SIP.Proxy.SIP_Registration)">
            <summary>
            Default constructor.
            </summary>
            <param name="registration">SIP reggistration.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>registration</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationEventArgs.Registration">
            <summary>
            Gets SIP registration.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet_SR">
            <summary>
            This class represents SR: Sender Report RTCP Packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SR.#ctor(System.UInt32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ssrc">Source(sender) ID.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SR.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SR.ParseInternal(System.Byte[],System.Int32@)">
            <summary>
            Parses RTCP sender report(SR) from specified data buffer.
            </summary>
            <param name="buffer">Buffer which contains sender report.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SR.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores sender report(SR) packet to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store SR packet.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.Version">
            <summary>
            Gets RTCP version.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.Type">
            <summary>
            Gets RTCP packet type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.SSRC">
            <summary>
            Gets sender synchronization source identifier.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.NtpTimestamp">
            <summary>
            Gets or sets the wallclock time (see Section 4) when this report was sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.RtpTimestamp">
            <summary>
            Gets RTP timestamp.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.SenderPacketCount">
            <summary>
            Gets how many packets sender has sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.SenderOctetCount">
            <summary>
            Gets how many bytes sender has sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.ReportBlocks">
            <summary>
            Gets reports blocks.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SR.Size">
            <summary>
            Gets number of bytes needed for this packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Report_Receiver">
            <summary>
            This class holds receiver report info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Report_Receiver.#ctor(LumiSoft.Net.RTP.RTCP_Packet_ReportBlock)">
            <summary>
            Default constructor.
            </summary>
            <param name="rr">RTCP RR report.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>rr</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Receiver.FractionLost">
            <summary>
            Gets the fraction of RTP data packets from source SSRC lost since the previous SR or 
            RR packet was sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Receiver.CumulativePacketsLost">
            <summary>
            Gets total number of RTP data packets from source SSRC that have
            been lost since the beginning of reception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Receiver.ExtendedSequenceNumber">
            <summary>
            Gets extended highest sequence number received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Receiver.Jitter">
            <summary>
            Gets an estimate of the statistical variance of the RTP data packet
            interarrival time, measured in timestamp units and expressed as an
            unsigned integer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Receiver.LastSR">
            <summary>
            Gets when last sender report(SR) was recieved.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Receiver.DelaySinceLastSR">
            <summary>
            Gets delay since last sender report(SR) was received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_EncodedWordEncoding">
            <summary>
            This enum specifies MIME RFC 2047 'encoded-word' encoding method.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_EncodedWordEncoding.Q">
            <summary>
            The "B" encoding. Defined in RFC 2047 (section 4.1).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_EncodedWordEncoding.B">
            <summary>
            The "Q" encoding. Defined in RFC 2047 (section 4.2).
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.Base64Stream">
            <summary>
            This class implements base64 encoder/decoder. Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Dispose">
            <summary>
            Celans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this.Finish has been called and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.Base64Stream.Finish">
            <summary>
            Completes encoding. Call this method if all data has written and no more data. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.Base64Stream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.WebDav.WebDav_ResourceTypes">
            <summary>
            This class holds well-known WebDav resource types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WebDav.WebDav_ResourceTypes.collection">
            <summary>
            This class represents 'DAV:collection' resurce type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WebDav.WebDav_ResourceTypes.version_history">
            <summary>
            This class represents 'DAV:version-history' resurce type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WebDav.WebDav_ResourceTypes.activity">
            <summary>
            This class represents 'DAV:activity' resurce type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.WebDav.WebDav_ResourceTypes.baseline">
            <summary>
            This class represents 'DAV:baseline' resurce type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Parameter">
            <summary>
            Represents MIME header field parameter.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Parameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value. Value null means not specified.</param>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Parameter.IsModified">
            <summary>
            Gets if this header field parameter is modified since it has loaded.
            </summary>
            <remarks>All new added header fields parameters has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Parameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Parameter.Value">
            <summary>
            Gets or sets parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_Mailbox">
            <summary>
            This class represent generic <b>mailbox</b> header fields. For example: Sender: header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header = "FiledName:" mailbox CRLF
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Mailbox.#ctor(System.String,LumiSoft.Net.Mail.Mail_t_Mailbox)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: "Sender".</param>
            <param name="mailbox">Mailbox value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>mailbox</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Mailbox.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Sender: john.doe@domain.com'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_Mailbox.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Mailbox.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Mailbox.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_Mailbox.Address">
            <summary>
            Gets mailbox address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions">
            <summary>
            Represents "Disposition-Notification-Options:" header. Defined in RFC 2298 2.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_DispositionNotificationOptions.Address">
            <summary>
            Gets or sets mailbox address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_e_UserInfo">
            <summary>
            This class provides data for server authentication mechanisms <b>GetUserInfo</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_e_UserInfo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.UserExists">
            <summary>
            Gets or sets if specified user exists.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_e_UserInfo.Password">
            <summary>
            Gets or sets user password.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ContactParam">
            <summary>
            Implements SIP "contact-param" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                contact-param     = (name-addr / addr-spec) *(SEMI contact-params)
                contact-params    = c-p-q / c-p-expires / contact-extension
                c-p-q             = "q" EQUAL qvalue
                c-p-expires       = "expires" EQUAL delta-seconds
                contact-extension = generic-param
                delta-seconds     = 1*DIGIT
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.Parse(System.String)">
            <summary>
            Parses "contact-param" from specified value.
            </summary>
            <param name="value">SIP "contact-param" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "contact-param" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.ToStringValue">
            <summary>
            Converts this to valid "contact-param" value.
            </summary>
            <returns>Returns "contact-param" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.IsStarContact">
            <summary>
            Gets is this SIP contact is special STAR contact.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.Address">
            <summary>
            Gets contact address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.QValue">
            <summary>
            Gets or sets qvalue parameter. Targets are processed from highest qvalue to lowest. 
            This value must be between 0.0 and 1.0. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.Expires">
            <summary>
            Gets or sets expire parameter (time in seconds when contact expires). Value -1 means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ViaParm">
            <summary>
            Implements SIP "via-parm" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )
                via-params        =  via-ttl / via-maddr / via-received / via-branch / via-extension
                via-ttl           =  "ttl" EQUAL ttl
                via-maddr         =  "maddr" EQUAL host
                via-received      =  "received" EQUAL (IPv4address / IPv6address)
                via-branch        =  "branch" EQUAL token
                via-extension     =  generic-param
                sent-protocol     =  protocol-name SLASH protocol-version SLASH transport
                protocol-name     =  "SIP" / token
                protocol-version  =  token
                transport         =  "UDP" / "TCP" / "TLS" / "SCTP" / other-transport
                sent-by           =  host [ COLON port ]
                ttl               =  1*3DIGIT ; 0 to 255
                    
                Via extentions:
                  // RFC 3486
                  via-compression  =  "comp" EQUAL ("sigcomp" / other-compression)
                  // RFC 3581
                  response-port  =  "rport" [EQUAL 1*DIGIT]
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.#ctor">
            <summary>
            Defualt constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.CreateBranch">
            <summary>
            Creates new branch paramter value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Parse(System.String)">
            <summary>
            Parses "via-parm" from specified value.
            </summary>
            <param name="value">SIP "via-parm" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "via-parm" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.ToStringValue">
            <summary>
            Converts this to valid "via-parm" value.
            </summary>
            <returns>Returns "via-parm" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.ProtocolName">
            <summary>
            Gets sent protocol name. Normally this is always SIP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.ProtocolVersion">
            <summary>
            Gets sent protocol version. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.ProtocolTransport">
            <summary>
            Gets sent protocol transport. Currently known values are: UDP,TCP,TLS,SCTP. This value is always in upper-case.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.SentBy">
            <summary>
            Gets host name or IP with optional port. Examples: lumiosft.ee,10.0.0.1:80.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.SentByPortWithDefault">
            <summary>
            Gets sent-by port, if no port explicity set, transport default is returned.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Branch">
            <summary>
            Gets or sets 'branch' parameter value. The branch parameter in the Via header field values 
            serves as a transaction identifier. The value of the branch parameter MUST start
            with the magic cookie "z9hG4bK". Value null means that branch paramter doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Comp">
            <summary>
            Gets or sets 'comp' parameter value. Value null means not specified. Defined in RFC 3486.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Maddr">
            <summary>
            Gets or sets 'maddr' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Received">
            <summary>
            Gets or sets 'received' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.RPort">
            <summary>
            Gets or sets 'rport' parameter value. Value -1 means not specified and value 0 means empty "" rport.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Ttl">
            <summary>
            Gets or sets 'ttl' parameter value. Value -1 means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1">
            <summary>
            Implements generic multi value SIP header field.
            This is used by header fields like Via,Contact, ... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Parse(System.String)">
            <summary>
            Parses multi value header field values.
            </summary>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.ToStringValue">
            <summary>
            Converts to valid mutli value header field value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.GetValues">
            <summary>
            Gets header field values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Remove(System.Int32)">
            <summary>
            Removes value from specified index.
            </summary>
            <param name="index">Index of value to remove.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Values">
            <summary>
            Gets header field values.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Count">
            <summary>
            Gets values count.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1">
            <summary>
            Implements same single value header fields group. Group can contain one type header fields only.
            This is class is used by Authorization:,Proxy-Authorization:, ... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.#ctor(LumiSoft.Net.SIP.Message.SIP_Message,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner message that owns this group.</param>
            <param name="fieldName">Header field name what group holds.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Refresh">
            <summary>
            Refreshes header fields in group from actual header.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Add(System.String)">
            <summary>
            Adds specified header field value to the end of header.
            </summary>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Remove(System.Int32)">
            <summary>
            Removes header field from specified index.
            </summary>
            <param name="index">Index of the header field what to remove. Index is relative ths group.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Remove(LumiSoft.Net.SIP.Message.SIP_SingleValueHF{`0})">
            <summary>
            Removes specified header field from header.
            </summary>
            <param name="field">Header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.RemoveAll">
            <summary>
            Removes all this gorup header fields from header.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.GetFirst">
            <summary>
            Gets the first(Top-Most) header field. Returns null if no header fields.
            </summary>
            <returns>Returns first header field or null if no header fields.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.GetAllValues">
            <summary>
            Gets all header field values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.FieldName">
            <summary>
            Gets header field name what this group holds.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Count">
            <summary>
            Gets number of header fields in this group.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.HeaderFields">
            <summary>
            Gets header fields what are in this group.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogger">
            <summary>
            Socket logger.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.LogEventHandler)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket"></param>
            <param name="logHandler"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.LogEntriesToString(LumiSoft.Net.SocketLogger,System.Boolean,System.Boolean)">
            <summary>
            Converts log entries to string.
            </summary>
            <param name="logger">Socket logger.</param>
            <param name="firstLogPart">Specifies if first log part of multipart log.</param>
            <param name="lastLogPart">Specifies if last log part (logging ended).</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddReadEntry(System.String,System.Int64)">
            <summary>
            Adds data read(from remoteEndpoint) entry.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Readed text size.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddSendEntry(System.String,System.Int64)">
            <summary>
            Adds data send(to remoteEndpoint) entry.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Sent text size.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddTextEntry(System.String)">
            <summary>
            Adds free text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.Flush">
            <summary>
            Requests to write all in memory log entries to log log file.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.OnEntryAdded">
            <summary>
            This method is called when new loge entry has added.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.SessionID">
            <summary>
            Gets or sets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.UserName">
            <summary>
            Gets or sets authenticated user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.LogEntries">
            <summary>
            Gets current cached log entries.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.LocalEndPoint">
            <summary>
            Gets local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.RemoteEndPoint">
            <summary>
            Gets remote endpoint.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log_EventArgs">
            <summary>
            Provides data for the SessionLog event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log_EventArgs.#ctor(LumiSoft.Net.SocketLogger,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="logger">Socket logger.</param>
            <param name="firstLogPart">Specifies if first log part of multipart log.</param>
            <param name="lastLogPart">Specifies if last log part (logging ended).</param>
        </member>
        <member name="P:LumiSoft.Net.Log_EventArgs.LogText">
            <summary>
            Gets log text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log_EventArgs.Logger">
            <summary>
            Gets logger.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ErrorEventHandler">
            <summary>
            Represent the method what will handle Error event.
            </summary>
            <param name="sender">Delegate caller.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.LogEventHandler">
            <summary>
            To be supplied.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ValidateIPHandler">
            <summary>
            Represents the method that will handle the <see href="LumiSoftMailServerSMTPSMTP_ServerValidateIPAddressFieldOrEvent.html">SMTP_Server.ValidateIPAddress</see> and <see href="LumiSoftMailServerPOP3POP3_ServerValidateIPAddressFieldOrEvent.html">POP3_Server.ValidateIPAddress</see>event.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A <see href="LumiSoftMailServerValidateIP_EventArgs.html">ValidateIP_EventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_Result">
            <summary>
            This class holds STUN_Client.Query method return data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Result.#ctor(LumiSoft.Net.STUN.Client.STUN_NetType,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="netType">Specifies UDP network type.</param>
            <param name="publicEndPoint">Public IP end point.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Client.STUN_Result.NetType">
            <summary>
            Gets UDP network type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Client.STUN_Result.PublicEndPoint">
            <summary>
            Gets public IP end point. This value is null if failed to get network type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs">
            <summary>
            Provides data for the GetMailEvent,DeleteMessage,GetTopLines event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message,System.Net.Sockets.Socket)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="message">Message which to get.</param>
            <param name="socket">Connected socket.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message,System.Net.Sockets.Socket,System.Int32)">
            <summary>
            TopLines constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="message">Message which to get.</param>
            <param name="socket">Connected socket.</param>
            <param name="nLines">Number of lines to get.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.Session">
            <summary>
            Gets reference to pop3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.Message">
            <summary>
            Gets reference to message, which to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.MessageID">
            <summary>
            ID of message which to retrieve.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.MessageUID">
            <summary>
            UID of message which to retrieve.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.MessageData">
            <summary>
            Mail message which is delivered to user. NOTE: may be full message or top lines of message.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.Lines">
            <summary>
            Number of lines to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.UserName">
            <summary>
            User Name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs">
            <summary>
            Provides data for the GetMessgesList event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_MessageCollection,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="messages"></param>
            <param name="mailbox">Mailbox name.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.Session">
            <summary>
            Gets reference to pop3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.Messages">
            <summary>
            Gets referance to POP3 messages info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.UserName">
            <summary>
            User Name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.Mailbox">
            <summary>
            Mailbox name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldParameter">
            <summary>
            Header field parameter.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="parameterName">Header field parameter name.</param>
            <param name="parameterValue">Header field parameter value.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameter.Name">
            <summary>
            Gets header field parameter name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameter.Value">
            <summary>
            Gets header field parameter name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.Message_EventArgs">
            <summary>
            Provides data for message related events.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Message_EventArgs.#ctor(System.String,LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">IMAP folder which message is.</param>
            <param name="msg"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Message_EventArgs.#ctor(System.String,LumiSoft.Net.IMAP.Server.IMAP_Message,System.String)">
            <summary>
            Copy constructor.
            </summary>
            <param name="folder">IMAP folder which message is.</param>
            <param name="msg"></param>
            <param name="copyLocation"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Message_EventArgs.#ctor(System.String,LumiSoft.Net.IMAP.Server.IMAP_Message,System.Boolean)">
            <summary>
            GetMessage constructor.
            </summary>
            <param name="folder">IMAP folder which message is.</param>
            <param name="msg"></param>
            <param name="headersOnly">Specifies if messages headers or full message is needed.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.Folder">
            <summary>
            Gets IMAP folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.Message">
            <summary>
            Gets IMAP message info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.CopyLocation">
            <summary>
            Gets message new location. NOTE: this is available for copy command only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.MessageData">
            <summary>
            Gets or sets message data. NOTE: this is available for GetMessage and StoreMessage event only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.HeadersOnly">
            <summary>
            Gets if message headers or full message wanted. NOTE: this is available for GetMessage event only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.ErrorText">
            <summary>
            Gets or sets custom error text, which is returned to client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs">
            <summary>
            Provides data for the AuthUser event for IMAP_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="userName">Username.</param>
            <param name="passwData">Password data.</param>
            <param name="data">Authentication specific data(as tag).</param>
            <param name="authType">Authentication type.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.PasswData">
            <summary>
            Password data. eg. for AUTH=PLAIN it's password and for AUTH=APOP it's md5HexHash.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.AuthData">
            <summary>
            Authentication specific data(as tag).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.Validated">
            <summary>
            Gets or sets if user is valid.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.ReturnData">
            <summary>
            Gets or sets authentication data what must be returned for connected client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.AuthUser_EventArgs">
            <summary>
            Provides data for the AuthUser event for FTP_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.#ctor(LumiSoft.Net.FTP.Server.FTP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="userName">Username.</param>
            <param name="passwData">Password data.</param>
            <param name="data">Authentication specific data(as tag).</param>
            <param name="authType">Authentication type.</param>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.Session">
            <summary>
            Gets reference to pop3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.PasswData">
            <summary>
            Password data. eg. for AUTH=PLAIN it's password and for AUTH=APOP it's md5HexHash.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.AuthData">
            <summary>
            Authentication specific data(as tag).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.Validated">
            <summary>
            Gets or sets if user is valid.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_QueueItem">
            <summary>
            Thsi class holds Relay_Queue queued item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.#ctor(LumiSoft.Net.SMTP.Relay.Relay_Queue,System.String,System.String,LumiSoft.Net.SMTP.SMTP_DSN_Ret,System.String,System.String,LumiSoft.Net.SMTP.SMTP_DSN_Notify,System.String,System.IO.Stream,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="queue">Item owner queue.</param>
            <param name="from">Sender address.</param>
            <param name="envelopeID">Envelope ID_(MAIL FROM: ENVID).</param>
            <param name="ret">Specifies what parts of message are returned in DSN report.</param>
            <param name="to">Target recipient address.</param>
            <param name="originalRecipient">Original recipient(RCPT TO: ORCPT).</param>
            <param name="notify">DSN notify condition.</param>
            <param name="messageID">Message ID.</param>
            <param name="message">Raw mime message. Message reading starts from current position.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.Queue">
            <summary>
            Gets this relay item owner queue.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.From">
            <summary>
            Gets from address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.EnvelopeID">
            <summary>
            Gets DSN ENVID value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.DSN_Ret">
            <summary>
            Gets DSN RET value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.To">
            <summary>
            Gets target recipient.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.OriginalRecipient">
            <summary>
            Gets DSN ORCPT value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.DSN_Notify">
            <summary>
            Gets DSN Notify value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.MessageID">
            <summary>
            Gets message ID which is being relayed now.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.MessageStream">
            <summary>
            Gets raw mime message which must be relayed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_QueueItem.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_Mode">
            <summary>
            Specifies relay mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.Relay.Relay_Mode.Dns">
            <summary>
            Dns is used to resolve email message target.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.Relay.Relay_Mode.SmartHost">
            <summary>
            All messages sent to the specified host.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.UA.SIP_UA_Call">
            <summary>
            This class represent SIP UA call.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.#ctor(LumiSoft.Net.SIP.UA.SIP_UA,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Default outgoing call constructor.
            </summary>
            <param name="ua">Owner UA.</param>
            <param name="invite">INVITE request.</param>
            <exception cref="T:System.ArgumentNullException">Is riased when <b>ua</b> or <b>invite</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumnets has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.#ctor(LumiSoft.Net.SIP.UA.SIP_UA,LumiSoft.Net.SIP.Stack.SIP_ServerTransaction)">
            <summary>
            Default incoming call constructor.
            </summary>
            <param name="ua">Owner UA.</param>
            <param name="invite">INVITE server transaction.</param>
            <exception cref="T:System.ArgumentNullException">Is riased when <b>ua</b> or <b>invite</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.m_pDialog_StateChanged(System.Object,System.EventArgs)">
            <summary>
            Is called when SIP dialog state has changed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.m_pInitialInviteSender_ResponseReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when initial INVITE sender got response.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.Terminate">
            <summary>
            Starts terminating call. To get when call actually terminates, monitor <b>StateChanged</b> event.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.Start">
            <summary>
            Starts calling.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when call is not in valid state.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.Accept">
            <summary>
            Accepts call.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.Reject(System.String)">
            <summary>
            Rejects incoming call.
            </summary>
            <param name="statusCode_reason">Status-code reasonText.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when call is not in valid state and this method is called.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>statusCode_reason</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.Redirect(LumiSoft.Net.SIP.Message.SIP_t_ContactParam[])">
            <summary>
            Redirects incoming call to speified contact(s).
            </summary>
            <param name="contacts">Redirection targets.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when call is not in valid state and this method is called.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contacts</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.SetState(LumiSoft.Net.SIP.UA.SIP_UA_CallState)">
            <summary>
            Changes call state.
            </summary>
            <param name="state">New call state.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA_Call.OnStateChanged(LumiSoft.Net.SIP.UA.SIP_UA_CallState)">
            <summary>
            Raises <b>StateChanged</b> event.
            </summary>
            <param name="state">New call state.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.State">
            <summary>
            Gets current call state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.LocalUri">
            <summary>
            Gets call local party URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.RemoteUri">
            <summary>
            Gets call remote party URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.StartTime">
            <summary>
            Gets call start time.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.RemoteSDP">
            <summary>
            Gets remote SDP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.Duration">
            <summary>
            Gets call duration in seconds.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.IsRedirected">
            <summary>
            Gets if call has been redirected by remote party.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.IsOnhold">
            <summary>
            Gets if call is on hold.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA_Call.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.UA.SIP_UA_Call.StateChanged">
            <summary>
            Is raised when call state has changed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_RequestSender">
            <summary>
            This class implements SIP request sender.
            </summary>
            <remarks>
            Request is sent using following methods:<br/>
                *) If there is active data flow, it is used.
                *) Request is sent as described in RFC 3261 [4](RFC 3263).
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Flow)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Owner stack.</param>
            <param name="request">SIP request.</param>
            <param name="flow">Active data flow what to try before RFC 3261 [4](RFC 3263) methods to use to send request.
            This value can be null.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b> or <b>request</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.ClientTransaction_ResponseReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            Is called when client transactions receives response.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.ClientTransaction_TimedOut(System.Object,System.EventArgs)">
            <summary>
            Is called when client transaction has timed out.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.ClientTransaction_TransportError(System.Object,System.EventArgs)">
            <summary>
            Is called when client transaction encountered transport error.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Start">
            <summary>
            Starts sending request.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>Start</b> method has alredy called.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when no transport hop(s) for request.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Cancel">
            <summary>
            Cancels current request sending.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when request sending has not been started by <b>Start</b> method.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Authorize(LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Response,System.Net.NetworkCredential[])">
            <summary>
            Creates authorization for each challange in <b>response</b>.
            </summary>
            <param name="request">SIP request where to add authorization values.</param>
            <param name="response">SIP response which challanges to authorize.</param>
            <param name="credentials">Credentials for authorization.</param>
            <returns>Returns true if all challanges were authorized. If any of the challanges was not authorized, returns false.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.SendToNextHop">
            <summary>
            Starts sending request to next hop in queue.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when no next hop available(m_pHops.Count == 0) and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.SendToFlow(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Sends specified request to the specified data flow.
            </summary>
            <param name="flow">SIP data flow.</param>
            <param name="request">SIP request to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>request</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.CleanUpActiveTransaction">
            <summary>
            Cleans up active transaction.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.OnResponseReceived(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Raises ResponseReceived event.
            </summary>
            <param name="response">SIP response received.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.OnTransportError(System.Exception)">
            <summary>
            Raises event <b>TransportError</b>.
            </summary>
            <param name="exception">Excption happened.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.OnCompleted">
            <summary>
            Raises event <b>Completed</b>.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestSender.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestSender.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestSender.IsStarted">
            <summary>
            Gets if request sending has been started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Stack">
            <summary>
            Gets owner stack.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Request">
            <summary>
            Gets SIP request.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Flow">
            <summary>
            Gets SIP flow what was used to send request or null if request is not sent yet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Credentials">
            <summary>
            Gets credentials collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_RequestSender.ResponseReceived">
            <summary>
            Is raised when this transaction has got response from target end point.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Completed">
            <summary>
            Is raised when sender has finished processing(got final-response or error).
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_RequestSender.Disposed">
            <summary>
            Is raised when this object has disposed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_RequestLine">
            <summary>
            Implements SIP Request-Line. Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestLine.#ctor(System.String,LumiSoft.Net.AbsoluteUri)">
            <summary>
            Default constructor.
            </summary>
            <param name="method">SIP method.</param>
            <param name="uri">Request URI.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>method</b> or <b>uri</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestLine.ToString">
            <summary>
            Returns Request-Line string.
            </summary>
            <returns>Returns Request-Line string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestLine.Method">
            <summary>
            Gets or sets request method. This value is always in upper-case.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>value</b> has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestLine.Uri">
            <summary>
            Gets or sets request URI.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestLine.Version">
            <summary>
            Gets or sets SIP version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>value</b> has invalid value.</exception>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Packet">
            <summary>
            A data packet consisting of the fixed RTP header, a possibly empty list of contributing 
            sources (see below), and the payload data. Some underlying protocols may require an 
            encapsulation of the RTP packet to be defined. Typically one packet of the underlying 
            protocol contains a single RTP packet, but several RTP packets MAY be contained if 
            permitted by the encapsulation method (see Section 11).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Packet.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Packet.Parse(System.Byte[],System.Int32)">
            <summary>
            Parses RTP packet.
            </summary>
            <param name="buffer">Buffer containing RTP packet.</param>
            <param name="size">Number of bytes used in buffer.</param>
            <returns>Returns parsed RTP packet.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Packet.Validate">
            <summary>
            Validates RTP packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Packet.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores this packet to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store packet.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Packet.ToString">
            <summary>
            Returns this packet info as string.
            </summary>
            <returns>Returns packet info.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Packet.ParseInternal(System.Byte[],System.Int32)">
            <summary>
            Parses RTP packet from the specified buffer.
            </summary>
            <param name="buffer">Buffer containing RTP packet.</param>
            <param name="size">Number of bytes used in buffer.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.Version">
            <summary>
            Gets RTP version.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.IsPadded">
            <summary>
            Gets if packet is padded to some bytes boundary.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.IsMarker">
            <summary>
            Gets marker bit. The usage of this bit depends on payload type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.PayloadType">
            <summary>
            Gets payload type.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.SeqNo">
            <summary>
            Gets or sets RTP packet sequence number.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.Timestamp">
            <summary>
            Gets sets packet timestamp. 
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.SSRC">
            <summary>
            Gets or sets synchronization source ID.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.CSRC">
            <summary>
            Gets or sets the contributing sources for the payload contained in this packet.
            Value null means none.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.Sources">
            <summary>
            Gets SSRC + CSRCs as joined array.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Packet.Data">
            <summary>
            Gets or sets RTP data. Data must be encoded with PayloadType encoding.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Participant_Local">
            <summary>
            This class represents RTP session/multimedia-session local participant.
            </summary>
            <remarks>Term <b>participant</b> is not well commented/defined in RTP. In general for single media session <b>participant</b>
            is RTP session itself, for multimedia sesssion <b>participant</b> is multimedia session(RTP sessions group).</remarks>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant_Local.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="cname">Canonical name of participant.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>cname</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant_Local.AddNextOptionalSdesItem(LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk)">
            <summary>
            Adds next(round-robined) optional SDES item to SDES chunk, if any available.
            </summary>
            <param name="sdes">SDES chunk where to add item.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sdes</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Participant_Local.ConstructOptionalItems">
            <summary>
            Constructs optional SDES items round-robin.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Local.Name">
            <summary>
            Gets or sets the real name, eg. "John Doe". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Local.Email">
            <summary>
            Gets or sets email address. For example "John.Doe@example.com". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Local.Phone">
            <summary>
            Gets or sets phone number. For example "+1 908 555 1212". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Local.Location">
            <summary>
            Gets  or sets location string. It may be geographic address or for example chat room name.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Local.Tool">
            <summary>
            Gets or sets streaming application name/version.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Participant_Local.Note">
            <summary>
            Gets or sets note text. The NOTE item is intended for transient messages describing the current state
            of the source, e.g., "on the phone, can't talk". Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Report_Sender">
            <summary>
            This class holds sender report info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Report_Sender.#ctor(LumiSoft.Net.RTP.RTCP_Packet_SR)">
            <summary>
            Default constructor.
            </summary>
            <param name="sr">RTCP SR report.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sr</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Sender.NtpTimestamp">
            <summary>
            Gets the wallclock time (see Section 4) when this report was sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Sender.RtpTimestamp">
            <summary>
            Gets RTP timestamp.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Sender.SenderPacketCount">
            <summary>
            Gets how many packets sender has sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Report_Sender.SenderOctetCount">
            <summary>
            Gets how many bytes sender has sent.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_Utils">
            <summary>
            Provides MIME related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.DateTimeToRfc2822(System.DateTime)">
            <summary>
            Converts date to RFC 2822 date time string.
            </summary>
            <param name="dateTime">Date time value to convert..</param>
            <returns>Returns RFC 2822 date time string.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.ParseRfc2822DateTime(System.String)">
            <summary>
            Parses RFC 2822 date-time from the specified value.
            </summary>
            <param name="value">RFC 2822 date-time string value.</param>
            <returns>Returns parsed datetime value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.UnfoldHeader(System.String)">
            <summary>
            Unfolds folded header field.
            </summary>
            <param name="value">Header field.</param>
            <returns>Returns unfolded header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.CreateMessageID">
            <summary>
            Creates Rfc 2822 3.6.4 message-id. Syntax: '&lt;' id-left '@' id-right '&gt;'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.ParseHeaders(System.IO.Stream)">
            <summary>
            Parses headers from message or mime entry.
            </summary>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns>Returns header lines.</returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.ParseHeaderField(System.String,System.IO.Stream)">
            <summary>
            Parse header specified header field value.
            
            Use this method only if you need to get only one header field, otherwise use
            MimeParser.ParseHeaderField(string fieldName,string headers).
            This avoid parsing headers multiple times.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_Utils.ParseHeaderField(System.String,System.String)">
            <summary>
            Parse header specified header field value.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="headers">Full headers string. Use MimeParser.ParseHeaders() to get this value.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.PartialStream">
            <summary>
            Implements read-only stream what operates on specified range of source stream
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="start">Zero based start positon in source stream.</param>
            <param name="length">Length of stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.PartialStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:LumiSoft.Net.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.PartialStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.FTP_ClientException">
            <summary>
            FTP client exception.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_ClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">FTP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_ClientException.StatusCode">
            <summary>
            Gets FTP status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_ClientException.ResponseText">
            <summary>
            Gets FTP server response text after status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_ClientException.IsPermanentError">
            <summary>
            Gets if it is permanent FTP(5xx) error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Unparsed">
            <summary>
            This class represent header field what parsing has failed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unparsed.#ctor(System.String,System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <param name="exception">Parsing error.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unparsed.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.InvalidOperationException">Is alwyas raised when this mewthod is accsessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Unparsed.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unparsed.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unparsed.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unparsed.Value">
            <summary>
            Gets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Unparsed.Exception">
            <summary>
            Gets error happened during parse.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5">
            <summary>
            Implements "CRAM-MD5" authenticaiton. Defined in RFC 2195.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.HmacMd5(System.String,System.String)">
            <summary>
            Calculates keyed md5 hash from specifieed text and with specified hash key.
            </summary>
            <param name="hashKey">MD5 key.</param>
            <param name="text">Text to hash.</param>
            <returns>Returns MD5 hash.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.Name">
            <summary>
            Returns always "CRAM-MD5".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_CramMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.StreamLineReader">
            <summary>
            Stream line reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="strmSource">Source stream from where to read data. Reading begins from stream current position.</param>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.ReadLine">
            <summary>
            Reads byte[] line from stream. NOTE: Returns null if end of stream reached.
            </summary>
            <returns>Return null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.ReadLineString">
            <summary>
            Reads string line from stream. String is converted with specified Encoding property from byte[] line. NOTE: Returns null if end of stream reached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.StreamLineReader.Encoding">
            <summary>
            Gets or sets charset encoding to use for string based methods. Default("") encoding is system default encoding.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StreamLineReader.CRLF_LinesOnly">
            <summary>
            Gets or sets if lines must be CRLF terminated or may be only LF terminated too.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Time">
            <summary>
            A SDP_Time represents an <B>t=</B> SDP message field. Defined in RFC 4566 5.9. Timing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.Parse(System.String)">
            <summary>
            Parses media from "t" SDP message field.
            </summary>
            <param name="tValue">"t" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.ToValue">
            <summary>
            Converts this to valid "t" string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Time.StartTime">
            <summary>
            Gets or sets start time when session must start. Network Time Protocol (NTP) time values in 
            seconds since 1900. 0 value means not specified, if StopTime is also 0, then means infinite session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Time.StopTime">
            <summary>
            Gets or sets stop time when session must end. Network Time Protocol (NTP) time values in 
            seconds since 1900. 0 value means not specified, if StopTime is also 0, then means infinite session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Media">
            <summary>
            SDP media.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Media.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Media.ToValue">
            <summary>
            Converts media entity to corresponding media lines. Attributes included.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.MediaDescription">
            <summary>
            Gets or sets media description.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.Title">
            <summary>
            Gets or sets media title.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.ConnectionData">
            <summary>
            Gets or sets connection data. This is optional value if SDP message specifies this value,
            null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.EncryptionKey">
            <summary>
            Gets or sets media encryption key info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.Attributes">
            <summary>
            Gets media attributes collection. This is optional value, Count == 0 means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogEntry">
            <summary>
            Socket log entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogEntry.#ctor(System.String,System.Int64,LumiSoft.Net.SocketLogEntryType)">
            <summary>
            Default constructor.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Data size.</param>
            <param name="type">Log entry type</param>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Text">
            <summary>
            Gets log text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Size">
            <summary>
            Gets size of data readed or sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Type">
            <summary>
            Gets log entry type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest">
            <summary>
            This class implements STUN CHANGE-REQUEST attribute. Defined in RFC 3489 11.2.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="changeIP">Specifies if STUN server must send response to different IP than request was received.</param>
            <param name="changePort">Specifies if STUN server must send response to different port than request was received.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.ChangeIP">
            <summary>
            Gets or sets if STUN server must send response to different IP than request was received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.ChangePort">
            <summary>
            Gets or sets if STUN server must send response to different port than request was received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires">
            <summary>
            Implements SIP "Session-Expires" value. Defined in RFC 4028.
            </summary>
            <remarks>
            <code>
            RFC 4028 Syntax:
                Session-Expires  = delta-seconds *(SEMI se-params)
                se-params        = refresher-param / generic-param
                refresher-param  = "refresher" EQUAL  ("uas" / "uac")
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Session-Expires value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="expires">Specifies after many seconds session expires.</param>
            <param name="refresher">Specifies session refresher(uac/uas/null). Value null means not specified.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.Parse(System.String)">
            <summary>
            Parses "Session-Expires" from specified value.
            </summary>
            <param name="value">SIP "Session-Expires" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Session-Expires" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.ToStringValue">
            <summary>
            Converts this to valid "Session-Expires" value.
            </summary>
            <returns>Returns "Session-Expires" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.Expires">
            <summary>
            Gets or sets after how many seconds session expires.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when value less than 90 is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.Refresher">
            <summary>
            Gets or sets Session-Expires 'refresher' parameter. Normally this value is 'ua' or 'uas'.
            Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream">
            <summary>
            Provides data to POP3 server event GetMessageStream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to current POP3 session.</param>
            <param name="messageInfo">Message info what message items to get.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.Session">
            <summary>
            Gets reference to current POP3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.MessageInfo">
            <summary>
            Gets message info what message stream to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.CloseMessageStream">
            <summary>
            Gets or sets if message stream is closed automatically if all actions on it are completed.
            Default value is true.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.MessageStream">
            <summary>
            Gets or sets message stream. When setting this property Stream position must be where message begins.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.MessageSize">
            <summary>
            Gets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.MessageExists">
            <summary>
            Gets or sets if message exists. Set this false, if message actually doesn't exist any more.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client">
            <summary>
            POP3 Client. Defined in RFC 1939.
            </summary>
            <example>
            <code>
            
            /*
             To make this code to work, you need to import following namespaces:
             using LumiSoft.Net.Mime;
             using LumiSoft.Net.POP3.Client; 
             */
            
            using(POP3_Client c = new POP3_Client()){
            	c.Connect("ivx",WellKnownPorts.POP3);
            	c.Authenticate("test","test",true);
            			
            	// Get first message if there is any
            	if(c.Messages.Count > 0){
            		// Do your suff
            		
            		// Parse message
            		Mime m = Mime.Parse(c.Messages[0].MessageToByte());
            		string from = m.MainEntity.From;
            		string subject = m.MainEntity.Subject;			
            		// ... 
            	}		
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Disconnect">
            <summary>
            Closes connection to POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.BeginStartTLS(System.AsyncCallback,System.Object)">
            <summary>
            Starts switching to SSL.
            </summary>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is authenticated or is already secure connection.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.EndStartTLS(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous StartTLS request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.StartTLS">
            <summary>
            Switches POP3 connection to SSL.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is authenticated or is already secure connection.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.BeginAuthenticate(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts authentication.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="tryApop"> If true and POP3 server supports APOP, then APOP is used, otherwise normal login used.</param>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is already authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.EndAuthenticate(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous authentication request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Authenticate(System.String,System.String,System.Boolean)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="tryApop"> If true and POP3 server supports APOP, then APOP is used, otherwise normal login used.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected or is already authenticated.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.BeginNoop(System.AsyncCallback,System.Object)">
            <summary>
            Starts sending NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.EndNoop(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Noop request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Noop">
            <summary>
            Send NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.BeginReset(System.AsyncCallback,System.Object)">
            <summary>
            Starts resetting session. Messages marked for deletion will be unmarked.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.EndReset(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous reset request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Reset">
            <summary>
            Resets session. Messages marked for deletion will be unmarked.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when POP3 client is not connected and authenticated.</exception>
            <exception cref="T:LumiSoft.Net.POP3.Client.POP3_ClientException">Is raised when POP3 server returns error.</exception>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.MarkMessageForDeletion(System.Int32)">
            <summary>
            Marks specified message for deletion.
            </summary>
            <param name="sequenceNumber">Message sequence number.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetMessage(System.Int32,System.IO.Stream)">
            <summary>
            Stores specified message to the specified stream.
            </summary>
            <param name="sequenceNumber">Message 1 based sequence number.</param>
            <param name="stream">Stream where to store message.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetTopOfMessage(System.Int32,System.IO.Stream,System.Int32)">
            <summary>
            Stores specified message header + specified lines of body to the specified stream.
            </summary>
            <param name="sequenceNumber">Message 1 based sequence number.</param>
            <param name="stream">Stream where to store data.</param>
            <param name="lineCount">Number of lines of message body to get.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.FillMessages">
            <summary>
            Fills messages info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.GreetingText">
            <summary>
            Gets greeting text which was sent by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.ExtenededCapabilities">
            <summary>
            Gets POP3 exteneded capabilities supported by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.ExtendedCapabilities">
            <summary>
            Gets POP3 exteneded capabilities supported by POP3 server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.IsUidlSupported">
            <summary>
            Gets if POP3 server supports UIDL command.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and 
            POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.Messages">
            <summary>
            Gets messages collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and 
            POP3 client is not connected and authenticated.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.AuthenticatedUserIdentity">
            <summary>
            Gets session authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and POP3 client is not connected.</exception>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client.StartTLSDelegate">
            <summary>
            Internal helper method for asynchronous StartTLS method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client.AuthenticateDelegate">
            <summary>
            Internal helper method for asynchronous Authenticate method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client.NoopDelegate">
            <summary>
            Internal helper method for asynchronous Noop method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client.ResetDelegate">
            <summary>
            Internal helper method for asynchronous Reset method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum">
            <summary>
            vCal delivery address type. Note this values may be flagged !
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.NotSpecified">
            <summary>
            Delivery address type not specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Preferred">
            <summary>
            Preferred delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Domestic">
            <summary>
            Domestic delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Ineternational">
            <summary>
            International delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Postal">
            <summary>
            Postal delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Parcel">
            <summary>
            Parcel delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Home">
            <summary>
            Delivery address for a residence.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Work">
            <summary>
            Address for a place of work.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.BitDebuger">
            <summary>
            This class provides bit debugging methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.BitDebuger.ToBit(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts byte array to bit(1 byte = 8 bit) representation.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="count">Numer of bytes to convert.</param>
            <param name="bytesPerLine">Number of bytes per line.</param>
            <returns>Returns byte array as bit(1 byte = 8 bit) representation.</returns>
        </member>
        <member name="T:LumiSoft.Net.TimerEx">
            <summary>
            Simple timer implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor(System.Double)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
        </member>
        <member name="M:LumiSoft.Net.TimerEx.#ctor(System.Double,System.Boolean)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
            <param name="autoReset">Specifies if timer is auto reseted.</param>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_MailFrom">
            <summary>
            This class holds MAIL FROM: command value.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_MailFrom.#ctor(System.String,System.Int32,System.String,LumiSoft.Net.SMTP.SMTP_DSN_Ret,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mailbox">Mailbox value.</param>
            <param name="size">SIZE parameter value.</param>
            <param name="body">BODY parameter value.</param>
            <param name="ret">DSN RET parameter value.</param>
            <param name="envid">DSN ENVID parameter value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mailbox</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_MailFrom.Mailbox">
            <summary>
            Gets SMTP "mailbox" value. Actually this is just email address.
            This value can be "" if "null reverse-path".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_MailFrom.Size">
            <summary>
            Gets MAIL FROM: SIZE parameter value. Value -1 means not specified.
            Defined in RFC 1870.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_MailFrom.Body">
            <summary>
            Gets MAIL FROM: BODY parameter value. Value null means not specified.
            Defined in RFC 1652.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_MailFrom.RET">
            <summary>
            Gets DSN RET parameter value. Value null means not specified.
            RET specifies whether message or headers should be included in any failed DSN issued for message transmission.
            Defined in RFC 1891.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_MailFrom.ENVID">
            <summary>
            Gets DSN ENVID parameter value. Value null means not specified.
            Defined in RFC 1891.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction">
            <summary>
            Implements SIP server transaction. Defined in rfc 3261 17.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Owner SIP stack.</param>
            <param name="flow">SIP data flow which received request.</param>
            <param name="request">SIP request that transaction will handle.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b>,<b>flow</b> or <b>request</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimer100_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE 100 (Trying) response must be sent if no response sent by transaction user.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimerG_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE timer G triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimerH_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE timer H triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimerI_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE timer I triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimerJ_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE timer J triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Start">
            <summary>
            Starts transaction processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.SendResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends specified response to remote party.
            </summary>
            <param name="response">SIP response to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Cancel">
            <summary>
            Cancels current transaction processing and sends '487 Request Terminated'.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when final response is sent and Cancel method is called after it.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.ProcessRequest(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Processes specified request through this transaction.
            </summary>
            <param name="flow">SIP data flow.</param>
            <param name="request">SIP request.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>request</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.OnResponseSent(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Raises <b>ResponseSent</b> event.
            </summary>
            <param name="response">SIP response.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.OnCanceled">
            <summary>
            Raises <b>Canceled</b> event.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.ResponseSent">
            <summary>
            Is raised when transaction has sent response to remote party.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Canceled">
            <summary>
            Is raised when transaction has canceled.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Dialog_Subscribe">
            <summary>
            This class represent SUBSCRIBE dialog. Defined in RFC 3265.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Subscribe.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog_Subscribe.Notify(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Sends notify request to remote end point.
            </summary>
            <param name="notify">SIP NOTIFY request.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_B2BUA">
            <summary>
            This class implements SIP b2bua(back to back user agent). Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.#ctor(LumiSoft.Net.SIP.Proxy.SIP_Proxy)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Onwer SIP proxy.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.OnRequestReceived(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            This method is called when new request is received.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.OnResponseReceived(LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when new response is received.
            </summary>
            <param name="e">Response event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.AddCall(LumiSoft.Net.SIP.Stack.SIP_Dialog,LumiSoft.Net.SIP.Stack.SIP_Dialog)">
            <summary>
            Adds specified call to calls list.
            </summary>
            <param name="caller">Caller side dialog.</param>
            <param name="calee">Calee side dialog.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.RemoveCall(LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call)">
            <summary>
            Removes specified call from calls list.
            </summary>
            <param name="call">Call to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.GetCallByID(System.String)">
            <summary>
            Gets call by call ID.
            </summary>
            <param name="callID">Call ID.</param>
            <returns>Returns call with specified ID or null if no call with specified ID.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.OnCallCreated(LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call)">
            <summary>
            Raises CallCreated event.
            </summary>
            <param name="call">Call created.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.OnCallTerminated(LumiSoft.Net.SIP.Proxy.SIP_B2BUA_Call)">
            <summary>
            Raises CallTerminated event.
            </summary>
            <param name="call">Call terminated.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.Stack">
            <summary>
            Gets B2BUA owner SIP stack.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.Calls">
            <summary>
            Gets active calls.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.CallCreated">
            <summary>
            Is called when new call is created.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_B2BUA.CallTerminated">
            <summary>
            Is called when call has terminated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Session">
            <summary>
            Implements RTP session. Defined in RFC 3550.
            </summary>
            <remarks>RTP session can exchange 1 payload type at time.
            For example if application wants to send audio and video, it must create two different RTP sessions.
            Though RTP session can send multiple streams of same payload.</remarks>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.#ctor(LumiSoft.Net.RTP.RTP_MultimediaSession,LumiSoft.Net.RTP.RTP_Address,LumiSoft.Net.RTP.RTP_Clock)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner RTP multimedia session.</param>
            <param name="localEP">Local RTP end point.</param>
            <param name="clock">RTP media clock.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b>, <b>localEP</b> or <b>clock</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.Close(System.String)">
            <summary>
            Closes RTP session, sends BYE with optional reason text to remote targets.
            </summary>
            <param name="closeReason">Close reason. Value null means not specified.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.Start">
            <summary>
            Starts RTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.Stop">
            <summary>
            Stops RTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.CreateSendStream">
            <summary>
            Creates new send stream.
            </summary>
            <returns>Returns new created send stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.AddTarget(LumiSoft.Net.RTP.RTP_Address)">
            <summary>
            Opens RTP session to the specified remote target.
            </summary>
            <remarks>Once RTP session opened, RTCP reports sent to that target and also each local sending stream data.</remarks>
            <param name="target">Session remote target.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>target</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid values.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.RemoveTarget(LumiSoft.Net.RTP.RTP_Address)">
            <summary>
            Removes specified target.
            </summary>
            <param name="target">Session remote target.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>target</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.SendRtcpPacket(LumiSoft.Net.RTP.RTCP_CompoundPacket)">
            <summary>
            Sends specified RTCP packet to the session remote party.
            </summary>
            <param name="packet">RTCP compound packet.</param>
            <returns>Returns packet size in bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>packet</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.SendRtpPacket(LumiSoft.Net.RTP.RTP_SendStream,LumiSoft.Net.RTP.RTP_Packet)">
            <summary>
            Sends specified RTP packet to the session remote party.
            </summary>
            <param name="stream">RTP packet sending stream.</param>
            <param name="packet">RTP packet.</param>
            <returns>Returns packet size in bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> or <b>packet</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.ProcessRtcp(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Processes specified RTCP data.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="count">Number of bytes in data buffer.</param>
            <param name="remoteEP">IP end point what sent RTCP packet.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> or <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.ProcessRtp(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Processes specified RTP data.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="count">Number of bytes in data buffer.</param>
            <param name="remoteEP">IP end point what sent RTCP packet.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> or <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.CreateLocalSource">
            <summary>
            Creates local source.
            </summary>
            <returns>Returns new local source.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.GetOrCreateSource(System.Boolean,System.UInt32,System.String,System.Net.IPEndPoint)">
            <summary>
            Gets or creates source. This method also does RFC 3550 8.2 "Collision Resolution and Loop Detection".
            </summary>
            <param name="rtcp_rtp">If true <b>src</b> is RTCP identifier, otherwise RTP identifier.</param>
            <param name="src">Source SSRC or CSRC identifier.</param>
            <param name="cname">RTCP SDES chunk CNAME. Must be passed only if <b>src</b> if from RTCP SDES chunk.</param>
            <param name="packetEP">Packet sender end point.</param>
            <returns>Returns specified source. Returns null if source has "collision or loop".</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>packetEP</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.Schedule(System.Int32)">
            <summary>
            Schedules RTCP transmission.
            </summary>
            <param name="seconds">After number of seconds to transmit next RTCP.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.ComputeRtcpTransmissionInterval(System.Int32,System.Int32,System.Double,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Computes RTCP transmission interval. Defined in RFC 3550 6.3.1.
            </summary>
            <param name="members">Current mebers count.</param>
            <param name="senders">Current sender count.</param>
            <param name="rtcp_bw">RTCP bandwidth.</param>
            <param name="we_sent">Specifies if we have sent data after last 2 RTCP interval.</param>
            <param name="avg_rtcp_size">Average RTCP raw packet size, IP headers included.</param>
            <param name="initial">Specifies if we ever have sent data to target.</param>
            <returns>Returns transmission interval in seconds.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.DoReverseReconsideration">
            <summary>
            Does "reverse reconsideration" algorithm. Defined in RFC 3550 6.3.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.TimeOutSsrc">
            <summary>
            Does RFC 3550 6.3.5 Timing Out an SSRC.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.SendRtcp">
            <summary>
            Sends RTCP report.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.RtpAsyncSocketReceiveCompleted(System.IAsyncResult)">
            <summary>
            Is called when RTP socket has received data.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.RtcpAsyncSocketReceiveCompleted(System.IAsyncResult)">
            <summary>
            Is called when RTCP socket has received data.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.RtpIOCompletionReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Accepts or starts accepting incoming RTP data.
            </summary>
            <param name="socketArgs">ReceiveFromAsync method data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socketArgs</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.RtcpIOCompletionReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Accepts or starts accepting incoming RTCP data.
            </summary>
            <param name="socketArgs">ReceiveFromAsync method data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socketArgs</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.OnClosed">
            <summary>
            Raises <b>Closed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.OnNewSendStream(LumiSoft.Net.RTP.RTP_SendStream)">
            <summary>
            Raises <b>NewSendStream</b> event.
            </summary>
            <param name="stream">New send stream.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Session.OnNewReceiveStream(LumiSoft.Net.RTP.RTP_ReceiveStream)">
            <summary>
            Raises <b>NewReceiveStream</b> event.
            </summary>
            <param name="stream">New receive stream.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.Session">
            <summary>
            Gets owner RTP multimedia session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.LocalEP">
            <summary>
            Gets local RTP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtpClock">
            <summary>
            Gets RTP media clock.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.Targets">
            <summary>
            Gets RTP session remote targets.
            </summary>
            <remarks>Normally RTP session has only 1 remote target, for multi-unicast session, there may be more than 1 target.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.MTU">
            <summary>
            Gets maximum transfet unit size in bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.Payload">
            <summary>
            Gets or sets sending payload.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.Bandwidth">
            <summary>
            Gets or sets session bandwidth in bits per second.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.Members">
            <summary>
            Gets session members. Session member is local/remote source what sends RTCP,RTP or RTCP-RTP data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.Senders">
            <summary>
            Gets session senders. Sender is local/remote source what sends RTP data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.SendStreams">
            <summary>
            Gets the RTP streams what we send.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.ReceiveStreams">
            <summary>
            Gets the RTP streams what we receive.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtpPacketsSent">
            <summary>
            Gets total of RTP packets sent by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtpBytesSent">
            <summary>
            Gets total of RTP bytes(RTP headers included) sent by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtpPacketsReceived">
            <summary>
            Gets total of RTP packets received by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtpBytesReceived">
            <summary>
            Gets total of RTP bytes(RTP headers included) received by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtpFailedTransmissions">
            <summary>
            Gets number of times RTP packet sending has failed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtcpPacketsSent">
            <summary>
            Gets total of RTCP packets sent by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtcpBytesSent">
            <summary>
            Gets total of RTCP bytes(RTCP headers included) sent by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtcpPacketsReceived">
            <summary>
            Gets total of RTCP packets received by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtcpBytesReceived">
            <summary>
            Gets total of RTCP bytes(RTCP headers included) received by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtcpFailedTransmissions">
            <summary>
            Gets number of times RTCP packet sending has failed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtcpInterval">
            <summary>
            Current RTCP reporting interval in seconds.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RtcpLastTransmission">
            <summary>
            Gets time when last RTCP report was sent.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.LocalCollisions">
            <summary>
            Gets number of times local SSRC collision dedected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RemoteCollisions">
            <summary>
            Gets number of times remote SSRC collision dedected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.LocalPacketsLooped">
            <summary>
            Gets number of times local packets loop dedected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Session.RemotePacketsLooped">
            <summary>
            Gets number of times remote packets loop dedected.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Session.Disposed">
            <summary>
            Is raised when RTP session has disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Session.Closed">
            <summary>
            Is raised when RTP session has closed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Session.NewSendStream">
            <summary>
            Is raised when new send stream created.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.RTP.RTP_Session.NewReceiveStream">
            <summary>
            Is raised when new recieve stream received from remote target.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartMixed">
            <summary>
            This class represents MIME multipart/mixed body. Defined in RFC 2046 5.1.3.
            </summary>
            <remarks>
            The "mixed" subtype of "multipart" is intended for use when the body
            parts are independent and need to be bundled in a particular order.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartMixed.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartMixed.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MessageRfc822">
            <summary>
            This class represents MIME message/rfc822 body. Defined in RFC 2046 5.2.1.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageRfc822.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageRfc822.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageRfc822.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageRfc822.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageRfc822.Message">
            <summary>
            Gets embbed mail message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_AddressList">
            <summary>
            This class represents <b>address-list</b>. Defined in RFC 5322 3.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.Insert(System.Int32,LumiSoft.Net.Mail.Mail_t_Address)">
            <summary>
            Inserts a address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the item.</param>
            <param name="value">Address to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.Add(LumiSoft.Net.Mail.Mail_t_Address)">
            <summary>
            Adds specified address to the end of the collection.
            </summary>
            <param name="value">Address to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.Remove(LumiSoft.Net.Mail.Mail_t_Address)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="value">Address to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.ToArray">
            <summary>
            Copies addresses to new array.
            </summary>
            <returns>Returns addresses array.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.ToString">
            <summary>
            Returns address-list as string.
            </summary>
            <returns>Returns address-list as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.AcceptChanges">
            <summary>
            Resets IsModified property to false.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_AddressList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_AddressList.IsModified">
            <summary>
            Gets if list has modified since it was loaded.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_AddressList.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_AddressList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Returns the element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when <b>index</b> is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_AddressList.Mailboxes">
            <summary>
            Gets this address list mailboxes(group address mailboxes + mailboxes).
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_ReturnPath">
            <summary>
            Represents "Return-Path:" header. Defined in RFC 5322 3.6.7.
            </summary>
            <example>
            <code>
            RFC 5322 3.6.7.
                return     = "Return-Path:" path CRLF
                path       = angle-addr / ([CFWS] "&lt;" [CFWS] "&gt;" [CFWS])
                angle-addr = [CFWS] "&lt;" addr-spec "&gt;" [CFWS]
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_ReturnPath.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="address">Address. Value null means null-path.</param>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_ReturnPath.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Return-Path: &lt;jhon.doe@domain.com&gt;'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_ReturnPath.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_ReturnPath.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_ReturnPath.Name">
            <summary>
            Gets header field name. For example "Sender".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_ReturnPath.Address">
            <summary>
            Gets mailbox address. Value null means null-path.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs">
            <summary>
            This class provides data for <b>SIP_Dialog.RequestReceived</b> event and <b>SIP_Core.OnRequestReceived</b>> method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <param name="flow">SIP data flow.</param>
            <param name="request">Recieved request.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Dialog,LumiSoft.Net.SIP.Stack.SIP_ServerTransaction)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <param name="flow">SIP data flow.</param>
            <param name="request">Recieved request.</param>
            <param name="dialog">SIP dialog which received request.</param>
            <param name="transaction">SIP server transaction which must be used to send response back to request maker.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.Flow">
            <summary>
            Gets data flow what received SIP request.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.Request">
            <summary>
            Gets the received rquest.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.ServerTransaction">
            <summary>
            Gets server transaction for that request. Server transaction is created when this property is 
            first accessed. If you don't need server transaction for that request, for example statless proxy, 
            just don't access this property. For ACK method, this method always return null, because ACK 
            doesn't create transaction !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.Dialog">
            <summary>
            Gets SIP dialog where Request belongs to. Returns null if Request doesn't belong any dialog.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ReadReplyCode">
            <summary>
            Reply reading return codes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.Ok">
            <summary>
            Read completed successfully.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.TimeOut">
            <summary>
            Read timed out.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.LengthExceeded">
            <summary>
            Maximum allowed Length exceeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.SocketClosed">
            <summary>
            Connected client closed connection.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.UnKnownError">
            <summary>
            UnKnown error, eception raised.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ReadException">
            <summary>
            Summary description for ReadException.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ReadException.#ctor(LumiSoft.Net.ReadReplyCode,System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:LumiSoft.Net.ReadException.ReadReplyCode">
            <summary>
            Gets read error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_NetType">
            <summary>
            Specifies UDP network type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.UdpBlocked">
            <summary>
            UDP is always blocked.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.OpenInternet">
            <summary>
            No NAT, public IP, no firewall.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.SymmetricUdpFirewall">
            <summary>
            No NAT, public IP, but symmetric UDP firewall.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.FullCone">
            <summary>
            A full cone NAT is one where all requests from the same internal IP address and port are 
            mapped to the same external IP address and port. Furthermore, any external host can send 
            a packet to the internal host, by sending a packet to the mapped external address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.RestrictedCone">
            <summary>
            A restricted cone NAT is one where all requests from the same internal IP address and 
            port are mapped to the same external IP address and port. Unlike a full cone NAT, an external
            host (with IP address X) can send a packet to the internal host only if the internal host 
            had previously sent a packet to IP address X.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.PortRestrictedCone">
            <summary>
            A port restricted cone NAT is like a restricted cone NAT, but the restriction 
            includes port numbers. Specifically, an external host can send a packet, with source IP
            address X and source port P, to the internal host only if the internal host had previously 
            sent a packet to IP address X and port P.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.Symmetric">
            <summary>
            A symmetric NAT is one where all requests from the same internal IP address and port, 
            to a specific destination IP address and port, are mapped to the same external IP address and
            port.  If the same host sends a packet with the same source address and port, but to 
            a different destination, a different mapping is used. Furthermore, only the external host that
            receives a packet can send a UDP packet back to the internal host.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_MinSE">
            <summary>
            Implements SIP "Min-SE" value. Defined in RFC 4028.
            </summary>
            <remarks>
            <code>
            RFC 4028 Syntax:
                Min-SE = delta-seconds *(SEMI generic-param)
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Min-SE value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="minExpires">Minimum session expries value in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.Parse(System.String)">
            <summary>
            Parses "Min-SE" from specified value.
            </summary>
            <param name="value">SIP "Min-SE" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Min-SE" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.ToStringValue">
            <summary>
            Converts this to valid "Min-SE" value.
            </summary>
            <returns>Returns "Min-SE" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_MinSE.Time">
            <summary>
            Gets or sets time in seconds when session expires.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when value is less than 1.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Event">
            <summary>
            Implements SIP "Event" value. Defined in RFC 3265.
            </summary>
            <remarks>
            <code>
            RFC 3265 Syntax:
                Event       = event-type *( SEMI event-param )
                event-param = generic-param / ( "id" EQUAL token )
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Event.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP 'Event' value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Event.Parse(System.String)">
            <summary>
            Parses "Event" from specified value.
            </summary>
            <param name="value">SIP "Event" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Event.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Event" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Event.ToStringValue">
            <summary>
            Converts this to valid "Event" value.
            </summary>
            <returns>Returns "Event" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Event.EventType">
            <summary>
            Gets or sets event type.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null vallue is passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when emptu string passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Event.ID">
            <summary>
            Gets or sets 'id' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_HINFO">
            <summary>
            HINFO record.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_HINFO.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="cpu">Host CPU.</param>
            <param name="os">Host OS.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_HINFO.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_HINFO.CPU">
            <summary>
            Gets host's CPU.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_HINFO.OS">
            <summary>
            Gets host's OS.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_SessionCollection`1">
            <summary>
            This class implements TCP session collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Add(`0)">
            <summary>
            Adds specified TCP session to the colletion.
            </summary>
            <param name="session">TCP server session to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Remove(`0)">
            <summary>
            Removes specified TCP server session from the collection.
            </summary>
            <param name="session">TCP server session to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_SessionCollection`1.ToArray">
            <summary>
            Copies all TCP server session to new array. This method is thread-safe.
            </summary>
            <returns>Returns TCP sessions array.</returns>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_SessionCollection`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_SessionCollection`1.Item(System.String)">
            <summary>
            Gets TCP session with the specified ID.
            </summary>
            <param name="id">Session ID.</param>
            <returns>Returns TCP session with the specified ID.</returns>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SMTP_ClientException">
            <summary>
            SMTP client exception.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SMTP_ClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">SMTP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_ClientException.StatusCode">
            <summary>
            Gets SMTP status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_ClientException.ResponseText">
            <summary>
            Gets SMTP server response text after status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SMTP_ClientException.IsPermanentError">
            <summary>
            Gets if it is permanent SMTP(5xx) error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TimerConstants">
            <summary>
            This class holds known SIP timer constant values.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_ParticipantEventArgs">
            <summary>
            This claass provides data for <b>RTP_MultimediaSession.NewParticipant</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_ParticipantEventArgs.#ctor(LumiSoft.Net.RTP.RTP_Participant_Remote)">
            <summary>
            Default constructor.
            </summary>
            <param name="participant">RTP participant.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>participant</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_ParticipantEventArgs.Participant">
            <summary>
            Gets participant.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug">
            <summary>
            This class implements RTP multimedia session debugger/monitoring UI.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.#ctor(LumiSoft.Net.RTP.RTP_MultimediaSession)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">RTP multimedia session.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.InitUI">
            <summary>
            Creates and initializes UI.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.m_pSession_Error(System.Object,LumiSoft.Net.ExceptionEventArgs)">
            <summary>
            Is called when RTP session gets unhandled error.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.m_pSession_SessionCreated(System.Object,LumiSoft.Net.EventArgs{LumiSoft.Net.RTP.RTP_Session})">
            <summary>
            Is called when RTP multimedia session creates new session.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.m_pSession_NewParticipant(System.Object,LumiSoft.Net.RTP.RTP_ParticipantEventArgs)">
            <summary>
            This method is called when RTP session sees new remote participant.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.Participant_Removed(System.Object,System.EventArgs)">
            <summary>
            This method is called when RTP remote participant has disjoined the multimedia session.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.Participant_SourceAdded(System.Object,LumiSoft.Net.RTP.RTP_SourceEventArgs)">
            <summary>
            This method is called when participant creates new source. 
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.Source_StateChanged(System.Object,System.EventArgs)">
            <summary>
            This method is called when participant source state changes.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.Participant_SourceRemoved(System.Object,LumiSoft.Net.RTP.RTP_SourceEventArgs)">
            <summary>
            This method is called when participant closes source.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.FindParticipantNode(LumiSoft.Net.RTP.RTP_Participant)">
            <summary>
            Searches specified participant tree node.
            </summary>
            <param name="participant">RTP participant.</param>
            <returns>Returns specified participant tree node or null if no matching node.</returns>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.Session">
            <summary>
            Gets RTP session what UI debugs.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.ComboBoxItem">
            <summary>
            This class implements ComboBaox item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.ComboBoxItem.#ctor(System.String,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="text">Text.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.ComboBoxItem.ToString">
            <summary>
            Returns ComboBox text.
            </summary>
            <returns>eturns ComboBox text.</returns>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.ComboBoxItem.Text">
            <summary>
            Gets text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.ComboBoxItem.Tag">
            <summary>
            Gets user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics">
            <summary>
            This class provides data for RTP global statistic property grid.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.#ctor(LumiSoft.Net.RTP.RTP_Session)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">RTP session.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b></exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.Members">
            <summary>
            Gets total members count.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.Senders">
            <summary>
            Gets total members who send RPT data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtpPacketsSent">
            <summary>
            Gets total of RTP packets sent by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtpBytesSent">
            <summary>
            Gets total of RTP bytes(RTP headers included) sent by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtpPacketsReceived">
            <summary>
            Gets total of RTP packets received by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtpBytesReceived">
            <summary>
            Gets total of RTP bytes(RTP headers included) received by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtpFailedTransmissions">
            <summary>
            Gets number of times RTP packet sending has failed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtcpPacketsSent">
            <summary>
            Gets total of RTCP packets sent by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtcpBytesSent">
            <summary>
            Gets total of RTCP bytes(RTCP headers included) sent by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtcpPacketsReceived">
            <summary>
            Gets total of RTCP packets received by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtcpBytesReceived">
            <summary>
            Gets total of RTCP bytes(RTCP headers included) received by this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtcpFailedTransmissions">
            <summary>
            Gets number of times RTCP packet sending has failed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtcpInterval">
            <summary>
            Current RTCP reporting interval in seconds.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RtcpLastTransmission">
            <summary>
            Gets time when last RTCP report was sent.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.LocalCollisions">
            <summary>
            Gets number of times local SSRC collision dedected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RemoteCollisions">
            <summary>
            Gets number of times remote SSRC collision dedected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.LocalPacketsLooped">
            <summary>
            Gets number of times local packets loop dedected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SessionStatistics.RemotePacketsLooped">
            <summary>
            Gets number of times remote packets loop dedected.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ParticipantInfo">
            <summary>
            This class provides data for RTP participant property grid.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ParticipantInfo.#ctor(LumiSoft.Net.RTP.RTP_Participant)">
            <summary>
            Default constructor.
            </summary>
            <param name="participant">RTP local participant.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>participant</b> null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ParticipantInfo.Name">
            <summary>
            Gets or sets the real name, eg. "John Doe". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ParticipantInfo.Email">
            <summary>
            Gets or sets email address. For example "John.Doe@example.com". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ParticipantInfo.Phone">
            <summary>
            Gets or sets phone number. For example "+1 908 555 1212". Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ParticipantInfo.Location">
            <summary>
            Gets  or sets location string. It may be geographic address or for example chat room name.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ParticipantInfo.Tool">
            <summary>
            Gets or sets streaming application name/version.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ParticipantInfo.Note">
            <summary>
            Gets or sets note text. The NOTE item is intended for transient messages describing the current state
            of the source, e.g., "on the phone, can't talk". Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo">
            <summary>
            This class provides data for RTP "source" property grid.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.#ctor(LumiSoft.Net.RTP.RTP_Source)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">RTP source.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.State">
            <summary>
            Gets source state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.Session">
            <summary>
            Gets owner RTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.SSRC">
            <summary>
            Gets synchronization source ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.RtcpEP">
            <summary>
            Gets source RTCP end point. Value null means source haven't sent any RTCP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.RtpEP">
            <summary>
            Gets source RTP end point. Value null means source haven't sent any RTCP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.LastActivity">
            <summary>
            Gets last time when source sent RTP or RCTP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.LastRtcpPacket">
            <summary>
            Gets last time when source sent RTCP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SourceInfo.LastRtpPacket">
            <summary>
            Gets last time when source sent RTP packet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo">
            <summary>
            This class provides data for RTP "receive stream" property grid.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.#ctor(LumiSoft.Net.RTP.RTP_ReceiveStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">RTP receive stream.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.Session">
            <summary>
            Gets stream owner RTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.SeqNoWrapCount">
            <summary>
            Gets number of times <b>SeqNo</b> has wrapped around.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.FirstSeqNo">
            <summary>
            Gets first sequence number what this stream got.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.MaxSeqNo">
            <summary>
            Gets maximum sequnce number that stream has got.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.PacketsReceived">
            <summary>
            Gets how many RTP packets has received by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.PacketsMisorder">
            <summary>
            Gets how many RTP misorder packets has received by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.BytesReceived">
            <summary>
            Gets how many RTP data has received by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.PacketsLost">
            <summary>
            Gets how many RTP packets has lost during transmission.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.Jitter">
            <summary>
            Gets inter arrival jitter.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.LastSRTime">
            <summary>
            Gets time when last SR(sender report) was received. Returns <b>DateTime.MinValue</b> if no SR received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_ReceiveStreamInfo.DelaySinceLastSR">
            <summary>
            Gets delay between las SR(sender report) and now in seconds.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo">
            <summary>
            This class provides data for RTP "send stream" property grid.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.#ctor(LumiSoft.Net.RTP.RTP_SendStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">RTP send stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.Session">
            <summary>
            Gets stream owner RTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.SeqNoWrapCount">
            <summary>
            Gets number of times <b>SeqNo</b> has wrapped around.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.SeqNo">
            <summary>
            Gets next packet sequence number.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.LastPacketTime">
            <summary>
            Gets last packet send time.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.LastPacketRtpTimestamp">
            <summary>
            Gets last sent RTP packet RTP timestamp header value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.RtpPacketsSent">
            <summary>
            Gets how many RTP packets has sent by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.RtpBytesSent">
            <summary>
            Gets how many RTP bytes has sent by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.Debug.wfrm_RTP_Debug.RTP_SendStreamInfo.RtpDataBytesSent">
            <summary>
            Gets how many RTP data(no RTP header included) bytes has sent by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_Message">
            <summary>
            This class represent electronic mail message. Defined in RFC 5322.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromByte(System.Byte[])">
            <summary>
            Parses mail message from the specified byte array.
            </summary>
            <param name="data">Mail message data.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromFile(System.String)">
            <summary>
            Parses mail message from the specified file.
            </summary>
            <param name="file">File name with path from where to parse mail message.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>file</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Message.ParseFromStream(System.IO.Stream)">
            <summary>
            Parses mail message from the specified stream.
            </summary>
            <param name="stream">Stream from where to parse mail message. Parsing starts from current stream position.</param>
            <returns>Returns parsed mail message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Date">
            <summary>
            Gets or sets message date and time. Value <b>DateTime.MinValue</b> means not specified.
            </summary>
            <remarks>Specifies the date and time at which the creator of the message indicated that the 
            message was complete and ready to enter the mail delivery system.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.From">
            <summary>
            Gets or sets message author(s). Value null means not specified.
            </summary>
            <remarks>Specifies the author(s) of the message; that is, the mailbox(es) of the person(s) or 
            system(s) responsible for the writing of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Sender">
            <summary>
            Gets or sets message sender. Value null means not specified.
            </summary>
            <remarks>Specifies the mailbox of the agent responsible for the actual transmission of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ReplyTo">
            <summary>
            Gets or sets mailbox for replies to message. Value null means not specified.
            </summary>
            <remarks>When the "Reply-To:" field is present, it indicates the mailbox(es) to which the author of 
            the message suggests that replies be sent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.To">
            <summary>
            Gets or sets message primary recipient(s). Value null means not specified.
            </summary>
            <remarks>Contains the address(es) of the primary recipient(s) of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Cc">
            <summary>
            Gets or sets carbon-copy recipient mailbox. Value null means not specified.
            </summary>
            <remarks>Contains the addresses of others who are to receive the message, though the content of the message may not be directed at them.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Bcc">
            <summary>
            Gets or sets blind-carbon-copy recipient mailbox. Value null means not specified.
            </summary>
            <remarks>Contains addresses of recipients of the message whose addresses are not to be revealed to other recipients of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.MessageID">
            <summary>
            Gets or sets message identifier. Value null means not specified.
            </summary>
            <remarks>Contains a single unique message identifier that refers to a particular version of a particular message. 
            If the message is resent without changes, the original Message-ID is retained.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.InReplyTo">
            <summary>
            Gets or sets identify replied-to message(s). Value null means not specified.
            </summary>
            <remarks>The message identifier(s) of the original message(s) to which the current message is a reply.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.References">
            <summary>
            Gets or sets related message identifier(s). Value null means not specified.
            </summary>
            <remarks>The message identifier(s) of other message(s) to which the current message may be related. 
            In RFC 2822, the definition was changed to say that this header field contains a list of all Message-IDs
            of messages in the preceding reply chain.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Subject">
            <summary>
            Gets or sets topic of message. Value null means not specified.
            </summary>
            <remarks>Contains a short string identifying the topic of the message.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Comments">
            <summary>
            Gets or sets additional comments about the message. Value null means not specified.
            </summary>
            <remarks>Contains any additional comments on the text of the body of the message. 
            Warning: Some mailers will not show this field to recipients.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Keywords">
            <summary>
            Gets or sets message key words and/or phrases. Value null means not specified.
            </summary>
            <remarks>Contains a comma-separated list of important words and phrases that might be useful for the recipient.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentDate">
            <summary>
            Gets or sets date and time message is resent. Value <b>DateTime.MinValue</b> means not specified.
            </summary>
            <remarks>Contains the date and time that a message is reintroduced into the message transfer system.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentFrom">
            <summary>
            Gets or sets mailbox of person for whom message is resent. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox of the agent who has reintroduced the message into 
            the message transfer system, or on whose behalf the message has been resent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentSender">
            <summary>
            Gets or sets mailbox of person who actually resends the message. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox of the agent who has reintroduced the message into 
            the message transfer system, if this is different from the Resent-From value.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentTo">
            <summary>
            Gets or sets mailbox to which message is resent. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which the message has been resent.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentCc">
            <summary>
            Gets or sets mailbox(es) to which message is cc'ed on resend. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which message is cc'ed on resend.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentBcc">
            <summary>
            Gets or sets mailbox(es) to which message is bcc'ed on resend. Value null means not specified.
            </summary>
            <remarks>Contains the mailbox(es) to which message is bcc'ed on resend.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentReplyTo">
            <summary>
            Gets or sets resent reply-to. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ResentMessageID">
            <summary>
            Gets or sets message identifier for resent message. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ReturnPath">
            <summary>
            Gets or sets message return path. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Received">
            <summary>
            Gets mail transfer trace information. Value null means not specified.
            </summary>
            <remarks>Contains information about receipt of the current message by a mail transfer agent on the transfer path.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.DispositionNotificationTo">
            <summary>
            Gets or sets mailbox for sending disposition notification. Value null means not specified.
            </summary>
            <remarks>Indicates that the sender wants a disposition notification when this message 
            is received (read, processed, etc.) by its recipients.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.DispositionNotificationOptions">
            <summary>
            Gets or sets disposition notification options. Value null means not specified.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.AcceptLanguage">
            <summary>
            Gets or sets language that the message sender requests to be used for responses. Value null means not specified.
            </summary>
            <remarks>
            Indicates a language that the message sender requests to be used for responses.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.OriginalMessageID">
            <summary>
            Gets or sets original message identifier. Value null means not specified.
            </summary>
            <remarks>Original message identifier used with resend of message with alternative content format; 
            identifies the original message data to which it corresponds.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.PICSLabel">
            <summary>
            Gets or sets PICS rating label. Value null means not specified.
            </summary>
            <remarks>Ratings label to control selection (filtering) of messages according to the PICS protocol.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListArchive">
            <summary>
            Gets or sets URL of mailing list archive. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to browse the archives of the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListHelp">
            <summary>
            Gets or sets URL for mailing list information. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to get information about the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListID">
            <summary>
            Gets or sets mailing list identifier. Value null means not specified.
            </summary>
            <remarks>Stores an identification of the mailing list through which this message was distributed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListOwner">
            <summary>
            Gets or sets URL for mailing list owner's mailbox. Value null means not specified.
            </summary>
            <remarks>Contains the URL to send e-mail to the owner of the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListPost">
            <summary>
            Gets or sets URL for mailing list posting. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to send contributions to the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListSubscribe">
            <summary>
            Gets or sets URL for mailing list subscription. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to get a subscription to the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.ListUnsubscribe">
            <summary>
            Gets or sets URL for mailing list unsubscription. Value null means not specified.
            </summary>
            <remarks>Contains the URL to use to unsubscribe the mailing list from which this message was relayed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.MessageContext">
            <summary>
            Gets or sets type or context of message. Value null means not specified.
            </summary>
            <remarks>Provides information about the context and presentation characteristics of a message. 
            Can have the values 'voice-message', 'fax-message', 'pager-message', 'multimedia-message', 'text-message', or 'none'.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Importance">
            <summary>
            Gets or sets message importance. Value null means not specified.
            </summary>
            <remarks>A hint from the originator to the recipients about how important a message is. 
            Values: High, normal, or low.  Not used to control transmission speed.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Priority">
            <summary>
            Gets or sets message priority. Value null means not specified.
            </summary>
            <remarks>Can be 'normal', 'urgent', or 'non-urgent' and can influence transmission speed and delivery.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.Attachments">
            <summary>
            Gets this message attachments.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.BodyText">
            <summary>
            Gets message body text. Returns null if no body text available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_Message.BodyHtmlText">
            <summary>
            Gets message body html text. Returns null if no body html text available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Media.Codec.Audio.G711_ulaw">
            <summary>
            Implements G711 ulaw codec.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.Codec.Audio.AudioCodec">
            <summary>
            This class is base calss for audio codecs.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Audio.AudioCodec.SampleRate">
            <summary>
            Gets sample number of samples in second(hz). 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Audio.AudioCodec.BitsPerSample">
            <summary>
            Gets number of bits per sample.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.Codec.Audio.G711_ulaw.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.Codec.Audio.G711_ulaw.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes linear 16-bit linear PCM to 8-bit ulaw.
            </summary>
            <param name="buffer">Data to encode. Data must be in Little-Endian format.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to encode.</param>
            <returns>Returns encoded block.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference value.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Media.Codec.Audio.G711_ulaw.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes 8-bit ulaw to linear 16-bit PCM.
            </summary>
            <param name="buffer">Data to decode. Data must be in Little-Endian format.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to decode.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is riased when <b>buffer</b> is null reference value.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Audio.G711_ulaw.Name">
            <summary>
            Gets codec name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Audio.G711_ulaw.SampleRate">
            <summary>
            Gets sample number of samples in second(hz). 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Audio.G711_ulaw.BitsPerSample">
            <summary>
            Gets number of bits per sample.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioIn">
            <summary>
            This class implements PCM audio receiver.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioIn.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WebDav.WebDav_p_ResourceType">
            <summary>
            This class represents WebDav 'DAV:resourcetype' property. Defined in RFC 4918 15.9.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_p_ResourceType.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_p_ResourceType.Contains(System.String)">
            <summary>
            Checks if this 'resourcetype' property contains the specified resource type.
            </summary>
            <param name="resourceType">Resource type to check.</param>
            <returns>Retruns true if the colletion contains specified resource type.</returns>
        </member>
        <member name="M:LumiSoft.Net.WebDav.WebDav_p_ResourceType.Parse(System.Xml.XmlNode)">
            <summary>
            Parses WebDav_p_ResourceType from 'DAV:resourcetype' xml element.
            </summary>
            <param name="resourcetypeNode">The 'DAV:resourcetype' xml element.</param>
            <returns>Returns DAV resourcetype.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>resourcetypeNode</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when there are any parsing error.</exception>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p_ResourceType.Namespace">
            <summary>
            Gets property namespace.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p_ResourceType.Name">
            <summary>
            Gets property name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p_ResourceType.Value">
            <summary>
            Gets property value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.WebDav.WebDav_p_ResourceType.ResourceTypes">
            <summary>
            Gets resource types.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_ContentDisposition">
             <summary>
             Represents "Content-Disposition:" header. Defined in RFC 2183.
             </summary>
             <example>
             <code>
             RFC 2183.
                 In the extended BNF notation of [RFC 822], the Content-Disposition
                 header field is defined as follows:
            
                 disposition := "Content-Disposition" ":" disposition-type *(";" disposition-parm)
            
                 disposition-type := "inline" / "attachment" / extension-token
                                     ; values are not case-sensitive
            
                 disposition-parm := filename-parm 
                                     / creation-date-parm
                                     / modification-date-parm
                                     / read-date-parm
                                     / size-parm
                                     / parameter
            
                 filename-parm := "filename" "=" value
            
                 creation-date-parm := "creation-date" "=" quoted-date-time
             
                 modification-date-parm := "modification-date" "=" quoted-date-time
            
                 read-date-parm := "read-date" "=" quoted-date-time
            
                 size-parm := "size" "=" 1*DIGIT
            
                 quoted-date-time := quoted-string
                                     ; contents MUST be an RFC 822 `date-time'
                                     ; numeric timezones (+HHMM or -HHMM) MUST be used
             </code>
             </example>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentDisposition.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="dispositionType">The disposition-type. Known values are in <see cref="T:LumiSoft.Net.MIME.MIME_DispositionTypes">MIME_DispositionTypes</see>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dispositionType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentDisposition.#ctor">
            <summary>
            Internal parser constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_ContentDisposition.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Name">
            <summary>
            Returns always "Content-Disposition".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.DispositionType">
            <summary>
            Gets the disposition-type. Known values are in <see cref="T:LumiSoft.Net.MIME.MIME_DispositionTypes">MIME_DispositionTypes</see>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Parameters">
            <summary>
            Gets Content-Type parameters collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_FileName">
            <summary>
            Gets or sets the suggested file name. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.3.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_CreationDate">
            <summary>
            Gets or sets the creation date for a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.4.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_ModificationDate">
            <summary>
            Gets or sets the modification date of a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.5.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_ReadDate">
            <summary>
            Gets or sets the last read date of a file. Value DateTime.MinValue means not specified. Defined in RFC 2183 2.6.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_ContentDisposition.Param_Size">
            <summary>
            Gets or sets the size of a file. Value -1 means not specified. Defined in RFC 2183 2.7.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartEncrypted">
            <summary>
            This class represents MIME multipart/encrypted body. Defined in rfc 1847.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartEncrypted.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartEncrypted.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.SIP_Utils">
            <summary>
            SIP helper methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.ParseAddress(System.String)">
            <summary>
            Parses address from SIP To: header field.
            </summary>
            <param name="to">SIP header To: value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.UriToRequestUri(LumiSoft.Net.AbsoluteUri)">
            <summary>
            Converts URI to Request-URI by removing all not allowed Request-URI parameters from URI.
            </summary>
            <param name="uri">URI value.</param>
            <returns>Returns valid Request-URI value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.IsSipOrSipsUri(System.String)">
            <summary>
            Gets if specified value is SIP or SIPS URI.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is SIP or SIPS URI, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.IsTelUri(System.String)">
            <summary>
            Gets if specified URI is tel: or sip tel URI. There is special case when SIP URI can be tel:, 
            sip:+xxxx and sip:xxx;user=phone.
            </summary>
            <param name="uri">URI to check.</param>
            <returns>Returns true if specified URI is tel: URI.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.GetCredentials(LumiSoft.Net.SIP.Stack.SIP_Request,System.String)">
            <summary>
            Gets specified realm SIP proxy credentials. Returns null if none exists for specified realm.
            </summary>
            <param name="request">SIP reques.</param>
            <param name="realm">Realm(domain).</param>
            <returns>Returns specified realm credentials or null if none.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.ContainsOptionTag(LumiSoft.Net.SIP.Message.SIP_t_OptionTag[],System.String)">
            <summary>
            Gets is specified option tags constains specified option tag.
            </summary>
            <param name="tags">Option tags.</param>
            <param name="tag">Option tag to check.</param>
            <returns>Returns true if specified option tag exists.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.MethodCanEstablishDialog(System.String)">
            <summary>
            Gets if specified method can establish dialog.
            </summary>
            <param name="method">SIP method.</param>
            <returns>Returns true if specified SIP method can establish dialog, otherwise false.</returns>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.CreateTag">
            <summary>
            Creates tag for tag header filed. For example From:/To: tag value.
            </summary>
            <returns>Returns tag string.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.IsReliableTransport(System.String)">
            <summary>
            Gets if the specified transport is reliable transport.
            </summary>
            <param name="transport">SIP transport.</param>
            <returns>Returns if specified transport is reliable.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>transport</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.IsToken(System.String)">
            <summary>
            Gets if the specified value is "token".
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified valu is token, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection">
            <summary>
            SIP registration collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Add(LumiSoft.Net.SIP.Proxy.SIP_Registration)">
            <summary>
            Adds specified registration to collection.
            </summary>
            <param name="registration">Registration to add.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Remove(System.String)">
            <summary>
            Deletes specified registration and all it's contacts. 
            </summary>
            <param name="addressOfRecord">Registration address of record what to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Contains(System.String)">
            <summary>
            Gets if registration with specified name already exists.
            </summary>
            <param name="addressOfRecord">Address of record of resgistration.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.RemoveExpired">
            <summary>
            Removes all expired registrations from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Count">
            <summary>
            Gets number of registrations in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Item(System.String)">
            <summary>
            Gets registration with specified registration name. Returns null if specified registration doesn't exist.
            </summary>
            <param name="addressOfRecord">Address of record of resgistration.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Values">
            <summary>
            Gets SIP registrations what in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_MediaDescription">
            <summary>
            A SDP_MediaDescription represents an <B>m=</B> SDP message field. Defined in RFC 4566 5.14. Media Descriptions.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.Parse(System.String)">
            <summary>
            Parses media from "m" SDP message field.
            </summary>
            <param name="mValue">"m" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.ToValue">
            <summary>
            Converts this to valid media string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.MediaType">
            <summary>
            Gets or sets meadia type. Currently defined media are "audio", "video", "text", 
            "application", and "message", although this list may be extended in the future.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Port">
            <summary>
            Gets or sets the transport port to which the media stream is sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.NumberOfPorts">
            <summary>
            Gets or sets number of continuos media ports.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Protocol">
            <summary>
            Gets or sets transport protocol. Currently known protocols: UDP;RTP/AVP;RTP/SAVP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.MediaFormatDescription">
            <summary>
            Gets or sets media format description. The interpretation of the media 
            format depends on the value of the "proto" sub-field.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_ConnectionData">
            <summary>
            A SDP_ConnectionData represents an <B>c=</B> SDP message field. Defined in RFC 4566 5.7. Connection Data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_ConnectionData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_ConnectionData.Parse(System.String)">
            <summary>
            Parses media from "c" SDP message field.
            </summary>
            <param name="cValue">"m" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_ConnectionData.ToValue">
            <summary>
            Converts this to valid connection data stirng. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_ConnectionData.NetType">
            <summary>
            Gets net type. Currently it's always IN(Internet).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_ConnectionData.AddressType">
            <summary>
            Gets or sets address type. Currently defined values IP4 or IP6.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_ConnectionData.Address">
            <summary>
            Gets or sets connection address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Credentials">
            <summary>
            Implements SIP "credentials" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                credentials    = ("Digest" LWS digest-response) / other-response
                other-response = auth-scheme LWS auth-param *(COMMA auth-param)
                auth-scheme    = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Credentials.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP credentials value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Credentials.Parse(System.String)">
            <summary>
            Parses "credentials" from specified value.
            </summary>
            <param name="value">SIP "credentials" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Credentials.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "credentials" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Credentials.ToStringValue">
            <summary>
            Converts this to valid "credentials" value.
            </summary>
            <returns>Returns "credentials" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Credentials.Method">
            <summary>
            Gets or sets authentication method. Normally this value is always 'Digest'.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Credentials.AuthData">
            <summary>
            Gets or sets authentication data. That value depends on authentication type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Transport">
            <summary>
            This class holds SIP transports. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Transport.UDP">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Transport.TCP">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Transport.TLS">
            <summary>
            TCP + SSL protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_RValue">
            <summary>
            Implements SIP "r-value" value. Defined in RFC 4412.
            </summary>
            <remarks>
            <code>
            RFC 4412 Syntax:
                r-value    = namespace "." r-priority
                namespace  = token-nodot
                r-priority = token-nodot
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RValue.Parse(System.String)">
            <summary>
            Parses "r-value" from specified value.
            </summary>
            <param name="value">SIP "r-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "r-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RValue.ToStringValue">
            <summary>
            Converts this to valid "r-value" value.
            </summary>
            <returns>Returns "r-value" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RValue.Namespace">
            <summary>
            Gets or sets Namespace.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid Namespace value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RValue.Priority">
            <summary>
            Gets or sets priority.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid Priority value passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.vCard">
            <summary>
            Rfc 2426 vCard implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.ToByte">
            <summary>
            Stores vCard structure to byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.ToFile(System.String)">
            <summary>
            Stores vCard to the specified file.
            </summary>
            <param name="file">File name with path where to store vCard.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.ToStream(System.IO.Stream)">
            <summary>
            Stores vCard structure to the specified stream.
            </summary>
            <param name="stream">Stream where to store vCard structure.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.Parse(System.String)">
            <summary>
            Parses vCard from the specified file.
            </summary>
            <param name="file">vCard file with path.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.Parse(System.IO.Stream)">
            <summary>
            Parses vCard from the specified stream.
            </summary>
            <param name="stream">Stream what contains vCard.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Items">
            <summary>
            Gets reference to vCard items.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Version">
            <summary>
            Gets or sets vCard version. Returns null if VERSION: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Name">
            <summary>
            Gets or sets name info.  Returns null if N: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.FormattedName">
            <summary>
            Gets or sets formatted(Display name) name.  Returns null if FN: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.NickName">
            <summary>
            Gets or sets nick name. Returns null if NICKNAME: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Photo">
            <summary>
            Gets or sets person photo. Returns null if PHOTO: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.BirthDate">
            <summary>
            Gets or sets birth date. Returns DateTime.MinValue if not set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.PhoneNumbers">
            <summary>
            Gets phone number collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.EmailAddresses">
            <summary>
            Gets email addresses collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Title">
            <summary>
            Gets or sets job title. Returns null if TITLE: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Role">
            <summary>
            Gets or sets role. Returns null if ROLE: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Organization">
            <summary>
            Gets or sets organization name. Usually this value is: comapny;department;office. Returns null if ORG: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.NoteText">
            <summary>
            Gets or sets note text. Returns null if NOTE: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.UID">
            <summary>
            Gets or sets vCard unique ID. Returns null if UID: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.HomeURL">
            <summary>
            Gets or sets vCard home URL.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.WorkURL">
            <summary>
            Gets or sets vCard Work URL.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldParameterCollection">
            <summary>
            Header field parameters collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.#ctor(LumiSoft.Net.Mime.ParametizedHeaderField)">
            <summary>
            Default constructor.
            </summary>
            <param name="headerField">Header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header field parameter with specified name and value to the end of the collection.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="parameterValue">Parameter value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Remove(System.String)">
            <summary>
            Removes specified header field parameter from the collection.
            </summary>
            <param name="parameterName">The name of the header field parameter to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Clear">
            <summary>
            Clears the collection of all header field parameters.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Contains(System.String)">
            <summary>
            Gets if collection contains specified parameter.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Item(System.String)">
            <summary>
            Gets or sets specified parameter value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Count">
            <summary>
            Gets header field parameters count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.ContentTransferEncoding_enum">
            <summary>
            Rfc 2045 6. Content-Transfer-Encoding. Specified how entity data is encoded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum._7bit">
            <summary>
            Rfc 2045 2.7. 7bit data.
            "7bit data" refers to data that is all represented as relatively
            short lines with 998 octets or less between CRLF line separation
            sequences [RFC-821].  No octets with decimal values greater than 127
            are allowed and neither are NULs (octets with decimal value 0).  CR
            (decimal value 13) and LF (decimal value 10) octets only occur as
            part of CRLF line separation sequences.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum._8bit">
            <summary>
            Rfc 2045 2.8. 8bit data.
            "8bit data" refers to data that is all represented as relatively
            short lines with 998 octets or less between CRLF line separation
            sequences [RFC-821]), but octets with decimal values greater than 127
            may be used.  As with "7bit data" CR and LF octets only occur as part
            of CRLF line separation sequences and no NULs are allowed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Binary">
            <summary>
            Rfc 2045 2.9. Binary data.
            "Binary data" refers to data where any sequence of octets whatsoever is allowed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.QuotedPrintable">
            <summary>
            Rfc 2045 6.7 Quoted-Printable Content-Transfer-Encoding.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Base64">
            <summary>
            Rfc 2045 6.8 Base64 Content-Transfer-Encoding.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.NotSpecified">
            <summary>
            Content-Transfer-Encoding field isn't available(doesn't exist).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Unknown">
            <summary>
            Content transfer encoding is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.IncompleteDataException">
            <summary>
            The exception that is thrown when incomplete data received.
            For example for ReadPeriodTerminated() method reaches end of stream before getting period terminator.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.IncompleteDataException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.IncompleteDataException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.DataSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed data size has exceeded.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.DataSizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo">
            <summary>
            Provides data to event GetMessagesInfo.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo.FolderInfo">
            <summary>
            Gets folder info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo.ErrorText">
            <summary>
            Gets or sets custom error text, which is returned to client. Null value means no error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.UA.SIP_UA">
            <summary>
            This class implements SIP UA. Defined in RFC 3261 8.1.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA.m_pStack_RequestReceived(System.Object,LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            This method is called when SIP stack received new message.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA.Call_StateChanged(System.Object,System.EventArgs)">
            <summary>
            Thsi method is called when call state has chnaged.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA.CreateCall(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Creates call to <b>invite</b> specified recipient.
            </summary>
            <param name="invite">INVITE request.</param>
            <returns>Returns created call.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>invite</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumnets has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA.OnRequestReceived(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Raises <b>RequestReceived</b> event.
            </summary>
            <param name="request">SIP request.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.UA.SIP_UA.OnIncomingCall(LumiSoft.Net.SIP.UA.SIP_UA_Call)">
            <summary>
            Raises event <b>IncomingCall</b>.
            </summary>
            <param name="call">Incoming call.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA.Stack">
            <summary>
            Gets SIP stack.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.UA.SIP_UA.Calls">
            <summary>
            Gets active calls.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.SIP.UA.SIP_UA.RequestReceived">
            <summary>
            Is raised when user agent get new SIP request.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.UA.SIP_UA.IncomingCall">
            <summary>
            Is raised when new incoming call.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Hop">
            <summary>
            Implements SIP hop(address,port,transport). Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Hop.#ctor(System.Net.IPEndPoint,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="ep">IP end point.</param>
            <param name="transport">SIP transport to use.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ep</b> or <b>transport</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Hop.#ctor(System.Net.IPAddress,System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address.</param>
            <param name="port">Destination port.</param>
            <param name="transport">SIP transport to use.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> or <b>transport</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Hop.EndPoint">
            <summary>
            Gets target IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Hop.IP">
            <summary>
            Gets target IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Hop.Port">
            <summary>
            Gets target port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Hop.Transport">
            <summary>
            Gets target SIP transport.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_PayloadTypes">
            <summary>
            RTP payload specifies data type which is RTP packet.
            IANA registered RTP payload types. Defined in http://www.iana.org/assignments/rtp-parameters.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.PCMU">
            <summary>
            PCMU8(u-law) audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.GSM">
            <summary>
            GSM audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.G723">
            <summary>
            G723 audio codec.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.DVI4_8000">
            <summary>
            DVI4 8khz audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.DVI4_16000">
            <summary>
            DVI4 16khz audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.LPC">
            <summary>
            LPC audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.PCMA">
            <summary>
            PCMA(a-law) audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.G722">
            <summary>
            G722 audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.L16_1CH">
            <summary>
            L16 1 channel audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.L16_2CH">
            <summary>
            L16 2 channel audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.QCELP">
            <summary>
            QCELP audio codec.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.MPA">
            <summary>
            MPA audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.G728">
            <summary>
            G728 audio codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.DVI4_11025">
            <summary>
            DVI4 11025hz audio codec.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.DVI4_22050">
            <summary>
            DVI4 220505hz audio codec.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.G729">
            <summary>
            G729 audio codec.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.CELB">
            <summary>
            CELB video codec. Defined in RFC 2029.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.JPEG">
            <summary>
            JPEG video codec. Defined in RFC 2435.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.NV">
            <summary>
            NV video codec. Defined in RFC 3551.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.H261">
            <summary>
            H261 video codec. Defined in RFC 2032.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.MPV">
            <summary>
            H261 video codec. Defined in RFC 2250.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.MP2T">
            <summary>
            MP2T video codec. Defined in RFC 2250.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.RTP.RTP_PayloadTypes.H263">
            <summary>
            H263 video codec.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk">
            <summary>
            This class implements RTCP SDES packet one "chunk". 
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.#ctor(System.UInt32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">SSRC or CSRC identifier.</param>
            <param name="cname">Canonical End-Point Identifier.</param>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.#ctor">
            <summary>
            Parser constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Parse(System.Byte[],System.Int32@)">
            <summary>
            Parses SDES chunk from the specified buffer.
            </summary>
            <param name="buffer">Buffer which contains SDES chunk.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores SDES junk to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Source">
            <summary>
            Gets SSRC or CSRC identifier.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.CName">
            <summary>
            Gets Canonical End-Point Identifier.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Name">
            <summary>
            Gets or sets the real name, eg. "John Doe". Value null means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Email">
            <summary>
            Gets or sets email address. For example "John.Doe@example.com". Value null means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Phone">
            <summary>
            Gets or sets phone number. For example "+1 908 555 1212". Value null means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Location">
            <summary>
            Gets or sets location string. It may be geographic address or for example chat room name.
            Value null means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Tool">
            <summary>
            Gets or sets streaming application name/version.
            Value null means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Note">
            <summary>
            Gets or sets note text. The NOTE item is intended for transient messages describing the current state
            of the source, e.g., "on the phone, can't talk". Value null means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES_Chunk.Size">
            <summary>
            Gets number of bytes needed for this SDES chunk.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.PortRange">
            <summary>
            This class holds UDP or TCP port range.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.PortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="start">Start port.</param>
            <param name="end">End port.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the aruments value is out of range.</exception>
        </member>
        <member name="P:LumiSoft.Net.PortRange.Start">
            <summary>
            Gets start port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.PortRange.End">
            <summary>
            Gets end port.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.LineReader">
            <summary>
            This class implements "line" reader, LF and CRLF lines are supported.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream from where to read lines.</param>
            <param name="owner">Specifies if <b>LineReader</b> is owner of <b>stream</b>. 
            <param name="bufferSize">Read buffer size, value 1 means no buffering.</param>
            If this value is true, closing reader will close <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.ReadLine">
            <summary>
            Reads line from source stream. Returns null if end of stream(EOS) reached.
            </summary>
            <returns>Returns readed line or null if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.ReadLine(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads binary line and stores it to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="offset">Start offset in the buffer.</param>
            <param name="count">Maximum number of bytes store to the buffer.</param>
            <param name="exceededAction">Specifies how reader acts when line buffer too small.</param>
            <returns>Returns number of bytes stored to <b>buffer</b> or -1 if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when line is bigger than <b>buffer</b> can store.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.ReadLine(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.SizeExceededAction,System.Int32@)">
            <summary>
            Reads binary line and stores it to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="offset">Start offset in the buffer.</param>
            <param name="count">Maximum number of bytes store to the buffer.</param>
            <param name="exceededAction">Specifies how reader acts when line buffer too small.</param>
            <param name="rawBytesReaded">Gets raw number of bytes readed from source.</param>
            <returns>Returns number of bytes stored to <b>buffer</b> or -1 if end of stream reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Is raised when line is bigger than <b>buffer</b> can store.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.LineReader.SyncStream">
            <summary>
            Sets stream position to the place we have consumed from stream and clears buffer data.
            For example if we have 10 byets in buffer, stream position is actually +10 bigger than 
            we readed, the result is that stream.Position -= 10 and buffer is cleared.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when source stream won't support seeking.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.Stream">
            <summary>
            Gets source stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.IsStreamOwner">
            <summary>
            Gets if line reader is <b>Stream</b> owner.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.Charset">
            <summary>
            Gets or sets charset to us for deocoding bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.AvailableInBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.IO.LineReader.CanSyncStream">
            <summary>
            Gets if line reader can synchronize source stream to actual readed data position.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut">
            <summary>
            This class implements PCM audio player.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.#ctor(LumiSoft.Net.Media.AudioOutDevice,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="device">Audio aoutput device.</param>
            <param name="samplesPerSec">Sample rate, in samples per second (hertz).</param>
            <param name="bitsPerSample">Bits per sample. For PCM 8 or 16 are the only valid values.</param>
            <param name="channels">Number of channels.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>device</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes specified audio data bytes to the active audio device. If player is currently playing, data will be queued for playing.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Offset int the <b>buffer</b>.</param>
            <param name="count">Number of bytes available in the <b>buffer</b>. Data boundary must n * BlockSize.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the argument value is out of allowed range.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.Devices">
            <summary>
            Gets all available audio output devices.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.OutputDevice">
            <summary>
            Gets audio output device where audio is outputed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.SamplesPerSec">
            <summary>
            Gets number of samples per second.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.BitsPerSample">
            <summary>
            Gets number of bits per sample.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.Channels">
            <summary>
            Gets number of channels.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.BlockSize">
            <summary>
            Gets one sample block size in bytes (nChannels * (bitsPerSample / 8)).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.Volume">
            <summary>
            Gets or sets volume level. Value 0 is mute and value 100 is maximum.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut">
            <summary>
            This class provides windows native waveOut implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.#ctor(LumiSoft.Net.Media.AudioOutDevice,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="outputDevice">Output device.</param>
            <param name="samplesPerSec">Sample rate, in samples per second (hertz). For PCM common values are 
            8.0 kHz, 11.025 kHz, 22.05 kHz, and 44.1 kHz.</param>
            <param name="bitsPerSample">Bits per sample. For PCM 8 or 16 are the only valid values.</param>
            <param name="channels">Number of channels.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>outputDevice</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the aruments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.Finalize">
            <summary>
            Default destructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.OnWaveOutProc(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method is called when wav device generates some event.
            </summary>
            <param name="hdrvr">Handle to the waveform-audio device associated with the callback.</param>
            <param name="uMsg">Waveform-audio output message.</param>
            <param name="dwUser">User-instance data specified with waveOutOpen.</param>
            <param name="dwParam1">Message parameter.</param>
            <param name="dwParam2">Message parameter.</param>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.OnCleanUpFirstBlock(System.Object)">
            <summary>
            Cleans up the first data block in play queue.
            </summary>
            <param name="state">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.Play(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Plays specified audio data bytes. If player is currently playing, data will be queued for playing.
            </summary>
            <param name="audioData">Audio data. Data boundary must n * BlockSize.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to play form the specified offset.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>audioData</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>audioData</b> is with invalid length.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.WaveOut.Devices">
            <summary>
            Gets all available output audio devices.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.WaveOut.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.WaveOut.IsPlaying">
            <summary>
            Gets if wav player is currently playing something.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.WaveOut.Volume">
            <summary>
            Gets or sets volume level. Value 0 is mute and value 100 is maximum.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut.waveOutProc">
            <summary>
            The waveOutProc function is the callback function used with the waveform-audio output device.
            </summary>
            <param name="hdrvr">Handle to the waveform-audio device associated with the callback.</param>
            <param name="uMsg">Waveform-audio output message.</param>
            <param name="dwUser">User-instance data specified with waveOutOpen.</param>
            <param name="dwParam1">Message parameter.</param>
            <param name="dwParam2">Message parameter.</param>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR">
            <summary>
            This class holds MMSYSERR errors.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.NOERROR">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.ERROR">
            <summary>
            Unspecified error.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.BADDEVICEID">
            <summary>
            Device ID out of range.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.NOTENABLED">
            <summary>
            Driver failed enable.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.ALLOCATED">
            <summary>
            Device already allocated.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.INVALHANDLE">
            <summary>
            Device handle is invalid.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.NODRIVER">
            <summary>
            No device driver present.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.NOMEM">
            <summary>
            Memory allocation error.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.NOTSUPPORTED">
            <summary>
            Function isn't supported.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.BADERRNUM">
            <summary>
            Error value out of range.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.INVALFLAG">
            <summary>
            Invalid flag passed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.INVALPARAM">
            <summary>
            Invalid parameter passed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.HANDLEBUSY">
            <summary>
            Handle being used simultaneously on another thread (eg callback).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.INVALIDALIAS">
            <summary>
            Specified alias not found.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.BADDB">
            <summary>
            Bad registry database.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.KEYNOTFOUND">
            <summary>
            Registry key not found.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.READERROR">
            <summary>
            Registry read error.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.WRITEERROR">
            <summary>
            Registry write error.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.DELETEERROR">
            <summary>
            Eegistry delete error.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.VALNOTFOUND">
            <summary>
            Registry value not found. 
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.NODRIVERCB">
            <summary>
            Driver does not call DriverCallback.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.MMSYSERR.LASTERROR">
            <summary>
            Last error in range.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut.WavConstants">
            <summary>
            This class provides most used wav constants.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods">
            <summary>
            This class provides windows wav methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutClose(System.IntPtr)">
            <summary>
            Closes the specified waveform output device.
            </summary>
            <param name="hWaveOut">Handle to the waveform-audio output device. If the function succeeds, the handle is no longer valid after this call.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutGetDevCaps(System.UInt32,LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS@,System.Int32)">
            <summary>
            Queries a specified waveform device to determine its capabilities.
            </summary>
            <param name="hwo">Identifier of the waveform-audio output device. It can be either a device identifier or a Handle to an open waveform-audio output device.</param>
            <param name="pwoc">Pointer to a WAVEOUTCAPS structure to be filled with information about the capabilities of the device.</param>
            <param name="cbwoc">Size, in bytes, of the WAVEOUTCAPS structure.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutGetNumDevs">
            <summary>
            Retrieves the number of waveform output devices present in the system.
            </summary>
            <returns>The number of devices indicates success. Zero indicates that no devices are present or that an error occurred.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutGetPosition(System.IntPtr,System.Int32@,System.Int32)">
            <summary>
            Retrieves the current playback position of the specified waveform output device.
            </summary>
            <param name="hWaveOut">Handle to the waveform-audio output device.</param>
            <param name="lpInfo">Pointer to an MMTIME structure.</param>
            <param name="uSize">Size, in bytes, of the MMTIME structure.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutGetVolume(System.IntPtr,System.Int32@)">
            <summary>
            Queries the current volume setting of a waveform output device.
            </summary>
            <param name="hWaveOut">Handle to an open waveform-audio output device. This parameter can also be a device identifier.</param>
            <param name="dwVolume">Pointer to a variable to be filled with the current volume setting. 
            The low-order word of this location contains the left-channel volume setting, and the high-order 
            word contains the right-channel setting. A value of 0xFFFF represents full volume, and a 
            value of 0x0000 is silence.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutOpen(System.IntPtr@,System.Int32,LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX,LumiSoft.Net.Media.AudioOut.WaveOut.waveOutProc,System.Int32,System.Int32)">
            <summary>
            The waveOutOpen function opens the given waveform-audio output device for playback.
            </summary>
            <param name="hWaveOut">Pointer to a buffer that receives a handle identifying the open waveform-audio output device. Use the handle to identify the device when calling other waveform-audio output functions. This parameter might be NULL if the WAVE_FORMAT_QUERY flag is specified for fdwOpen.</param>
            <param name="uDeviceID">Identifier of the waveform-audio output device to open. It can be either a device identifier or a handle of an open waveform-audio input device.</param>
            <param name="lpFormat">Pointer to a WAVEFORMATEX structure that identifies the format of the waveform-audio data to be sent to the device. You can free this structure immediately after passing it to waveOutOpen.</param>
            <param name="dwCallback">Pointer to a fixed callback function, an event handle, a handle to a window, or the identifier of a thread to be called during waveform-audio playback to process messages related to the progress of the playback. If no callback function is required, this value can be zero.</param>
            <param name="dwInstance">User-instance data passed to the callback mechanism.</param>
            <param name="dwFlags">Flags for opening the device.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutPause(System.IntPtr)">
            <summary>
            Pauses playback on a specified waveform output device.
            </summary>
            <param name="hWaveOut">Handle to the waveform-audio output device.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutPrepareHeader(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Prepares a waveform data block for playback.
            </summary>
            <param name="hWaveOut">Handle to the waveform-audio output device.</param>
            <param name="lpWaveOutHdr">Pointer to a WAVEHDR structure that identifies the data block to be prepared. The buffer's base address must be aligned with the respect to the sample size.</param>
            <param name="uSize">Size, in bytes, of the WAVEHDR structure.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutReset(System.IntPtr)">
            <summary>
            Stops playback on a specified waveform output device and resets the current position to 0.
            </summary>
            <param name="hWaveOut">Handle to the waveform-audio output device.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutRestart(System.IntPtr)">
            <summary>
            Restarts a paused waveform output device.
            </summary>
            <param name="hWaveOut">Handle to the waveform-audio output device.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutSetVolume(System.IntPtr,System.Int32)">
            <summary>
            Sets the volume of a waveform output device.
            </summary>
            <param name="hWaveOut">Handle to an open waveform-audio output device. This parameter can also be a device identifier.</param>
            <param name="dwVolume">Specifies a new volume setting. The low-order word contains the left-channel 
            volume setting, and the high-order word contains the right-channel setting. A value of 0xFFFF 
            represents full volume, and a value of 0x0000 is silence.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutUnprepareHeader(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Cleans up the preparation performed by waveOutPrepareHeader.
            </summary>
            <param name="hWaveOut">Handle to the waveform-audio output device.</param>
            <param name="lpWaveOutHdr">Pointer to a WAVEHDR structure identifying the data block to be cleaned up.</param>
            <param name="uSize">Size, in bytes, of the WAVEHDR structure.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.WavMethods.waveOutWrite(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Sends a data block to the specified waveform output device.
            </summary>
            <param name="hWaveOut">Handle to the waveform-audio output device.</param>
            <param name="lpWaveOutHdr">Pointer to a WAVEHDR structure containing information about the data block.</param>
            <param name="uSize">Size, in bytes, of the WAVEHDR structure.</param>
            <returns>Returns value of MMSYSERR.</returns>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS">
            <summary>
            This class represents WAVEOUTCAPS structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS.wMid">
            <summary>
            Manufacturer identifier for the device driver for the device.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS.wPid">
            <summary>
            Product identifier for the device.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS.vDriverVersion">
            <summary>
            Version number of the device driver for the device.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS.szPname">
            <summary>
            Product name in a null-terminated string.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS.dwFormats">
            <summary>
            Standard formats that are supported.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS.wChannels">
            <summary>
            Number specifying whether the device supports mono (1) or stereo (2) output.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS.wReserved1">
            <summary>
            Packing.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEOUTCAPS.dwSupport">
            <summary>
            Optional functionality supported by the device.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX">
            <summary>
            This class represents WAVEFORMATEX structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX.wFormatTag">
            <summary>
            Waveform-audio format type. Format tags are registered with Microsoft Corporation for many 
            compression algorithms. A complete list of format tags can be found in the Mmreg.h header file. 
            For one- or two-channel PCM data, this value should be WAVE_FORMAT_PCM. When this structure is 
            included in a WAVEFORMATEXTENSIBLE structure, this value must be WAVE_FORMAT_EXTENSIBLE.</summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX.nChannels">
            <summary>
            Number of channels in the waveform-audio data. Monaural data uses one channel and stereo data 
            uses two channels.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX.nSamplesPerSec">
            <summary>
            Sample rate, in samples per second (hertz). If wFormatTag is WAVE_FORMAT_PCM, then common 
            values for nSamplesPerSec are 8.0 kHz, 11.025 kHz, 22.05 kHz, and 44.1 kHz.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX.nAvgBytesPerSec">
            <summary>
            Required average data-transfer rate, in bytes per second, for the format tag. If wFormatTag 
            is WAVE_FORMAT_PCM, nAvgBytesPerSec should be equal to the product of nSamplesPerSec and nBlockAlign.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX.nBlockAlign">
            <summary>
            Block alignment, in bytes. The block alignment is the minimum atomic unit of data for the wFormatTag 
            format type. If wFormatTag is WAVE_FORMAT_PCM or WAVE_FORMAT_EXTENSIBLE, nBlockAlign must be equal 
            to the product of nChannels and wBitsPerSample divided by 8 (bits per byte).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX.wBitsPerSample">
            <summary>
            Bits per sample for the wFormatTag format type. If wFormatTag is WAVE_FORMAT_PCM, then 
            wBitsPerSample should be equal to 8 or 16.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEFORMATEX.cbSize">
            <summary>
            Size, in bytes, of extra format information appended to the end of the WAVEFORMATEX structure.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR">
            <summary>
            This class represents WAVEHDR structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR.lpData">
            <summary>
            Long pointer to the address of the waveform buffer.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR.dwBufferLength">
            <summary>
            Specifies the length, in bytes, of the buffer.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR.dwBytesRecorded">
            <summary>
            When the header is used in input, this member specifies how much data is in the buffer. 
            When the header is used in output, this member specifies the number of bytes played from the buffer.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR.dwUser">
            <summary>
            Specifies user data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR.dwFlags">
            <summary>
            Specifies information about the buffer.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR.dwLoops">
            <summary>
            Specifies the number of times to play the loop.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR.lpNext">
            <summary>
            Reserved. This member is used within the audio driver to maintain a first-in, first-out linked list of headers awaiting playback.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Media.AudioOut.WaveOut.WAVEHDR.reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.AudioOut.WaveOut.PlayItem">
            <summary>
            This class holds queued wav play item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.PlayItem.#ctor(System.Runtime.InteropServices.GCHandle@,System.Runtime.InteropServices.GCHandle@,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="headerHandle">Header handle.</param>
            <param name="dataHandle">Wav header data handle.</param>
            <param name="dataSize">Data size in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.Media.AudioOut.WaveOut.PlayItem.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.WaveOut.PlayItem.HeaderHandle">
            <summary>
            Gets header handle.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.WaveOut.PlayItem.Header">
            <summary>
            Gets header.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.WaveOut.PlayItem.DataHandle">
            <summary>
            Gets wav header data pointer handle.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.AudioOut.WaveOut.PlayItem.DataSize">
            <summary>
            Gets wav header data size in bytes.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.WebDav.Client.WebDav_Client">
            <summary>
            Implements WebDav client. Defined in RFC 4918.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.Client.WebDav_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.WebDav.Client.WebDav_Client.PropFind(System.String,System.String[],System.Int32)">
            <summary>
            Executes PROPFIND method.
            </summary>
            <param name="requestUri">Request URI.</param>
            <param name="propertyNames">Properties to get. Value null means property names listing.</param>
            <param name="depth">Maximum depth inside collections to get.</param>
            <returns>Returns server returned responses.</returns>
        </member>
        <member name="M:LumiSoft.Net.WebDav.Client.WebDav_Client.MkCol(System.String)">
            <summary>
            Creates new collection to the specified path.
            </summary>
            <param name="uri">Target collection URI.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uri</b> null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.WebDav.Client.WebDav_Client.Get(System.String,System.Int64@)">
            <summary>
            Gets the specified resource stream.
            </summary>
            <param name="uri">Target resource URI.</param>
            <param name="contentSize">Returns resource size in bytes.</param>
            <returns>Retruns resource stream.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.WebDav.Client.WebDav_Client.Delete(System.String)">
            <summary>
            Deletes specified resource.
            </summary>
            <param name="uri">Target URI. For example: htt://server/test.txt .</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>uri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.WebDav.Client.WebDav_Client.Put(System.String,System.IO.Stream)">
            <summary>
            Creates specified resource to the specified location.
            </summary>
            <param name="targetUri">Target URI. For example: htt://server/test.txt .</param>
            <param name="stream">Stream which data to upload.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>targetUri</b> or <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.WebDav.Client.WebDav_Client.Copy(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Copies source URI resource to the target URI.
            </summary>
            <param name="sourceUri">Source URI.</param>
            <param name="targetUri">Target URI.</param>
            <param name="depth">If source is collection, then depth specified how many nested levels will be copied.</param>
            <param name="overwrite">If true and target resource already exists, it will be over written. 
            If false and target resource exists, exception is thrown.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sourceUri</b> or <b>targetUri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.WebDav.Client.WebDav_Client.Move(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Moves source URI resource to the target URI.
            </summary>
            <param name="sourceUri">Source URI.</param>
            <param name="targetUri">Target URI.</param>
            <param name="depth">If source is collection, then depth specified how many nested levels will be copied.</param>
            <param name="overwrite">If true and target resource already exists, it will be over written. 
            If false and target resource exists, exception is thrown.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sourceUri</b> or <b>targetUri</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.WebDav.Client.WebDav_Client.Credentials">
            <summary>
            Gets or sets credentials.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_RequestContext">
            <summary>
            This class represent incoming new(out of transaction) SIP request.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.#ctor(LumiSoft.Net.SIP.Proxy.SIP_Proxy,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Flow)">
            <summary>
            Default constructor.
            </summary>
            <param name="proxy">Owner SIP proxy server.</param>
            <param name="request">The request what is represented by this context.</param>
            <param name="flow">Data flow what received request.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>proxy</b>, <b>request</b> or <b>flow</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.ForwardStatelessly">
            <summary>
            Forwards current request statelessly.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.ChallengeRequest">
            <summary>
            Forces incoming request to authenticate by sending authentication-challenge response to request sender.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.SetUser(System.String)">
            <summary>
            Sets current user.
            </summary>
            <param name="user">User name.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.Request">
            <summary>
            Gets current incoming SIP request.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.Transaction">
            <summary>
            Gets or creates server transaction that will handle request.
            </summary>
            <remarks>If server transaction doesn't exist, it will be created.</remarks>
            <exception cref="T:System.InvalidOperationException">Is raised when this request-Method is ACK(ACK request is transactionless SIP method).</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.Targets">
            <summary>
            Gets proxy determined request targets.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.User">
            <summary>
            Gets authenticated user name. Returns null if user not authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RequestContext.ProxyContext">
            <summary>
            Gets or creates statefull proxy context for this request.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Provider">
            <summary>
            This class represent MIME entity body provider.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Provider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Provider.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.IO.SmartStream,LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Parses MIME entity body from specified stream.
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="stream">Stream from where to parse entity body.</param>
            <param name="defaultContentType">Default content type.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>, <b>strean</b> or <b>defaultContentType</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain">
            <summary>
            Implements "PLAIN" authenticaiton. Defined in RFC 4616.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Name">
            <summary>
            Returns always "PLAIN".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_Plain.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketEx">
            <summary>
            This class implements extended socket, provides usefull methods for reading and writing data to socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Socket wrapper. NOTE: You must pass connected socket here !
            </summary>
            <param name="socket">Socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Dispose">
            <summary>
            Clean up any resouces being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="endpoint">IP endpoint where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="endpoint">IP endpoint where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="host">Host name or IP where to connect.</param>
            <param name="port">TCP port number where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="host">Host name or IP where to connect.</param>
            <param name="port">TCP port number where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Disconnect">
            <summary>
            Disconnects socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shutdowns socket.
            </summary>
            <param name="how"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Bind(System.Net.EndPoint)">
            <summary>
            Associates a Socket with a local endpoint.
            </summary>
            <param name="loaclEP"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Listen(System.Int32)">
            <summary>
            Places a Socket in a listening state.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue. </param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Accept(System.Boolean)">
            <summary>
            TODO:
            </summary>
            <param name="ssl"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SwitchToSSL(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Switches socket to SSL mode. Throws excpetion is socket is already in SSL mode.
            </summary>
            <param name="certificate">Certificate to use for SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SwitchToSSL_AsClient">
            <summary>
            Switches socket to SSL mode. Throws excpetion is socket is already in SSL mode.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadByte">
            <summary>
            Reads byte from socket. Returns readed byte or -1 if socket is shutdown and tehre is no more data available.
            </summary>
            <returns>Returns readed byte or -1 if socket is shutdown and tehre is no more data available.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine">
            <summary>
            Reads line from socket. Maximum line length is 4000 bytes. NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine(System.Int32)">
            <summary>
            Reads line from socket.NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLineByte(System.Int32)">
            <summary>
            Reads line from socket.NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine(System.IO.Stream,System.Int32)">
            <summary>
            Reads line from socket and stores it to specified stream. NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="stream">Stream where to store readed line.</param>
            <param name="maxLineLength">Maximum line length in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadSpecifiedLength(System.Int32,System.IO.Stream)">
            <summary>
            Reads specified length of data from socket and store to specified stream.
            </summary>
            <param name="lengthToRead">Specifies how much data to read from socket.</param>
            <param name="storeStream">Stream where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadPeriodTerminated(System.Int32)">
            <summary>
            Reads period terminated string. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to buffer and exception
            is thrown after data reading.
            </summary>
            <param name="maxLength">Maximum data length in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadPeriodTerminated(System.IO.Stream,System.Int32)">
            <summary>
            Reads period terminated data. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to stream and exception
            is thrown after data reading.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Maximum data length in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.String)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.Byte[])">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to to wite to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to to wite to socket.</param>
            <param name="offset">Offset in data from where to start sending data.</param>
            <param name="length">Lengh of data to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.IO.Stream)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and will be readed to EOS.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and specified count will be readed.</param>
            <param name="count">Number of bytes to read from stream and write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WriteLine(System.String)">
            <summary>
            Writes specified line to socket. If line isn't CRLF terminated, CRLF is added automatically.
            </summary>
            <param name="line">Line to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WriteLine(System.Byte[])">
            <summary>
            Writes specified line to socket. If line isn't CRLF terminated, CRLF is added automatically.
            </summary>
            <param name="line">Line to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WritePeriodTerminated(System.String)">
            <summary>
            Writes period terminated string to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="data">String data to write.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Writes period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadLine(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading line from socket asynchrounously.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="stream">Stream where to store readed line.</param>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous line read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadLine(LumiSoft.Net.SocketCallBack,System.Object,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tries to read line from socket data buffer. If buffer doesn't contain line, 
            next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="callback">The method to be called when the asynchronous line read operation is completed.</param>
            <param name="tag">User data.</param>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLineLength">Specifies maximum line legth.</param>
            <param name="lastByte">Last byte what was readed pevious method call or -1 if first method call.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadLineBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadSpecifiedLength(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading specified amount of data from socket asynchronously.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="lengthToRead">Specifies number of bytes to read from socket.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadReadSpecifiedLength(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack,System.Int32)">
            <summary>
            Tries to read specified length of data from socket data buffer. If buffer doesn't contain data, 
            next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="lengthToRead">Specifies number of bytes to read from socket.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadSpecifiedLengthBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadPeriodTerminated(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading period terminated data. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to stream and exception
            is thrown after data reading.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Maximum data length in bytes.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadPeriodTerminated(LumiSoft.Net.SocketCallBack,System.Object,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tries to read period terminated data from socket data buffer. If buffer doesn't contain 
            period terminated data,next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="callback">The method to be called when the asynchronous period terminated read operation is completed.</param>
            <param name="tag">User data.</param>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Specifies maximum data legth in bytes.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
            <param name="lastByte">Last byte what was readed pevious method call or -1 if first method call.</param>
            <param name="lineBreak">Specifies if there is active line break.</param>
            <param name="expectCRLF">Specifies if terminating CRLF is expected.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadPeriodTerminatedBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWrite(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and will be readed to EOS.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginProcessingWrite(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack,System.Int32)">
            <summary>
            Starts sending data block to socket.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="countSent">Specifies how many data is sent.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWriteCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous datablock send is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWriteLine(System.String,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins specified line sending to socket asynchronously.
            </summary>
            <param name="line">Line to send.</param>
            <param name="callback">The method to be called when the asynchronous line write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWriteLine(System.String,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins specified line sending to socket asynchronously.
            </summary>
            <param name="line">Line to send.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous line write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWriteLineCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous WriteLine is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWritePeriodTerminated(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWritePeriodTerminated(System.IO.Stream,System.Boolean,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
            <param name="closeStream">Specifies if stream is closed after write operation has completed.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginProcessingWritePeriodTerminated(LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State)">
            <summary>
            Reads data block from state.Stream and begins writing it to socket.
            This method is looped while all data has been readed from state.Stream, then sate.Callback is called.
            </summary>
            <param name="state">State info.</param>        
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWritePeriodTerminatedCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous datablock send is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
            Sends data to the specified end point.
            </summary>
            <param name="data">Data to send.</param>
            <param name="remoteEP">Remote endpoint where to send data.</param>
            <returns>Returns number of bytes actualy sent.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BufferDataBlock">
            <summary>
            Buffers data from socket if needed. If there is data in buffer, no buffering is done.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginBufferDataBlock(LumiSoft.Net.SocketEx.BufferDataBlockCompleted,System.Object)">
            <summary>
            Start buffering data from socket asynchronously.
            </summary>
            <param name="callback">The method to be called when the asynchronous data buffering operation is completed.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginBufferDataBlockCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous BeginBufferDataBlock is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Encoding">
            <summary>
            Gets or sets socket default encoding. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Logger">
            <summary>
            Gets or sets logging source. If this is setted, reads/writes are logged to it.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.RawSocket">
            <summary>
            Gets raw uderlaying socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Connected">
            <summary>
            Gets if socket is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.SSL">
            <summary>
            Gets if socket is connected via SSL.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.ReadedCount">
            <summary>
            Gets how many bytes are readed through this socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.WrittenCount">
            <summary>
            Gets how many bytes are written through this socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.LastActivity">
            <summary>
            Gets when was last socket(read or write) activity.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State">
            <summary>
            BeginWritePeriodTerminated state obejct.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.#ctor(System.IO.Stream,System.Boolean,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="closeStream">Specifies if stream must be closed after reading is completed.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback what to call if asynchronous data writing completes.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Stream">
            <summary>
            Gets source stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.CloseStream">
            <summary>
            Gets if stream must be closed if reading completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Tag">
            <summary>
            Gets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Callback">
            <summary>
            Gets callback what must be called if asynchronous write ends.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.HasCRLF">
            <summary>
            Gets or sets if last sent data ends with CRLF.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.LastByte">
            <summary>
            Gets or sets what is last sent byte.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.CountSent">
            <summary>
            Gets or sets how many bytes has written to socket.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_AddressParam">
            <summary>
            Implements SIP_t_NameAddress + parameters value.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP_t_NameAddress + parameters value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.Parse(System.String)">
            <summary>
            Parses this from specified value.
            </summary>
            <param name="value">Address + params value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses this from address param string.
            </summary>
            <param name="reader">Reader what contains address param string.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.ToStringValue">
            <summary>
            Converts this to valid value string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.Address">
            <summary>
            Gets address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Encoding">
            <summary>
            Implements "encoding" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                encoding       = codings *(SEMI accept-param)
                codings        = content-coding / "*"
                content-coding = token
                accept-param   = ("q" EQUAL qvalue) / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Encoding.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Encoding.Parse(System.String)">
            <summary>
            Parses "encoding" from specified value.
            </summary>
            <param name="value">Accept-Encoding value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Encoding.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "encoding" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Encoding.ToStringValue">
            <summary>
            Converts this to valid "encoding" value.
            </summary>
            <returns>Returns "encoding" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Encoding.ContentEncoding">
            <summary>
            Gets or sets content encoding. Value *(STAR) means all content encodings.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Encoding.QValue">
            <summary>
            Gets or sets qvalue parameter. Targets are processed from highest qvalue to lowest. 
            This value must be between 0.0 and 1.0. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_Client">
            <summary>
            This class implements STUN client. Defined in RFC 3489.
            </summary>
            <example>
            <code>
            // Create new socket for STUN client.
            Socket socket = new Socket(AddressFamily.InterNetwork,SocketType.Dgram,ProtocolType.Udp);
            socket.Bind(new IPEndPoint(IPAddress.Any,0));
            
            // Query STUN server
            STUN_Result result = STUN_Client.Query("stunserver.org",3478,socket);
            if(result.NetType != STUN_NetType.UdpBlocked){
                // UDP blocked or !!!! bad STUN server
            }
            else{
                IPEndPoint publicEP = result.PublicEndPoint;
                // Do your stuff
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.Query(System.String,System.Int32,System.Net.Sockets.Socket)">
            <summary>
            Gets NAT info from STUN server.
            </summary>
            <param name="host">STUN server name or IP.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="socket">UDP socket to use.</param>
            <returns>Returns UDP netwrok info.</returns>
            <exception cref="T:System.Exception">Throws exception if unexpected error happens.</exception>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.GetPublicIP(System.String,System.Int32,System.Net.IPAddress)">
            <summary>
            Resolves local IP to public IP using STUN.
            </summary>
            <param name="stunServer">STUN server.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="localIP">Local IP address.</param>
            <returns>Returns public IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stunServer</b> or <b>localIP</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.IO.IOException">Is raised when no connection to STUN server.</exception>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.DoTransaction(LumiSoft.Net.STUN.Message.STUN_Message,System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Does STUN transaction. Returns transaction response or null if transaction failed.
            </summary>
            <param name="request">STUN message.</param>
            <param name="socket">Socket to use for send/receive.</param>
            <param name="remoteEndPoint">Remote end point.</param>
            <returns>Returns transaction response or null if transaction failed.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_CanRegisterEventHandler">
            <summary>
            Represents the method that will handle the SIP_Registrar.CanRegister event.
            </summary>
            <param name="userName">Authenticated user name.</param>
            <param name="address">Address to be registered.</param>
            <returns>Returns true if specified user can register specified address, otherwise false.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_Registrar">
            <summary>
            This class implements SIP registrar server. Defined in RFC 3261 10.3.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.#ctor(LumiSoft.Net.SIP.Proxy.SIP_Proxy)">
            <summary>
            Default constructor.
            </summary>
            <param name="proxy">Owner proxy.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>proxy</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.GetRegistration(System.String)">
            <summary>
            Gets specified registration. Returns null if no such registration.
            </summary>
            <param name="aor">Address of record of registration which to get.</param>
            <returns>Returns SIP registration or null if no match.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.SetRegistration(System.String,LumiSoft.Net.SIP.Message.SIP_t_ContactParam[])">
            <summary>
            Add or updates specified SIP registration info.
            </summary>
            <param name="aor">Registration address of record.</param>
            <param name="contacts">Registration address of record contacts to update.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.SetRegistration(System.String,LumiSoft.Net.SIP.Message.SIP_t_ContactParam[],LumiSoft.Net.SIP.Stack.SIP_Flow)">
            <summary>
            Add or updates specified SIP registration info.
            </summary>
            <param name="aor">Registration address of record.</param>
            <param name="contacts">Registration address of record contacts to update.</param>
            <param name="flow">SIP proxy local data flow what accpeted this contact registration.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.DeleteRegistration(System.String)">
            <summary>
            Deletes specified registration and all it's contacts.
            </summary>
            <param name="addressOfRecord">Registration address of record what to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.Register(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Handles REGISTER method.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.OnCanRegister(System.String,System.String)">
            <summary>
            Is called by SIP registrar if it needs to check if specified user can register specified address.
            </summary>
            <param name="userName">Authenticated user name.</param>
            <param name="address">Address to be registered.</param>
            <returns>Returns true if specified user can register specified address, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.OnAorRegistered(LumiSoft.Net.SIP.Proxy.SIP_Registration)">
            <summary>
            Raises <b>AorRegistered</b> event.
            </summary>
            <param name="registration">SIP registration.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.OnAorUnregistered(LumiSoft.Net.SIP.Proxy.SIP_Registration)">
            <summary>
            Raises <b>AorUnregistered</b> event.
            </summary>
            <param name="registration">SIP registration.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.OnAorUpdated(LumiSoft.Net.SIP.Proxy.SIP_Registration)">
            <summary>
            Raises <b>AorUpdated</b> event.
            </summary>
            <param name="registration">SIP registration.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registrar.Proxy">
            <summary>
            Gets owner proxy core.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registrar.Registrations">
            <summary>
            Gets current SIP registrations.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_Registrar.CanRegister">
            <summary>
            This event is raised when SIP registrar need to check if specified user can register specified address.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_Registrar.AorRegistered">
            <summary>
            This event is raised when new AOR(address of record) has been registered.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_Registrar.AorUnregistered">
            <summary>
            This event is raised when AOR(address of record) has been unregistered.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_Registrar.AorUpdated">
            <summary>
            This event is raised when AOR(address of record) has been updated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Directive">
            <summary>
            Implements SIP "directive" value. Defined in RFC 3841.
            </summary>
            <remarks>
            <code>
            RFC 3841 Syntax:
                directive          = proxy-directive / cancel-directive / fork-directive / recurse-directive /
                                     parallel-directive / queue-directive
                proxy-directive    = "proxy" / "redirect"
                cancel-directive   = "cancel" / "no-cancel"
                fork-directive     = "fork" / "no-fork"
                recurse-directive  = "recurse" / "no-recurse"
                parallel-directive = "parallel" / "sequential"
                queue-directive    = "queue" / "no-queue"
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Directive.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Directive.Parse(System.String)">
            <summary>
            Parses "directive" from specified value.
            </summary>
            <param name="value">SIP "directive" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Directive.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "directive" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Directive.ToStringValue">
            <summary>
            Converts this to valid "directive" value.
            </summary>
            <returns>Returns "directive" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Directive.Directive">
            <summary>
            Gets or sets directive.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType">
            <summary>
            Proccess directives. Defined in rfc 3841 9.1.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Proxy">
            <summary>
            This directive indicates whether the caller would like each server to proxy request. 
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Redirect">
            <summary>
            This directive indicates whether the caller would like each server to redirect request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Cancel">
            <summary>
            This directive indicates whether the caller would like each proxy server to send a CANCEL 
            request to forked branches.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.NoCancel">
            <summary>
            This directive indicates whether the caller would NOT want each proxy server to send a CANCEL 
            request to forked branches.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Fork">
            <summary>
            This type of directive indicates whether a proxy should fork a request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.NoFork">
            <summary>
            This type of directive indicates whether a proxy should proxy to only a single address.
            The server SHOULD proxy the request to the "best" address (generally the one with the highest q-value).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Recurse">
            <summary>
            This directive indicates whether a proxy server receiving a 3xx response should send 
            requests to the addresses listed in the response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.NoRecurse">
            <summary>
            This directive indicates whether a proxy server receiving a 3xx response should forward 
            the list of addresses upstream towards the caller.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Parallel">
            <summary>
            This directive indicates whether the caller would like the proxy server to proxy 
            the request to all known addresses at once.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Sequential">
            <summary>
            This directive indicates whether the caller would like the proxy server to go through
            all known addresses sequentially, contacting the next address only after it has received 
            a non-2xx or non-6xx final response for the previous one.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Queue">
            <summary>
            This directive indicates whether if the called party is temporarily unreachable, caller 
            wants to have its call queued.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.NoQueue">
            <summary>
            This directive indicates whether if the called party is temporarily unreachable, caller 
            don't want its call to be queued.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_OptionTags">
            <summary>
            SIP Option Tags. Defined in RFC 3261 27.1, defined values are in: http://www.iana.org/assignments/sip-parameters.
            </summary>
            <remarks>
            Option tags are used in header fields such as Require, Supported, Proxy-Require, and 
            Unsupported in support of SIP compatibility mechanisms for extensions (Section 19.2). 
            The option tag itself is a string that is associated with a particular SIP option (that is, an extension).
            </remarks>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.x100rel">
            <summary>
            This option tag is for reliability of provisional responses. When present in a 
            Supported header, it indicates that the UA can send or receive reliable provisional
            responses. When present in a Require header in a request it indicates that the UAS MUST 
            send all provisional responses reliably. When present in a Require header in a
            reliable provisional response, it indicates that the response is to be sent reliably.
            Defined in rfc 3262.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.early_session">
            <summary>
            A UA adding the early-session option tag to a message indicates that it understands the 
            early-session content disposition. Defined in rfc 3959.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.eventlist">
            <summary>
            Extension to allow subscriptions to lists of resources. Defined in rfc 4662.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.histinfo">
            <summary>
            When used with the Supported header, this option tag indicates support for the 
            History Information to be captured for requests and returned in subsequent responses. 
            This tag is not used in a Proxy-Require or Require header field since support of 
            History-Info is optional. Defined in rfc 4244.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.join">
            <summary>
            Support for the SIP Join Header. Defined in rfc 3911.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.norefersub">
            <summary>
            This option tag specifies a User Agent ability of accepting a REFER request without 
            establishing an implicit subscription (compared to the default case defined in RFC3515).
            Defined in rfc 3911.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.path">
            <summary>
            A SIP UA that supports the Path extension header field includes this option tag as a 
            header field value in a Supported header field in all requests generated by that UA. 
            Intermediate proxies may use the presence of this option tag in a REGISTER request to
            determine whether to offer Path service for for that request. If an intermediate proxy 
            requires that the registrar support Path for a request, then it includes this option tag 
            as a header field value in a Requires header field in that request. Defined in rfc 3327.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.precondition">
            <summary>
            An offerer MUST include this tag in  the Require header field if the offer contains 
            one or more "mandatory" strength-tags. If all the strength-tags in the description are
            "optional" or "none" the offerer MUST include this tag either in a Supported header field or 
            in a Require header field. Defined in rfc 3312.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.pref">
            <summary>
            This option tag is used to ensure that a server understands the callee capabilities 
            parameters used in the request. Defined in rfc 3840.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.privacy">
            <summary>
            This option tag indicates support for the Privacy mechanism. When used in the 
            Proxy-Require header, it indicates that proxy servers do not forward the request unless they 
            can provide the requested privacy service. This tag is not used in the Require or 
            Supported headers. Proxies remove this option tag before forwarding the request if the desired 
            privacy function has been performed. Defined in rfc 3323.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.replaces">
            <summary>
            This option tag indicates support for the SIP Replaces header. Defined in rfc 3891.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.resource_priority">
            <summary>
            Indicates or requests support for the resource priority mechanism. Defined in rfc 4412.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.sdp_anat">
            <summary>
            The option-tag sdp-anat is defined for use in the Require and Supported SIP [RFC3261] 
            header fields. SIP user agents that place this option-tag in a Supported header field understand 
            the ANAT semantics as defined in [RFC4091]. Defined in rfc 4092.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.sec_agree">
            <summary>
            This option tag indicates support for the Security Agreement mechanism. When used in the 
            Require, or Proxy-Require headers, it indicates that proxy servers are required to use the Security 
            Agreement mechanism.  When used in the Supported header, it indicates that the User Agent Client 
            supports the Security Agreement mechanism. When used in the Require header in the 494 (Security Agreement 
            Required) or 421 (Extension Required) responses, it indicates that the User Agent Client must use the 
            Security Agreement Mechanism. Defined in rfc 3329.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.tdialog">
            <summary>
            This option tag is used to identify the target dialog header field extension.  When used in a 
            Require header field, it implies that the recipient needs to support the Target-Dialog header field. 
            When used in a Supported header field, it implies that the sender of the message supports it. 
            Defined in rfc 4538.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.timer">
            <summary>
            This option tag is for support of the session timer extension. Inclusion in a Supported 
            header field in a request or response indicates that the UA is capable of performing 
            refreshes according to that specification.  Inclusion in a Require header in a request 
            means that the UAS must understand the session timer extension to process the request.  
            Inclusion in a Require header field in a response indicates that the UAC must look for the 
            Session-Expires header field in the response, and process accordingly. Defined in rfc 4028.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.PhoneNumberCollection">
            <summary>
            vCard phone number collection implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.#ctor(LumiSoft.Net.Mime.vCard.vCard)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner vCard.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.Add(LumiSoft.Net.Mime.vCard.PhoneNumberType_enum,System.String)">
            <summary>
            Add new phone number to the collection.
            </summary>
            <param name="type">Phone number type. Note: This value can be flagged value !</param>
            <param name="number">Phone number.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.Remove(LumiSoft.Net.Mime.vCard.PhoneNumber)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.Item">
            <summary>
            vCard structure item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Item.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Item name.</param>
            <param name="parameters">Item parameters.</param>
            <param name="value">Item encoded value value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Item.SetDecodedValue(System.String)">
            <summary>
            Sets item decoded value. Value will be encoded as needed and stored to item.Value property.
            Also property item.ParametersString is updated to reflect right encoding(always base64, required by rfc) and charset (utf-8).
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Item.ToItemString">
            <summary>
            Converts item to vCal item string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Item.FoldData(System.String)">
            <summary>
            Folds long data line to folded lines.
            </summary>
            <param name="data">Data to fold.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Item.Name">
            <summary>
            Gest item name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Item.ParametersString">
            <summary>
            Gets or sets item parameters.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Item.Value">
            <summary>
            Gets or sets item encoded value. NOTE: If you set this property value, you must encode data 
            by yourself and also set right ENCODING=encoding; and CHARSET=charset; prameter in item.ParametersString !!!
            Normally use method item.SetDecodedStringValue method instead, this does all you need.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Item.DecodedValue">
            <summary>
            Gets item decoded value. If param string specifies Encoding and/or Charset, 
            item.Value will be decoded accordingly.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.EmailAddress">
            <summary>
            vCard email address implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddress.#ctor(LumiSoft.Net.Mime.vCard.Item,LumiSoft.Net.Mime.vCard.EmailAddressType_enum,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="item">Owner vCard item.</param>
            <param name="type">Email type. Note: This value can be flagged value !</param>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddress.Changed">
            <summary>
            This method is called when some property has changed, wee need to update underlaying vCard item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddress.Parse(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Parses email address from vCard EMAIL structure string.
            </summary>
            <param name="item">vCard EMAIL item.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddress.EmailTypeToString(LumiSoft.Net.Mime.vCard.EmailAddressType_enum)">
            <summary>
            Converts EmailAddressType_enum to vCard item parameters string.
            </summary>
            <param name="type">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddress.Item">
            <summary>
            Gets underlaying vCrad item.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddress.EmailType">
            <summary>
            Gets or sets email type. Note: This property can be flagged value !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddress.Email">
            <summary>
            Gets or sets email address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.AddressList">
            <summary>
            Rfc 2822 3.4 address-list. Rfc defines two types of addresses mailbox and group.
            <p/>
            <p style="margin-top: 0; margin-bottom: 0"/><b>address-list</b> syntax: address *("," address).
            <p style="margin-top: 0; margin-bottom: 0"/><b>address</b> syntax: mailbox / group.
            <p style="margin-top: 0; margin-bottom: 0"/><b>mailbox</b> syntax: ['"'dispaly-name'"' ]&lt;localpart@domain&gt;.
            <p style="margin-top: 0; margin-bottom: 0"/><b>group</b> syntax: '"'dispaly-name'":' [mailbox *(',' mailbox)]';'.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Add(LumiSoft.Net.Mime.Address)">
            <summary>
            Adds a new address to the end of the collection.
            </summary>
            <param name="address">Address to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Insert(System.Int32,LumiSoft.Net.Mime.Address)">
            <summary>
            Inserts a new address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the address.</param>
            <param name="address">Address to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Remove(System.Int32)">
            <summary>
            Removes address at the specified index from the collection.
            </summary>
            <param name="index">Index of the address which to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Remove(LumiSoft.Net.Mime.Address)">
            <summary>
            Removes specified address from the collection.
            </summary>
            <param name="address">Address to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Clear">
            <summary>
            Clears the collection of all addresses.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Parse(System.String)">
            <summary>
            Parses address-list from string.
            </summary>
            <param name="addressList">Address list string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.ToAddressListString">
            <summary>
            Convert addresses to Rfc 2822 address-list string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.OnCollectionChanged">
            <summary>
            This called when collection has changed. Item is added,deleted,changed or collection cleared.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Mailboxes">
            <summary>
            Gets all mailbox addresses. Note: group address mailbox addresses are also included.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Item(System.Int32)">
            <summary>
            Gets address from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Count">
            <summary>
            Gets address count in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.BoundedHeaderField">
            <summary>
            Bound address-list to specified header field.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs">
            <summary>
            Provides data for GetUserACL event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="folderName">Folder name which ACL to get.</param>
            <param name="userName">User name which ACL to get.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.Folder">
            <summary>
            Gets folder name which ACL to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.UserName">
            <summary>
            Gets user name which ACL to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.ACL">
            <summary>
            Gets or sets user permissions(ACL) for specified folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags">
            <summary>
            Specifies what data is requested from IMAP server FETCH command.
            Fetch items are flags and can be combined. For example: IMAP_FetchItem_Flags.MessageFlags | IMAP_FetchItem_Flags.Header.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.UID">
            <summary>
            Message UID value.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.Size">
            <summary>
            Message size in bytes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.InternalDate">
            <summary>
            Message IMAP server INTERNALDATE.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.MessageFlags">
            <summary>
            Fetches message flags. (\SEEN \ANSWERED ...)
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.Header">
            <summary>
            Fetches message header.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.Message">
            <summary>
            Fetches full message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.Envelope">
            <summary>
            Fetches message ENVELOPE structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.BodyStructure">
            <summary>
            Fetches message BODYSTRUCTURE structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.All">
            <summary>
            Fetches all info.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ICMP.ICMP_Type">
            <summary>
            ICMP type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ICMP.ICMP_Type.EchoReply">
            <summary>
            Echo rely.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ICMP.ICMP_Type.TimeExceeded">
            <summary>
            Time to live exceeded reply.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ICMP.ICMP_Type.Echo">
            <summary>
            Echo.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ICMP.EchoMessage">
            <summary>
            Echo reply message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ICMP.EchoMessage.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address what sent echo message.</param>
            <param name="ttl">Time to live in milli seconds.</param>
            <param name="time">Time what elapsed before getting echo response.</param>
        </member>
        <member name="M:LumiSoft.Net.ICMP.EchoMessage.ToStringEx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.ICMP.EchoMessage.ToStringEx(LumiSoft.Net.ICMP.EchoMessage[])">
            <summary>
            
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.ICMP.EchoMessage.IPAddress">
            <summary>
            Gets IP address what sent echo message.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ICMP.EchoMessage.ReplyTime">
            <summary>
            Gets time in milliseconds what toke to get reply.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ICMP.Icmp">
            <summary>
            Icmp utils.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ICMP.Icmp.Trace(System.String)">
            <summary>
            Traces specified ip.
            </summary>
            <param name="destIP">Destination IP address.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.ICMP.Icmp.Trace(System.Net.IPAddress,System.Int32)">
            <summary>
            Traces specified ip.
            </summary>
            <param name="ip">IP address to tracce.</param>
            <param name="timeout">Send recieve timeout in milli seconds.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.ICMP.Icmp.Ping(System.Net.IPAddress,System.Int32)">
            <summary>
            Pings specified destination host.
            </summary>
            <param name="ip">IP address to ping.</param>
            <param name="timeout">Send recieve timeout in milli seconds.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.RCODE">
            <summary>
            Dns server reply codes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NO_ERROR">
            <summary>
            No error condition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.FORMAT_ERRROR">
            <summary>
            Format error - The name server was unable to interpret the query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.SERVER_FAILURE">
            <summary>
            Server failure - The name server was unable to process this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NAME_ERROR">
            <summary>
            Name Error - Meaningful only for responses from an authoritative name server, this code signifies that the
            domain name referenced in the query does not exist.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NOT_IMPLEMENTED">
            <summary>
            Not Implemented - The name server does not support the requested kind of query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.REFUSED">
            <summary>
            Refused - The name server refuses to perform the specified operation for policy reasons.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_RcptTo">
            <summary>
             This class holds RCPT TO: command value.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_RcptTo.#ctor(System.String,LumiSoft.Net.SMTP.SMTP_DSN_Notify,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mailbox">Mailbox value.</param>
            <param name="notify">DSN NOTIFY parameter value.</param>
            <param name="orcpt">DSN ORCPT parameter value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mailbox</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_RcptTo.Mailbox">
            <summary>
            Gets SMTP "mailbox" value. Actually this is just email address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_RcptTo.Notify">
            <summary>
            Gets DSN NOTIFY parameter value.
            This value specified when SMTP server should send delivery status notification.
            Defined in RFC 1891.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_RcptTo.ORCPT">
            <summary>
            Gets DSN ORCPT parameter value. Value null means not specified.
            This value specifies "original" recipient address where message is sent (has point only when message forwarded).
            Defined in RFC 1891.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_e_MessageStored">
            <summary>
            This class provided data for <b cref="E:LumiSoft.Net.SMTP.Server.SMTP_Session.MessageStoringCompleted">SMTP_Session.MessageStoringCompleted</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_e_MessageStored.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,System.IO.Stream,LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner SMTP server session.</param>
            <param name="stream">Message stream.</param>
            <param name="reply">SMTP server reply.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b>, <b>stream</b> or <b>reply</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_MessageStored.Session">
            <summary>
            Gets owner SMTP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_MessageStored.Stream">
            <summary>
            Gets message stream where message has stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_MessageStored.Reply">
            <summary>
            Gets or sets SMTP server reply.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_e_Ehlo">
            <summary>
            This class provided data for <b cref="E:LumiSoft.Net.SMTP.Server.SMTP_Session.Ehlo">SMTP_Session.Ehlo</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_e_Ehlo.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner SMTP server session.</param>
            <param name="domain">Ehlo/Helo domain name.</param>
            <param name="reply">SMTP server reply.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b>, <b>domain</b> or <b>reply</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_Ehlo.Session">
            <summary>
            Gets owner SMTP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_Ehlo.Domain">
            <summary>
            Gets connected client reported domain name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_Ehlo.Reply">
            <summary>
            Gets or sets SMTP server reply.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_SessionCompletedEventHandler">
            <summary>
            Represents the method that will handle the <b>Relay_Server.SessionCompleted</b> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_Server">
            <summary>
            This class implements SMTP relay server. Defined in RFC 2821.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.Start">
            <summary>
            Starts SMTP relay server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.Stop">
            <summary>
            Stops SMTP relay server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.Run">
            <summary>
            Processes relay queue.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.Run_CheckTimedOutSessions">
            <summary>
            This method checks timed out relay sessions while server is running.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.TryAddIpUsage(System.Net.IPAddress)">
            <summary>
            Increases specified IP address connactions count if maximum allowed connections to 
            the specified IP address isn't exceeded.
            </summary>
            <param name="ip">IP address.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
            <returns>Returns true if specified IP usage increased, false if maximum allowed connections to the specified IP address is exceeded.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.RemoveIpUsage(System.Net.IPAddress)">
            <summary>
            Decreases specified IP address connactions count.
            </summary>
            <param name="ip">IP address.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.GetIpUsage(System.Net.IPAddress)">
            <summary>
            Gets how many connections to the specified IP address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns number of connections to the specified IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.OnSessionCompleted(LumiSoft.Net.SMTP.Relay.Relay_Session,System.Exception)">
            <summary>
            Raises <b>SessionCompleted</b> event.
            </summary>
            <param name="session">Session what completed processing.</param>
            <param name="exception">Exception happened or null if relay completed successfully.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Server.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happned.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.IsDisposed">
            <summary>
            Gets if server is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.IsRunning">
            <summary>
            Gets if server is running.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.Bindings">
            <summary>
            Gets or sets relay server IP bindings.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.RelayMode">
            <summary>
            Gets or sets relay mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.Queues">
            <summary>
            Gets relay queues. Queue with lower index number has higher priority.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.SmartHostsBalanceMode">
            <summary>
            Gets or sets how smart hosts will be balanced.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.SmartHosts">
            <summary>
            Gets or sets smart hosts. Smart hosts must be in priority order, lower index number means higher priority.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.MaxConnections">
            <summary>
            Gets or sets maximum allowed concurent connections. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed connections to 1 IP address. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.SessionIdleTimeout">
            <summary>
            Gets or sets session idle time in seconds when it will be timed out.  Value 0 means unlimited (strongly not recomended).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.Sessions">
            <summary>
            Gets active relay sessions.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and relay server is not running.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Server.Logger">
            <summary>
            Gets or sets relay logger. Value null means no logging.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Relay.Relay_Server.SessionCompleted">
            <summary>
            This event is raised when relay session processing completes.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Relay.Relay_Server.Error">
            <summary>
            This event is raised when unhandled exception happens.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Relay.Relay_Queue">
            <summary>
            This class implements SMTP relay queue.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Queue.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Relay queue name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Queue.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Queue.QueueMessage(System.String,System.String,System.String,System.IO.Stream,System.Object)">
            <summary>
            Queues message for relay.
            </summary>
            <param name="from">Sender address.</param>
            <param name="to">Target recipient address.</param>
            <param name="messageID">Message ID.</param>
            <param name="message">Raw mime message. Message reading starts from current position.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>to</b>,<b>to</b>,<b>messageID</b> or <b>message</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Queue.QueueMessage(System.String,System.String,LumiSoft.Net.SMTP.SMTP_DSN_Ret,System.String,System.String,LumiSoft.Net.SMTP.SMTP_DSN_Notify,System.String,System.IO.Stream,System.Object)">
            <summary>
            Queues message for relay.
            </summary>
            <param name="from">Sender address.</param>
            <param name="envelopeID">Envelope ID_(MAIL FROM: ENVID).</param>
            <param name="ret">Specifies what parts of message are returned in DSN report.</param>
            <param name="to">Target recipient address.</param>
            <param name="originalRecipient">Original recipient(RCPT TO: ORCPT).</param>
            <param name="notify">DSN notify condition.</param>
            <param name="messageID">Message ID.</param>
            <param name="message">Raw mime message. Message reading starts from current position.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>to</b>,<b>to</b>,<b>messageID</b> or <b>message</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Relay.Relay_Queue.DequeueMessage">
            <summary>
            Dequeues message from queue. If there are no messages, this method returns null.
            </summary>
            <returns>Returns queued relay message or null if no messages.</returns>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Queue.Name">
            <summary>
            Gets queue name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Relay.Relay_Queue.Count">
            <summary>
            Gets number of queued items in queue.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_SourceEventArgs">
            <summary>
            This class provides data for RTP source related evetns.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_SourceEventArgs.#ctor(LumiSoft.Net.RTP.RTP_Source)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">RTP source.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_SourceEventArgs.Source">
            <summary>
            Gets RTP source.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_h_Provider">
            <summary>
            This class represents MIME headers provider.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Provider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_h_Provider.Parse(System.String)">
            <summary>
            Parses specified header field.
            </summary>
            <param name="field">Header field string (Name: value).</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>field</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Provider.DefaultHeaderField">
            <summary>
            Gets or sets default header field what is used to reperesent unknown header fields.
            </summary>
            <remarks>This property value value must be based on <see cref="T:LumiSoft.Net.MIME.MIME_h"/> class.</remarks>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_h_Provider.HeaderFields">
            <summary>
            Gets header fields parsers collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Text">
            <summary>
            This class represents MIME text/xxx bodies. Defined in RFC 2045.
            </summary>
            <remarks>
            The "text" media type is intended for sending material which is principally textual in form.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Text.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaSubType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Text.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Text.SetText(System.String,System.Text.Encoding,System.String)">
            <summary>
            Sets text.
            </summary>
            <param name="transferEncoding">Content transfer encoding.</param>
            <param name="charset">Charset to use to encode text. If not sure, utf-8 is recommended.</param>
            <param name="text">Text.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>transferEncoding</b>, <b>charset</b> or <b>text</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Text.GetCharset">
            <summary>
            Gets charset from Content-Type. If char set isn't specified, "ascii" is defined as default and it will be returned.
            </summary>
            <returns>Returns content charset.</returns>
            <exception cref="T:System.ArgumentException">Is raised when Content-Type has not supported charset parameter value.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_Text.Text">
            <summary>
            Gets body decoded text.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when not supported content-type charset or not supported content-transfer-encoding value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when body contains not supported Content-Transfer-Encoding.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_Utils">
            <summary>
            This class provides mail message related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_Utils.SMTP_Mailbox(LumiSoft.Net.MIME.MIME_Reader)">
            <summary>
            Reads SMTP "Mailbox" from the specified MIME reader.
            </summary>
            <param name="reader">MIME reader.</param>
            <returns>Returns SMTP "Mailbox" or null if no SMTP mailbox available.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reader</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_DialogState">
            <summary>
            Specifies dialog state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_DialogState.Early">
            <summary>
            Dialog isn't established yet.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_DialogState.Confirmed">
            <summary>
            Dialog has got 2xx response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_DialogState.Terminating">
            <summary>
            Dialog is terminating.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_DialogState.Terminated">
            <summary>
            Dialog is terminated.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_DialogState.Disposed">
            <summary>
            Dialog is disposed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Response">
            <summary>
            SIP server response. Related RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.#ctor(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            SIP_Request.CreateResponse constructor.
            </summary>
            <param name="request">Owner request.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.Copy">
            <summary>
            Clones this request.
            </summary>
            <returns>Returns new cloned request.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.Validate">
            <summary>
            Checks if SIP response has all required values as response line,header fields and their values.
            Throws Exception if not valid SIP response.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.Parse(System.Byte[])">
            <summary>
            Parses SIP_Response from byte array.
            </summary>
            <param name="data">Valid SIP response data.</param>
            <returns>Returns parsed SIP_Response obeject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.Parse(System.IO.Stream)">
            <summary>
            Parses SIP_Response from stream.
            </summary>
            <param name="stream">Stream what contains valid SIP response.</param>
            <returns>Returns parsed SIP_Response obeject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.ToStream(System.IO.Stream)">
            <summary>
            Stores SIP_Response to specified stream.
            </summary>
            <param name="stream">Stream where to store.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.ToByteData">
            <summary>
            Converts this response to raw srver response data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.ToString">
            <summary>
            Returns response as string.
            </summary>
            <returns>Returns response as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.Request">
            <summary>
            Gets SIP request which response it is. This value is null if this is stateless response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.SipVersion">
            <summary>
            Gets or sets SIP version.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid SIP version value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.StatusCodeType">
            <summary>
            Gets SIP status code type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.StatusCode">
            <summary>
            Gets or sets response status code. This value must be between 100 and 999.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when value is out of allowed range.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.ReasonPhrase">
            <summary>
            Gets or sets reponse reasong phrase. This just StatusCode describeing text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.StatusCode_ReasonPhrase">
            <summary>
            Gets or sets SIP Status-Code with Reason-Phrase (Status-Code SP Reason-Phrase).
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Timestamp">
            <summary>
            Implements SIP "Timestamp" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                Timestamp = 1*(DIGIT) [ "." *(DIGIT) ] [ LWS delay ]
                    delay = *(DIGIT) [ "." *(DIGIT) ]
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Timestamp: header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Default constructor.
            </summary>
            <param name="time">Time in seconds when request was sent.</param>
            <param name="delay">Delay time in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.Parse(System.String)">
            <summary>
            Parses "Timestamp" from specified value.
            </summary>
            <param name="value">SIP "Timestamp" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Timestamp" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.ToStringValue">
            <summary>
            Converts this to valid "Timestamp" value.
            </summary>
            <returns>Returns "accept-range" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.Time">
            <summary>
            Gets or sets time in seconds when request was sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.Delay">
            <summary>
            Gets or sets delay time in seconds. Delay specifies the time between the UAS received 
            the request and generated response.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_WarningValue">
            <summary>
            Implements SIP "warning-value" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                warning-value = warn-code SP warn-agent SP warn-text
                warn-code     = 3DIGIT
                warn-agent    = hostport / pseudonym
                                 ;  the name or pseudonym of the server adding
                                 ;  the Warning header, for use in debugging
                warn-text     = quoted-string
                pseudonym     = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Parse(System.String)">
            <summary>
            Parses "warning-value" from specified value.
            </summary>
            <param name="value">SIP "warning-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "warning-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.ToStringValue">
            <summary>
            Converts this to valid "warning-value" value.
            </summary>
            <returns>Returns "warning-value" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Code">
            <summary>
            Gets or sets warning code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Agent">
            <summary>
            Gets or sets name or pseudonym of the server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Text">
            <summary>
            Gets or sets warning text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Info">
            <summary>
            Implements SIP "info" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                info       = LAQUOT absoluteURI RAQUOT *( SEMI info-param)
                info-param = ( "purpose" EQUAL ( "icon" / "info" / "card" / token ) ) / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Info.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Info.Parse(System.String)">
            <summary>
            Parses "info" from specified value.
            </summary>
            <param name="value">SIP "info" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Info.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "info" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Info.ToStringValue">
            <summary>
            Converts this to valid "info" value.
            </summary>
            <returns>Returns "info" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Info.Purpose">
            <summary>
            Gets or sets 'purpose' parameter value. Value null means not specified. 
            Known values: "icon","info","card".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo">
            <summary>
            Implements SIP "Authentication-Info" value. Defined in RFC 3261.
            According RFC 3261 authentication info can contain Digest authentication info only.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Authentication-Info valu value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.Parse(System.String)">
            <summary>
            Parses "Authentication-Info" from specified value.
            </summary>
            <param name="value">SIP "Authentication-Info" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Authentication-Info" from specified reader.
            </summary>
            <param name="reader">Reader what contains Authentication-Info value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.ToStringValue">
            <summary>
            Converts SIP_t_AuthenticationInfo to valid Authentication-Info value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.NextNonce">
            <summary>
            Gets or sets server next predicted nonce value. Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.Qop">
            <summary>
            Gets or sets QOP value. Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.ResponseAuth">
            <summary>
            Gets or sets rspauth value. Value null means that value not specified.
            This can be only HEX value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.CNonce">
            <summary>
            Gets or sets cnonce value. Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.NonceCount">
            <summary>
            Gets or sets nonce count. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Challenge">
            <summary>
            Implements SIP "challenge" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                challenge = ("Digest" LWS digest-cln *(COMMA digest-cln)) / other-challenge
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Challenge.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP challenge value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Challenge.Parse(System.String)">
            <summary>
            Parses "challenge" from specified value.
            </summary>
            <param name="value">SIP "challenge" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Challenge.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "challenge" from specified reader.
            </summary>
            <param name="reader">Reader what contains challenge value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Challenge.ToStringValue">
            <summary>
            Converts this to valid "challenge" value.
            </summary>
            <returns>Returns "challenge" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Challenge.Method">
            <summary>
            Gets or sets authentication method. Normally this value is always 'Digest'.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Challenge.AuthData">
            <summary>
            Gets or sets authentication data. That value depends on authentication type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1">
            <summary>
            Implements same multi value header fields group. Group can contain one type header fields only.
            This is class is used by Via:,Route:, ... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.#ctor(LumiSoft.Net.SIP.Message.SIP_Message,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner message that owns this group.</param>
            <param name="fieldName">Header field name what group holds.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.Refresh">
            <summary>
            Refreshes header fields in group from actual header.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.AddToTop(System.String)">
            <summary>
            Add new header field on the top of the whole header.
            </summary>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.Add(System.String)">
            <summary>
            Add new header field on the bottom of the whole header.
            </summary>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.RemoveAll">
            <summary>
            Removes all specified header fields with their values.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.GetTopMostValue">
            <summary>
            Gets top most header field first value. 
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.RemoveTopMostValue">
            <summary>
            Removes top most header field first value. If value is the last value, 
            the whole header field will be removed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.RemoveLastValue">
            <summary>
            Removes last value. If value is the last value n header field, the whole header field will be removed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.GetAllValues">
            <summary>
            Gets all header field values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.FieldName">
            <summary>
            Gets header field name what this group holds.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.Count">
            <summary>
            Gets number of header fields in this group.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.HeaderFields">
            <summary>
            Gets header fields what are in this group.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter">
            <summary>
            Implements SIP "Retry-After" value. Defined in rfc 3261.
            Retry after specifies how many seconds the service is expected to be unavailable to the requesting client.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                Retry-After = delta-seconds [ comment ] *( SEMI retry-param )
                retry-param = ("duration" EQUAL delta-seconds) / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP Retry-After value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.Parse(System.String)">
            <summary>
            Parses "Retry-After" from specified value.
            </summary>
            <param name="value">SIP "Retry-After" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Retry-After" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.ToStringValue">
            <summary>
            Converts this to valid "Retry-After" value.
            </summary>
            <returns>Returns "Retry-After" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.Time">
            <summary>
            Gets or sets how many seconds the service is expected to be unavailable to the requesting client.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when when value less than 1 is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.Duration">
            <summary>
            Gets or sets 'duration' parameter value. The 'duration' parameter indicates how long the 
            called party will be reachable starting at the initial time of availability. If no duration 
            parameter is given, the service is assumed to be available indefinitely. Value -1 means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when when value less than 1 is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo">
            <summary>
            Implements SIP "Identity-Info" value. Defined in RFC 4474.
            </summary>
            <remarks>
            <code>
            RFC 4474 Syntax:
                Identity-Info        = ident-info *( SEMI ident-info-params )
                ident-info           = LAQUOT absoluteURI RAQUOT
                ident-info-params    = ident-info-alg / ident-info-extension
                ident-info-alg       = "alg" EQUAL token
                ident-info-extension = generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP 'Identity-Info' value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.Parse(System.String)">
            <summary>
            Parses "Identity-Info" from specified value.
            </summary>
            <param name="value">SIP "Identity-Info" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Identity-Info" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.ToStringValue">
            <summary>
            Converts this to valid "Identity-Info" value.
            </summary>
            <returns>Returns "Identity-Info" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.Uri">
            <summary>
            Gets or sets URI value.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid 'absoluteURI' value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.Alg">
            <summary>
            Gets or sets 'alg' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_ParameterCollection">
            <summary>
            This class represents SIP value parameters collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Add(System.String,System.String)">
            <summary>
            Adds new parameter to the collection.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when 'name' is '' or parameter with specified name 
            already exists in the collection.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Set(System.String,System.String)">
            <summary>
            Adds or updates specified parameter value.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Clear">
            <summary>
            Removes all parameters from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Remove(System.String)">
            <summary>
            Removes specified parameter from the collection.
            </summary>
            <param name="name">Parameter name.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Contains(System.String)">
            <summary>
            Checks if the collection contains parameter with the specified name.
            </summary>
            <param name="name">Parameter name.</param>
            <returns>Returns true if collection contains specified parameter.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Count">
            <summary>
            Gets parameters count in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Item(System.String)">
            <summary>
            Gets specified parameter from collection. Returns null if parameter with specified name doesn't exist.
            </summary>
            <param name="name">Parameter name.</param>
            <returns>Returns parameter with specified name or null if not found.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_Parameter">
            <summary>
            This class represents SIP value parameter.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Parameter.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Parameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Parameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Parameter.Value">
            <summary>
            Gets or sets parameter name. Value null means value less tag prameter.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_MessageCollection">
            <summary>
            POP3 messages info collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Add(System.String,System.String,System.Int64)">
            <summary>
            Adds new message info to the collection.
            </summary>
            <param name="id">Message ID.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Add(System.String,System.String,System.Int64,System.Object)">
            <summary>
            Adds new message info to the collection.
            </summary>
            <param name="id">Message ID.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size in bytes.</param>
            <param name="tag">Message user data.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Remove(LumiSoft.Net.POP3.Server.POP3_Message)">
            <summary>
            Removes specified message from the collection.
            </summary>
            <param name="message">Message to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.ContainsUID(System.String)">
            <summary>
            Gets if collection contains message with the specified UID.
            </summary>
            <param name="uid">Message UID to check.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Clear">
            <summary>
            Removes all messages from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.MessageExists(System.Int32)">
            <summary>
            Checks if message exists. NOTE marked for delete messages returns false.
            </summary>
            <param name="sequenceNo">Message 1 based sequence number.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.GetTotalMessagesSize">
            <summary>
            Gets messages total sizes. NOTE messages marked for deletion is excluded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.ResetDeletedFlag">
            <summary>
            Resets deleted flags on all messages.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Count">
            <summary>
            Gets number of messages in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Item(System.Int32)">
            <summary>
            Gets a POP3_Message object in the collection by index number.
            </summary>
            <param name="index">An Int32 value that specifies the position of the POP3_Message object in the POP3_MessageCollection collection.</param>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum">
            <summary>
            vCal phone number type. Note this values may be flagged !
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.NotSpecified">
            <summary>
            Phone number type not specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Preferred">
            <summary>
            Preferred phone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Home">
            <summary>
            Telephone number associated with a residence.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Msg">
            <summary>
            Telephone number has voice messaging support.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Work">
            <summary>
            Telephone number associated with a place of work.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Voice">
            <summary>
            Voice telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Fax">
            <summary>
            Fax number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Cellular">
            <summary>
            Cellular phone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Video">
            <summary>
            Video conferencing telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Pager">
            <summary>
            Paging device telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.BBS">
            <summary>
            Bulletin board system telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Modem">
            <summary>
            Modem connected telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Car">
            <summary>
            Car-phone telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.ISDN">
            <summary>
            ISDN service telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.PCS">
            <summary>
            Personal communication services telephone number.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.ContentDisposition_enum">
            <summary>
            Rfc 2183 Content-Disposition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Attachment">
            <summary>
            Content is attachment.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Inline">
            <summary>
            Content is embbed resource.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.NotSpecified">
            <summary>
            Content-Disposition header field isn't available or isn't written to mime message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Unknown">
            <summary>
            Content is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.JunkingStream">
            <summary>
            This stream just junks all written data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.Flush">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">This parameter is not used.</param>
            <param name="offset">This parameter is not used.</param>
            <param name="size">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to write to the stream.</param>
            <param name="offset">The location in buffer from which to start writing data.</param>
            <param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading. This property always returns false.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.Length">
            <summary>
            Gets the length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.LineSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed line size has exceeded.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.LineSizeExceededException.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher">
            <summary>
            IMAP SEARCH message matcher. You can use this class to see if message values match to search criteria.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher.#ctor(LumiSoft.Net.IMAP.Server.SearchGroup)">
            <summary>
            Deault constuctor.
            </summary>
            <param name="mainSearchGroup">SEARCH command main search group.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher.Matches(System.Int32,System.Int32,System.Int32,System.DateTime,LumiSoft.Net.IMAP.IMAP_MessageFlags,System.String,System.String)">
            <summary>
            Gets if specified values match search criteria.
            </summary>
            <param name="no">Message sequence number.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size in bytes.</param>
            <param name="internalDate">Message INTERNALDATE (dateTime when server stored message).</param>
            <param name="flags">Message flags.</param>
            <param name="header">Message header. This is only needed if this.IsHeaderNeeded is true.</param>
            <param name="bodyText">Message body text (must be decoded unicode text). This is only needed if this.IsBodyTextNeeded is true.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher.IsHeaderNeeded">
            <summary>
            Gets if header is needed for matching.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher.IsBodyTextNeeded">
            <summary>
            Gets if body text is needed for matching.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs">
            <summary>
            Provides data for GetFolderACL event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="folderName">Folder name which ACL to get.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.Folder">
            <summary>
            Gets folder name which ACL to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.ACL">
            <summary>
            Gets ACL collection. Key = userName, Value = IMAP_ACL_Flags.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_CNAME">
            <summary>
            CNAME record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_CNAME.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="alias">Alias.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_CNAME.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_CNAME.Alias">
            <summary>
            Gets alias.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.UA.SIP_UA_CallState">
            <summary>
            This enum specifies SIP UA call states.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.WaitingForStart">
            <summary>
            Outgoing call waits to be started.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.Calling">
            <summary>
            Outgoing calling is in progress.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.Ringing">
            <summary>
            Outgoing call remote end party is ringing.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.Queued">
            <summary>
            Outgoing call remote end pary queued a call.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.WaitingToAccept">
            <summary>
            Incoming call waits to be accepted.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.Active">
            <summary>
            Call is active.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.Terminating">
            <summary>
            Call is terminating.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.Terminated">
            <summary>
            Call is terminated.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.UA.SIP_UA_CallState.Disposed">
            <summary>
            Call has disposed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_StatusLine">
            <summary>
            Implements SIP Status-Line. Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_StatusLine.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="statusCode">Status code.</param>
            <param name="reason">Reason text.</param>
            <exception cref="T:System.ArgumentException">Is raised when </exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reason</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_StatusLine.ToString">
            <summary>
            Returns Status-Line string.
            </summary>
            <returns>Returns Status-Line string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_StatusLine.Version">
            <summary>
            Gets or sets SIP version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>value</b> has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_StatusLine.StatusCode">
            <summary>
            Gets or sets status code.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when <b>value</b> has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_StatusLine.Reason">
            <summary>
            Gets or sets reason phrase.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction">
            <summary>
            Implements SIP client transaction. Defined in rfc 3261 17.1.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Owner SIP stack.</param>
            <param name="flow">SIP data flow which is used to send request.</param>
            <param name="request">SIP request that transaction will handle.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b>,<b>flow</b> or <b>request</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerA_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE timer A triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerB_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE timer B triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerD_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when INVITE timer D triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerE_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when Non-INVITE timer E triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerF_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when Non-INVITE timer F triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerK_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is raised when Non-INVITE timer K triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Start">
            <summary>
            Starts transaction processing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>Start</b> is called other state than 'WaitingToStart'.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Cancel">
            <summary>
            Starts canceling transaction. 
            </summary>
            <remarks>If client transaction has got final response, canel has no effect and will be ignored.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.ProcessResponse(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes specified response through this transaction.
            </summary>
            <param name="flow">SIP data flow what received response.</param>
            <param name="response">SIP response to process.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b>,<b>response</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.SendCancel">
            <summary>
            Creates and send CANCEL request to remote target.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.SendAck(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Creates and sends ACK for final(3xx - 6xx) failure response.
            </summary>
            <param name="response">SIP response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.OnResponseReceived(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Raises ResponseReceived event.
            </summary>
            <param name="response">SIP response received.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.RSeq">
            <summary>
            Gets or sets RSeq value. Value -1 means no reliable provisional response received.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.ResponseReceived">
            <summary>
            Is raised when transaction received response from remote party.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ProxyTarget">
            <summary>
            Represents SIP proxy target in the SIP proxy "target set". Defined in RFC 3261 16.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyTarget.#ctor(LumiSoft.Net.SIP_Uri)">
            <summary>
            Default constructor.
            </summary>
            <param name="targetUri">Target request-URI.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>targetUri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyTarget.#ctor(LumiSoft.Net.SIP_Uri,LumiSoft.Net.SIP.Stack.SIP_Flow)">
            <summary>
            Default constructor.
            </summary>
            <param name="targetUri">Target request-URI.</param>
            <param name="flow">Data flow to try for forwarding.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>targetUri</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyTarget.TargetUri">
            <summary>
            Gets target URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyTarget.Flow">
            <summary>
            Gets data flow. Value null means that new flow must created.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_ClientException">
            <summary>
            POP3 client exception.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_ClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">IMAP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientException.StatusCode">
            <summary>
            Gets POP3 server error status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_ClientException.ResponseText">
            <summary>
            Gets POP3 server response text after status code.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_DispositionTypes">
            <summary>
            This class holds MIME content disposition types. Defined in RFC 2183.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_DispositionTypes.Inline">
            <summary>
            A bodypart should be marked `inline' if it is intended to be displayed automatically upon display of the message. 
            Inline bodyparts should be presented in the order in which they occur, subject to the normal semantics of multipart messages.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.MIME.MIME_DispositionTypes.Attachment">
            <summary>
            Bodyparts can be designated `attachment' to indicate that they are separate from the main body of the mail message, 
            and that their display should not be automatic, but contingent upon some further action of the user.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Media.Codec.Audio.G711_alaw">
            <summary>
            Implements G711 alaw codec.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.Codec.Audio.G711_alaw.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Media.Codec.Audio.G711_alaw.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes linear 16-bit linear PCM to 8-bit alaw.
            </summary>
            <param name="buffer">Data to encode. Data must be in Little-Endian format.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to encode.</param>
            <returns>Returns encoded block.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Media.Codec.Audio.G711_alaw.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes 8-bit alaw to linear 16-bit PCM.
            </summary>
            <param name="buffer">Data to decode. Data must be in Little-Endian format.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to decode.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Audio.G711_alaw.Name">
            <summary>
            Gets codec name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Audio.G711_alaw.SampleRate">
            <summary>
            Gets sample number of samples in second(hz). 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Media.Codec.Audio.G711_alaw.BitsPerSample">
            <summary>
            Gets number of bits per sample.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.WriteLogEventArgs">
            <summary>
            This class provides data for <b>Logger.WriteLog</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.WriteLogEventArgs.#ctor(LumiSoft.Net.Log.LogEntry)">
            <summary>
            Default constructor.
            </summary>
            <param name="logEntry">New log entry.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>logEntry</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.Log.WriteLogEventArgs.LogEntry">
            <summary>
            Gets new log entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Video">
            <summary>
            This class represents MIME video/xxx bodies. Defined in RFC 2046 4.4.
            </summary>
            <remarks>
            A media type of "video" indicates that the body contains a time-
            varying-picture image, possibly with color and coordinated sound.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Video.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Video.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>mediaType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartReport">
            <summary>
            This class represents MIME multipart/report body. Defined in RFC 3462.
            </summary>
            <remarks>
            The Multipart/Report Multipurpose Internet Mail Extensions (MIME) content-type is a general "family" or 
            "container" type for electronic mail reports of any kind. The most used type is <b>delivery-status</b>.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartReport.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartReport.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartParallel">
            <summary>
            This class represents MIME message/parallel bodies.  Defined in RFC 2046 5.1.6.
            </summary>
            <remarks>
            The "parallel" subtype of "multipart" is intended for use when the body
            parts are independent and their order is not important. Parts can be processed parallel.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartParallel.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartParallel.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_t_Mailbox">
            <summary>
            This class represents "mailbox" address. Defined in RFC 5322 3.4.
            </summary>
            <example>
            <code>
            RFC 5322 3.4.
                mailbox    = name-addr / addr-spec
                name-addr  = [display-name] angle-addr
                angle-addr = [CFWS] "&lt;" addr-spec "&gt;" [CFWS]
                addr-spec  = local-part "@" domain
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Mailbox.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="displayName">Display name. Value null means not specified.</param>
            <param name="address">Email address.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>address</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Mailbox.ToString">
            <summary>
            Returns mailbox as string.
            </summary>
            <returns>Returns mailbox as string.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_t_Mailbox.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord)">
            <summary>
            Returns address as string value.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <returns>Returns address as string value.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Mailbox.DisplayName">
            <summary>
            Gets display name. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Mailbox.Address">
            <summary>
            Gets address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Mailbox.LocalPart">
            <summary>
            Gets local-part of address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_t_Mailbox.Domain">
            <summary>
            Gets domain part of address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mail.Mail_h_AddressList">
            <summary>
            This class represent generic <b>address-list</b> header fields. For example: To header.
            </summary>
            <example>
            <code>
            RFC 5322.
                header       = "FiledName:" address-list CRLF
                address-list = (address *("," address))
                address      = mailbox / group
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_AddressList.#ctor(System.String,LumiSoft.Net.Mail.Mail_t_AddressList)">
            <summary>
            Default constructor.
            </summary>
            <param name="fieldName">Header field name. For example: "To".</param>
            <param name="values">Addresses collection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>filedName</b> or <b>values</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_AddressList.Parse(System.String)">
            <summary>
            Parses header field from the specified value.
            </summary>
            <param name="value">Header field value. Header field name must be included. For example: 'Content-Type: text/plain'.</param>
            <returns>Returns parsed header field.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when header field parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.Mail.Mail_h_AddressList.ToString(LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Returns header field as string.
            </summary>
            <param name="wordEncoder">8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="parmetersCharset">Charset to use to encode 8-bit characters. Value null means parameters not encoded.</param>
            <returns>Returns header field as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_AddressList.IsModified">
            <summary>
            Gets if this header field is modified since it has loaded.
            </summary>
            <remarks>All new added header fields has <b>IsModified = true</b>.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is riased when this class is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_AddressList.Name">
            <summary>
            Gets header field name. For example "To".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mail.Mail_h_AddressList.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5">
            <summary>
            Implements "DIGEST-MD5" authenticaiton. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Continue(System.String)">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Name">
            <summary>
            Returns always "DIGEST-MD5".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.Realm">
            <summary>
            Gets or sets realm value.
            </summary>
            <remarks>Normally this is host or domain name.</remarks>
        </member>
        <member name="P:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.AUTH.AUTH_SASL_ServerMechanism_DigestMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest">
            <summary>
            Implements http digest access authentication. Defined in RFC 2617.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="digestResponse">Server/Client returned digest response.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Client constructor. This is used to build valid Authorization response to server.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="uri">Request URI.</param>
            <param name="digestResponse">Server authenticate resposne.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String,System.String)">
            <summary>
            Server constructor. This is used to build valid Authenticate response to client.
            </summary>
            <param name="realm">Realm(domain).</param>
            <param name="nonce">Nonce value.</param>
            <param name="opaque">Opaque value.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.Authenticate(System.String,System.String)">
            <summary>
            Authenticates specified user and password using this class parameters.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if authenticated, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.Parse(System.String)">
            <summary>
            Parses authetication info from client digest response.
            </summary>
            <param name="digestResponse">Client returned digest response.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CalculateRspAuth(System.String,System.String)">
            <summary>
            Calculates 'rspauth' value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns 'rspauth' value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates response value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <returns>Returns calculated rsponse value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToString">
            <summary>
            Converts this to valid digest string.
            </summary>
            <returns>Returns digest string.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToChallange">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToChallange(System.Boolean)">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToAuthorization">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToAuthorization(System.Boolean)">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CreateNonce">
            <summary>
            Creates valid nonce value.
            </summary>
            <returns>Returns nonce value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CreateOpaque">
            <summary>
            Creates valid opaque value.
            </summary>
            <returns>Renturn opaque value.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.RequestMethod">
            <summary>
            Gets or sets request method.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Realm">
            <summary>
            Gets or sets a string to be displayed to users so they know which username and password 
            to use. This string should contain at least the name of the host performing the 
            authentication and might additionally indicate the collection of users who might have access.
            An example might be "registered_users@gotham.news.com".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Nonce">
            <summary>
            Gets or sets a server-specified unique data string. It is recommended that this 
            string be base64 or hexadecimal data. 
            Suggested value: base64(time-stamp hex(time-stamp ":" ETag ":" private-key)).
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Opaque">
            <summary>
            Gets or sets string of data, specified by the server, which should be returned by the client unchanged.
            It is recommended that this string be base64 or hexadecimal data.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Algorithm">
            <summary>
            Gets or sets algorithm to use to produce the digest and a checksum.
            This is normally MD5 or MD5-sess.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Response">
            <summary>
            Gets a string of 32 hex digits computed by HTTP digest algorithm, 
            which proves that the user knows a password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.UserName">
            <summary>
            Gets or sets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Password">
            <summary>
            Gets or sets password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Uri">
            <summary>
            Gets the URI from Request-URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Qop">
            <summary>
            Gets or sets value what indicates "quality of protection" the client has applied to
            the message. If present, its value MUST be one of the alternatives the server indicated
            it supports in the WWW-Authenticate header. This directive is optional in order to preserve 
            backward compatibility.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.CNonce">
            <summary>
            Gets or sets Client nonce value. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.NonceCount">
            <summary>
            Gets nonce count. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate 
            header field.  The nc-value is the hexadecimal count of the number of requests.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransportLayer">
            <summary>
            Implements SIP transport layer. Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Owner SIP stack.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stack</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.m_pUdpServer_PacketReceived(LumiSoft.Net.UDP.UDP_PacketEventArgs)">
            <summary>
            This method is called when new SIP UDP packet has received.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.m_pUdpServer_Error(System.Object,LumiSoft.Net.Error_EventArgs)">
            <summary>
            This method is called when UDP server unknown error.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.m_pTcpServer_SessionCreated(System.Object,LumiSoft.Net.TCP.TCP_ServerSessionEventArgs{LumiSoft.Net.TCP.TCP_ServerSession})">
            <summary>
            This method is called when SIP stack has got new incoming connection.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Start">
            <summary>
            Starts listening incoming requests and responses.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Stop">
            <summary>
            Stops listening incoming requests and responses.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.OnMessageReceived(LumiSoft.Net.SIP.Stack.SIP_Flow,System.Byte[])">
            <summary>
            Is called when specified SIP flow has got new SIP message.
            </summary>
            <param name="flow">SIP flow.</param>
            <param name="message">Received message.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>message</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.GetOrCreateFlow(System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Gets existing flow or if flow doesn't exist, new one is created and returned.
            </summary>
            <param name="transport">SIP transport.</param>
            <param name="localEP">Local end point. Value null means system will allocate it.</param>
            <param name="remoteEP">Remote end point.</param>
            <returns>Returns data flow.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.GetFlow(System.String)">
            <summary>
            Returns specified flow or null if no such flow.
            </summary>
            <param name="flowID">Data flow ID.</param>
            <returns>Returns specified flow or null if no such flow.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flowID</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendRequest(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Sends request using methods as described in RFC 3261 [4](RFC 3263).
            </summary>
            <param name="request">SIP request to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>request</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when transport error happens.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendRequest(LumiSoft.Net.SIP.Stack.SIP_Request,System.Net.IPEndPoint,LumiSoft.Net.SIP.Stack.SIP_Hop)">
            <summary>
            Sends request to the specified hop.
            </summary>
            <param name="request">SIP request.</param>
            <param name="localEP">Local end point. Value null means system will allocate it.</param>
            <param name="hop">Target hop.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>request</b> or <b>hop</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendRequest(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Sends request to the specified flow.
            </summary>
            <param name="flow">Data flow.</param>
            <param name="request">SIP request.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>request</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments contains invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendRequest(LumiSoft.Net.SIP.Stack.SIP_Flow,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_ClientTransaction)">
            <summary>
            Sends request to the specified flow.
            </summary>
            <param name="flow">Data flow.</param>
            <param name="request">SIP request.</param>
            <param name="transaction">Owner client transaction or null if stateless sending.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flow</b> or <b>request</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments contains invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends specified response back to request maker using RFC 3261 18. rules.
            </summary>
            <param name="response">SIP response.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when stack ahs not been started and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when <b>response</b> sending has failed.</exception>
            <remarks>Use this method to send SIP responses from stateless SIP elements, like stateless proxy. 
            Otherwise SIP_ServerTransaction.SendResponse method should be used.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendResponse(LumiSoft.Net.SIP.Stack.SIP_Response,System.Net.IPEndPoint)">
            <summary>
            Sends specified response back to request maker using RFC 3261 18. rules.
            </summary>
            <param name="response">SIP response.</param>
            <param name="localEP">Local IP end point to use for sending resposne. Value null means system will allocate it.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when stack ahs not been started and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when <b>response</b> sending has failed.</exception>
            <remarks>Use this method to send SIP responses from stateless SIP elements, like stateless proxy. 
            Otherwise SIP_ServerTransaction.SendResponse method should be used.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendResponse(LumiSoft.Net.SIP.Stack.SIP_ServerTransaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends specified response back to request maker using RFC 3261 18. rules.
            </summary>
            <param name="transaction">SIP server transaction which response to send.</param>
            <param name="response">SIP response.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when stack ahs not been started and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>transaction</b> or <b>response</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when <b>response</b> sending has failed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendResponseInternal(LumiSoft.Net.SIP.Stack.SIP_ServerTransaction,LumiSoft.Net.SIP.Stack.SIP_Response,System.Net.IPEndPoint)">
            <summary>
            Sends response to request maker using RFC 3261 18. rules.
            </summary>
            <param name="transaction">Owner server transaction. Can be null if stateless response sending.</param>
            <param name="response">SIP response to send.</param>
            <param name="localEP">Local IP end point to use for sending resposne. Value null means system will allocate it.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when stack ahs not been started and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when <b>response</b> sending has failed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendResponse_RFC_3263_5(System.String,System.String,System.Net.IPEndPoint,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends specified response back to request maker using RFC 3263 5. rules.
            </summary>
            <param name="logID">Log ID.</param>
            <param name="transactionID">Transaction ID. If null, then stateless response sending.</param>
            <param name="localEP">UDP local end point to use for sending. If null, system will use default.</param>
            <param name="response">SIP response.</param>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when <b>response</b> sending has failed.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendResponseToHost(System.String,System.String,System.Net.IPEndPoint,System.String,System.Int32,System.String,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends response to the specified host.
            </summary>
            <param name="logID">Log ID.</param>
            <param name="transactionID">Transaction ID. If null, then stateless response sending.</param>
            <param name="localEP">UDP local end point to use for sending. If null, system will use default.</param>
            <param name="host">Host name or IP address where to send response.</param>
            <param name="port">Target host port.</param>
            <param name="transport">SIP transport to use.</param>
            <param name="response">SIP response to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Resolve(LumiSoft.Net.SIP.Stack.SIP_Flow)">
            <summary>
            Resolves data flow local NATed IP end point to public IP end point.
            </summary>
            <param name="flow">Data flow.</param>
            <returns>Returns public IP end point of local NATed IP end point.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised <b>flow</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.GetContactHost(LumiSoft.Net.SIP.Stack.SIP_Flow)">
            <summary>
            Gets contact URI <b>host</b> parameter suitable to the specified flow.
            </summary>
            <param name="flow">Data flow.</param>
            <returns>Returns contact URI <b>host</b> parameter suitable to the specified flow.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.GetRecordRoute(System.String)">
            <summary>
            Gets Record-Route for the specified transport.
            </summary>
            <param name="transport">SIP transport.</param>
            <returns>Returns Record-Route ro or null if no record route possible.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.IsRunning">
            <summary>
            Gets if transport layer is running.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Stack">
            <summary>
            Gets owner SIP stack.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.BindInfo">
            <summary>
            Gets or sets socket bind info. Use this property to specify on which protocol,IP,port server 
            listnes and also if connections is SSL.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Flows">
            <summary>
            Gets currently active flows.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.UdpServer">
            <summary>
            Gets UDP server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.StunServer">
            <summary>
            Gets or sets STUN server name or IP address. This value must be filled if SIP stack is running behind a NAT.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager">
            <summary>
            Implements SIP flow manager.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.#ctor(LumiSoft.Net.SIP.Stack.SIP_TransportLayer)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner transport layer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.GetOrCreateFlow(System.Boolean,System.Net.IPEndPoint,System.Net.IPEndPoint,System.String)">
            <summary>
            Returns existing flow if exists, otherwise new created flow.
            </summary>
            <param name="isServer">Specifies if created flow is server or client flow. This has effect only if flow is created.</param>
            <param name="localEP">Local end point.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="transport">SIP transport.</param>
            <returns>Returns existing flow if exists, otherwise new created flow.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b>,<b>remoteEP</b> or <b>transport</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.GetFlow(System.String)">
            <summary>
            Returns specified flow or null if no such flow.
            </summary>
            <param name="flowID">Data flow ID.</param>
            <returns>Returns specified flow or null if no such flow.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flowID</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.CreateFromSession(LumiSoft.Net.TCP.TCP_ServerSession)">
            <summary>
            Creates new flow from TCP server session.
            </summary>
            <param name="session">TCP server session.</param>
            <returns>Returns created flow.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.Count">
            <summary>
            Gets number of flows in the collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.Item(System.String)">
            <summary>
            Gets a flow with the specified flow ID.
            </summary>
            <param name="flowID">SIP flow ID.</param>
            <returns>Returns flow with the specified flow ID or null if not found.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>flowID</b> is null reference value.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.Flows">
            <summary>
            Gets active flows.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_FlowManager.TransportLayer">
            <summary>
            Gets owner transpoprt layer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri">
            <summary>
            Implements SIP "error-uri" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                error-uri = LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.Parse(System.String)">
            <summary>
            Parses "error-uri" from specified value.
            </summary>
            <param name="value">SIP "error-uri" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "error-uri" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.ToStringValue">
            <summary>
            Converts this to valid "error-uri" value.
            </summary>
            <returns>Returns "error-uri" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.Uri">
            <summary>
            Gets or sets uri value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode">
            <summary>
            This class implements STUN ERROR-CODE. Defined in RFC 3489 11.2.9.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="code">Error code.</param>
            <param name="reasonText">Reason text.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.Code">
            <summary>
            Gets or sets error code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.ReasonText">
            <summary>
            Gets reason text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs">
            <summary>
            This class provides data for SIP_Stack.ValidateRequest event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs.#ctor(LumiSoft.Net.SIP.Stack.SIP_Request,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="request">Incoming SIP request.</param>
            <param name="remoteEndpoint">IP end point what made request.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs.Request">
            <summary>
            Gets incoming SIP request.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs.RemoteEndPoint">
            <summary>
            Gets IP end point what made request.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs.ResponseCode">
            <summary>
            Gets or sets response code. Value null means SIP stack will handle it.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog">
            <summary>
            Implements SIP "Target-Dialog" value. Defined in RFC 4538.
            </summary>
            <remarks>
            <code>
            RFC 4538 Syntax:
                Target-Dialog = callid *(SEMI td-param)    ;callid from RFC 3261
                td-param      = remote-param / local-param / generic-param
                remote-param  = "remote-tag" EQUAL token
                local-param   = "local-tag" EQUAL token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP Target-Dialog value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.Parse(System.String)">
            <summary>
            Parses "Target-Dialog" from specified value.
            </summary>
            <param name="value">SIP "Target-Dialog" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Target-Dialog" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.ToStringValue">
            <summary>
            Converts this to valid "Target-Dialog" value.
            </summary>
            <returns>Returns "Target-Dialog" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.CallID">
            <summary>
            Gets or sets call ID.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid CallID value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.RemoteTag">
            <summary>
            Gets or sets 'remote-tag' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.LocalTag">
            <summary>
            Gets or sets 'local-tag' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.NNTP.Client.NNTP_Client">
            <summary>
            NNTP client. Defined in RFC 977.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.Disconnect">
            <summary>
            Closes connection to NNTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when NNTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.GetNewsGroups">
            <summary>
            Gets NNTP newsgoups.
            </summary>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when NNTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.PostMessage(System.String,System.IO.Stream)">
            <summary>
            Posts specified message to the specified newsgroup.
            </summary>
            <param name="newsgroup">Newsgroup where to post message.</param>
            <param name="message">Message to post. Message is taken from stream current position.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when NNTP client is not connected.</exception>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.OnConnected">
            <summary>
            This method is called after TCP client has sucessfully connected.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.EmailAddressType_enum">
            <summary>
            vCal email address type. Note this values may be flagged !
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.EmailAddressType_enum.NotSpecified">
            <summary>
            Email address type not specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.EmailAddressType_enum.Preferred">
            <summary>
            Preferred email address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.EmailAddressType_enum.Internet">
            <summary>
            Internet addressing type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.EmailAddressType_enum.X400">
            <summary>
            X.400 addressing type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeEntity">
            <summary>
            Rfc 2822 Mime Entity.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.Parse(LumiSoft.Net.IO.SmartStream,System.String)">
            <summary>
            Parses mime entity from stream.
            </summary>
            <param name="stream">Data stream from where to read data.</param>
            <param name="toBoundary">Entity data is readed to specified boundary.</param>
            <returns>Returns false if last entity. Returns true for mulipart entity, if there are more entities.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.ToStream(System.IO.Stream)">
            <summary>
            Stores mime entity and it's child entities to specified stream.
            </summary>
            <param name="storeStream">Stream where to store mime entity.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataToFile(System.String)">
            <summary>
            Saves this.Data property value to specified file.
            </summary>
            <param name="fileName">File name where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataToStream(System.IO.Stream)">
            <summary>
            Saves this.Data property value to specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataFromFile(System.String)">
            <summary>
            Loads MimeEntity.Data property from file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataFromStream(System.IO.Stream)">
            <summary>
            Loads MimeEntity.Data property from specified stream. Note: reading starts from current position and stream isn't closed.
            </summary>
            <param name="stream">Data stream.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.EncodeData(System.Byte[],LumiSoft.Net.Mime.ContentTransferEncoding_enum)">
            <summary>
            Encodes data with specified content transfer encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <param name="encoding">Encoding with what to encode data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.FoldHeader(System.String)">
            <summary>
            Folds header.
            </summary>
            <param name="header">Header string.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Header">
            <summary>
            Gets message header.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.HeaderString">
            <summary>
            Gets header as RFC 2822 message headers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ParentEntity">
            <summary>
            Gets parent entity of this entity. If this entity is top level, then this property returns null.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ChildEntities">
            <summary>
            Gets child entities. This property is available only if ContentType = multipart/... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.MimeVersion">
            <summary>
            Gets or sets header field "<b>Mime-Version:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentClass">
            <summary>
            Gets or sets header field "<b>Content-class:</b>" value. Returns null if value isn't set.<br/>
            Additional property to support messages of CalendarItem type which have iCal/vCal entries.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType">
            <summary>
            Gets or sets header field "<b>Content-Type:</b>" value. This property specifies what entity data is.
            NOTE: ContentType can't be changed while there is data specified(Exception is thrown) in this mime entity, because it isn't
            possible todo data conversion between different types. For example text/xx has charset parameter and other types don't,
            changing loses it and text data becomes useless.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentTypeString">
            <summary>
            Gets or sets header field "<b>Content-Type:</b>" value. Returns null if value isn't set. This property specifies what entity data is.
            This property is meant for advanced users, who needs other values what defined MediaType_enum provides.
            Example value: text/plain; charset="utf-8". 
            NOTE: ContentType can't be changed while there is data specified(Exception is thrown) in this mime entity, because it isn't
            possible todo data conversion between different types. For example text/xx has charset parameter and other types don't,
            changing loses it and text data becomes useless.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentTransferEncoding">
            <summary>
            Gets or sets header field "<b>Content-Transfer-Encoding:</b>" value. This property specifies how data is encoded/decoded.
            If you set this value, it's recommended that you use QuotedPrintable for text and Base64 for binary data.
            7bit,_8bit,Binary are today obsolete (used for parsing). 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDisposition">
            <summary>
            Gets or sets header field "<b>Content-Disposition:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDescription">
            <summary>
            Gets or sets header field "<b>Content-Description:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentID">
            <summary>
            Gets or sets header field "<b>Content-ID:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_Name">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>name</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>name</b>" parameter isn't set.
            <p/>
            Note: Content-Type must be application/xxx or exception is thrown.
            This property is obsolete today, it's replaced with <b>Content-Disposition: filename</b> parameter.
            If possible always set FileName property instead of it. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_CharSet">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>charset</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>charset</b>" parameter isn't set.
            If you don't know what charset to use then <b>utf-8</b> is recommended, most of times this is sufficient.
            Note: Content-Type must be text/xxx or exception is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_Boundary">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>boundary</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>boundary</b>" parameter isn't set.
            Note: Content-Type must be multipart/xxx or exception is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDisposition_FileName">
            <summary>
            Gets or sets "<b>Content-Disposition:</b>" header field "<b>filename</b>" parameter.
            Returns null if Content-Disposition: header field value isn't set or Content-Disposition: header field "<b>filename</b>" parameter isn't set.
            Note: Content-Disposition must be attachment or inline.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Date">
            <summary>
            Gets or sets header field "<b>Date:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.MessageID">
            <summary>
            Gets or sets header field "<b>Message-ID:</b>" value. Returns null if value isn't set.
            Syntax: '&lt;'id-left@id-right'&gt;'. Example: &lt;621bs724bfs8@jnfsjaas4263&gt;
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.To">
            <summary>
            Gets or sets header field "<b>To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Cc">
            <summary>
            Gets or sets header field "<b>Cc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Bcc">
            <summary>
            Gets or sets header field "<b>Bcc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.From">
            <summary>
            Gets or sets header field "<b>From:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Sender">
            <summary>
            Gets or sets header field "<b>Sender:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ReplyTo">
            <summary>
            Gets or sets header field "<b>Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.InReplyTo">
            <summary>
            Gets or sets header field "<b>In-Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DSN">
            <summary>
            Gets or sets header field "<b>Disposition-Notification-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Subject">
            <summary>
            Gets or sets header field "<b>Subject:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Data">
            <summary>
            Gets or sets entity data. Data is encoded/decoded with "<b>Content-Transfer-Encoding:</b>" header field value.
            Note: This property can be set only if Content-Type: isn't multipart.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DataText">
            <summary>
            Gets or sets entity text data. Data is encoded/decoded with "<b>Content-Transfer-Encoding:</b>" header field value with this.Charset charset.
            Note: This property is available only if ContentType is Text/xxx... or no content type specified, othwerwise Excpetion is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DataEncoded">
            <summary>
            Gets or sets entity encoded data. If you set this value, be sure that you encode this value as specified by Content-Transfer-Encoding: header field.
            Set this value only if you need custom Content-Transfer-Encoding: what current Mime class won't support, other wise set data through this.Data property. 
            Note: This property can be set only if Content-Type: isn't multipart.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldCollection">
            <summary>
            Mime entity header fields collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header field with specified name and value to the end of the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Add(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Adds specified header field to the end of the collection.
            </summary>
            <param name="headerField">Header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the header field.</param>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Remove(System.Int32)">
            <summary>
            Removes header field at the specified index from the collection.
            </summary>
            <param name="index">The index of the header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Remove(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with specified name from the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Clear">
            <summary>
            Clears the collection of all header fields.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Contains(System.String)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Contains(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="headerField">Header field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.GetFirst(System.String)">
            <summary>
            Gets first header field with specified name, returns null if specified field doesn't exist.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Get(System.String)">
            <summary>
            Gets header fields with specified name, returns null if specified field doesn't exist.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Parse(System.String)">
            <summary>
            Parses header fields from string.
            </summary>
            <param name="headerString">Header string.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Parse(System.IO.Stream)">
            <summary>
            Parses header fields from stream. Stream position stays where header reading ends.
            </summary>
            <param name="stream">Stream from where to parse.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Parse(LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses header fields from stream. Stream position stays where header reading ends.
            </summary>
            <param name="stream">Stream from where to parse.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.ToHeaderString(System.String)">
            <summary>
            Converts header fields to rfc 2822 message header string.
            </summary>
            <param name="encodingCharSet">CharSet to use for non ASCII header field values. Utf-8 is recommended value, if you explicity don't need other.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldCollection.Item(System.Int32)">
            <summary>
            Gets header field from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldCollection.Count">
            <summary>
            Gets header fields count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadLine_EventArgs">
            <summary>
            This class proviedes data to asynchronous read line callback method.
            NOTE: ReadLine_EventArgs is reused for next read line call, so don't store references to this class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.#ctor(System.Exception,System.Int32,System.Byte[],System.Int32,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception what happened while reading data or null if read line was successfull.</param>
            <param name="readedCount">Specifies how many raw bytes was readed.</param>
            <param name="data">Line data buffer.</param>
            <param name="count">Specifies how many bytes stored to <b>data</b>.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.DataToString(System.Text.Encoding)">
            <summary>
            Converts byte[] line data to the specified encoding string.
            </summary>
            <param name="encoding">Encoding to use for convert.</param>
            <returns>Returns line data as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Exception">
            <summary>
            Gets exception what happened while reading line. Returns null if read line completed sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.ReadedCount">
            <summary>
            Gets number of bytes actualy readed from source stream. Returns 0 if end of stream reached
            and no more data. This value includes any readed byte, including line feed, ... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.LineBuffer">
            <summary>
            Gets <b>buffer</b> argumnet what was passed to BeginReadLine mehtod.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Count">
            <summary>
            Gets number of bytes stored to <b>LineBuffer</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Data">
            <summary>
            Gets readed line data or null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringDefault">
            <summary>
            Gets readed line data as string with system <b>default</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringAscii">
            <summary>
            Gets readed line data as string with <b>ASCII</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringUtf8">
            <summary>
            Gets readed line data as string with <b>UTF8</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Tag">
            <summary>
            Gets <b>tag</b> argument what was pased to BeginReadLine method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.FetchHelper">
            <summary>
            FETCH command helper methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.ParseHeaderFields(System.String,LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Returns requested header fields lines.
            Note: Header terminator blank line is included.
            </summary>
            <param name="fieldsStr">Header fields to get.</param>
            <param name="entity">Entity which header field lines to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.ParseHeaderFields(System.String,System.Byte[])">
            <summary>
            Returns requested header fields lines.
            Note: Header terminator blank line is included.
            </summary>
            <param name="fieldsStr">Header fields to get.</param>
            <param name="data">Message data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.ParseHeaderFieldsNot(System.String,LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Returns header fields lines except requested.
            Note: Header terminator blank line is included.
            </summary>
            <param name="fieldsStr">Header fields to skip.</param>
            <param name="entity">Entity which header field lines to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.ParseHeaderFieldsNot(System.String,System.Byte[])">
            <summary>
            Returns header fields lines except requested.
            Note: Header terminator blank line is included.
            </summary>
            <param name="fieldsStr">Header fields to skip.</param>
            <param name="data">Message data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.GetMimeEntity(LumiSoft.Net.Mail.Mail_Message,System.String)">
            <summary>
            Gets specified mime entity. Returns null if specified mime entity doesn't exist.
            </summary>
            <param name="message">Mail message.</param>
            <param name="mimeEntitySpecifier">Mime entity specifier. Nested mime entities are pointed by '.'. 
            For example: 1,1.1,2.1, ... .</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.GetMimeEntityHeader(LumiSoft.Net.MIME.MIME_Entity)">
            <summary>
            Gets specified mime entity header.
            Note: Header terminator blank line is included.
            </summary>
            <param name="entity">Mime entity.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.GetMimeEntityHeader(LumiSoft.Net.Mail.Mail_Message,System.String)">
            <summary>
            Gets requested mime entity header. Returns null if specified mime entity doesn't exist.
            Note: Header terminator blank line is included.
            </summary>
            <param name="message">Mail message.</param>
            <param name="mimeEntitySpecifier">Mime entity specifier. Nested mime entities are pointed by '.'. 
            For example: 1,1.1,2.1, ... .</param>
            <returns>Returns requested mime entity data or NULL if requested entry doesn't exist.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.GetMimeEntityData(LumiSoft.Net.Mail.Mail_Message,System.String)">
            <summary>
            Gets requested mime entity data. Returns null if specified mime entity doesn't exist.
            </summary>
            <param name="message">Mail message.</param>
            <param name="mimeEntitySpecifier">Mime entity specifier. Nested mime entities are pointed by '.'. 
            For example: 1,1.1,2.1, ... .</param>
            <returns>Returns requested mime entity data or NULL if requested entry doesn't exist.</returns>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.Dns_Client">
            <summary>
            Dns client.
            </summary>
            <example>
            <code>
            // Set dns servers
            Dns_Client.DnsServers = new string[]{"194.126.115.18"};
            
            Dns_Client dns = Dns_Client();
            
            // Get MX records.
            DnsServerResponse resp = dns.Query("lumisoft.ee",QTYPE.MX);
            if(resp.ConnectionOk &amp;&amp; resp.ResponseCode == RCODE.NO_ERROR){
            	MX_Record[] mxRecords = resp.GetMXRecords();
            	
            	// Do your stuff
            }
            else{
            	// Handle error there, for more exact error info see RCODE 
            }	 
            
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Query(System.String,LumiSoft.Net.Dns.Client.QTYPE)">
            <summary>
            Queries server with specified query.
            </summary>
            <param name="queryText">Query text. It depends on queryType.</param>
            <param name="queryType">Query type.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.GetHostAddresses(System.String)">
            <summary>
            Gets specified host IP addresses(A and AAAA).
            </summary>
            <param name="host">Host name.</param>
            <returns>Returns specified host IP addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Resolve(System.String[])">
            <summary>
            Resolves host names to IP addresses.
            </summary>
            <param name="hosts">Host names to resolve.</param>
            <returns>Returns specified hosts IP addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hosts</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Resolve(System.String)">
            <summary>
            Resolves host name to IP addresses.
            </summary>
            <param name="host">Host name or IP address.</param>
            <returns>Return specified host IP addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.QueryServer(System.Int32,System.String,LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Sends query to server.
            </summary>
            <param name="timeout">Query timeout in milli seconds.</param>
            <param name="qname">Query text.</param>
            <param name="qtype">Query type.</param>
            <param name="qclass">Query class.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.CreateQuery(System.Int32,System.String,LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Creates new query.
            </summary>
            <param name="ID">Query ID.</param>
            <param name="qname">Query text.</param>
            <param name="qtype">Query type.</param>
            <param name="qclass">Query class.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ParseQuery(System.Byte[],System.Int32)">
            <summary>
            Parses query.
            </summary>
            <param name="reply">Dns server reply.</param>
            <param name="queryID">Query id of sent query.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ParseAnswers(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses specified count of answers from query.
            </summary>
            <param name="reply">Server returned query.</param>
            <param name="answerCount">Number of answers to parse.</param>
            <param name="offset">Position from where to start parsing answers.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ReadCharacterString(System.Byte[],System.Int32@)">
            <summary>
            Reads character-string from spefcified data and offset.
            </summary>
            <param name="data">Data from where to read.</param>
            <param name="offset">Offset from where to start reading.</param>
            <returns>Returns readed string.</returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.DnsServers">
            <summary>
            Gets or sets dns servers.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.UseDnsCache">
            <summary>
            Gets or sets if to use dns caching.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.ID">
            <summary>
            Get next query ID.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection">
            <summary>
            IMAP messages info collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Add(System.String,System.Int64,System.DateTime,System.Int64,LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Adds new message info to the collection.
            </summary>
            <param name="id">Message ID.</param>
            <param name="uid">Message IMAP UID value.</param>
            <param name="internalDate">Message store date.</param>
            <param name="size">Message size in bytes.</param>
            <param name="flags">Message flags.</param>
            <returns>Returns added IMAp message info.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Remove(LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Removes specified IMAP message from the collection.
            </summary>
            <param name="message">IMAP message to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.ContainsUID(System.Int64)">
            <summary>
            Gets collection contains specified message with specified UID.
            </summary>
            <param name="uid">Message UID.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.IndexOf(LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Gets index of specified message in the collection.
            </summary>
            <param name="message">Message indesx to get.</param>
            <returns>Returns index of specified message in the collection or -1 if message doesn't belong to this collection.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Clear">
            <summary>
            Removes all messages from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.GetWithFlags(LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Gets messages which has specified flags set.
            </summary>
            <param name="flags">Flags to match.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Count">
            <summary>
            Gets number of messages in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Item(System.Int32)">
            <summary>
            Gets a IMAP_Message object in the collection by index number.
            </summary>
            <param name="index">An Int32 value that specifies the position of the IMAP_Message object in the IMAP_MessageCollection collection.</param>
        </member>
        <member name="T:LumiSoft.Net.TCP.TCP_ServerSession">
            <summary>
            This class implements generic TCP server session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Init(System.Object,System.Net.Sockets.Socket,System.String,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Initializes session. This method is called from TCP_Server when new session created.
            </summary>
            <param name="server">Owner TCP server.</param>
            <param name="socket">Connected socket.</param>
            <param name="hostName">Local host name.</param>
            <param name="ssl">Specifies if session should switch to SSL.</param>
            <param name="certificate">SSL certificate.</param>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Start">
            <summary>
            This method is called from TCP server when session should start processing incoming connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.SwitchToSecure">
            <summary>
            Switches session to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when connection is already secure or when SSL certificate is not specified.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Disconnect">
            <summary>
            Disconnects session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.Disconnect(System.String)">
            <summary>
            Disconnects session.
            </summary>
            <param name="text">Text what is sent to connected host before disconnecting.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnTimeout">
            <summary>
            This method is called when specified session times out.
            </summary>
            <remarks>
            This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnTimeoutI">
            <summary>
            Just calls <b>OnTimeout</b> method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnIdleTimeout">
            <summary>
            Raises <b>IdleTimeout</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnDisonnected">
            <summary>
            Raises <b>Disonnected</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TCP.TCP_ServerSession.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsDisposed">
            <summary>
            Gets if TCP server session is disposed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Server">
            <summary>
            Gets owner TCP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LocalHostName">
            <summary>
            Gets local host name.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Certificate">
            <summary>
            Gets session certificate.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsConnected">
            <summary>
            Gets if session is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.ID">
            <summary>
            Gets session ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.ConnectTime">
            <summary>
            Gets the time when session was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.LocalEndPoint">
            <summary>
            Gets session local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.RemoteEndPoint">
            <summary>
            Gets session remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.IsSecureConnection">
            <summary>
            Gets if this session TCP connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.TCP.TCP_ServerSession.TcpStream">
            <summary>
            Gets TCP stream which must be used to send/receive data through this session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.IdleTimeout">
            <summary>
            This event is raised when session idle(no activity) timeout reached.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Disonnected">
            <summary>
            This event is raised when session has disconnected and will be disposed soon.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Disposed">
            <summary>
            This event is raised when session has disposed.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.TCP.TCP_ServerSession.Error">
            <summary>
            This event is raised when TCP server session has unknown unhandled error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_Session">
            <summary>
            This class implements SMTP session. Defined RFC 5321.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.Start">
            <summary>
            Starts session processing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnError(System.Exception)">
            <summary>
            Is called when session has processing error.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnTimeout">
            <summary>
            This method is called when specified session times out.
            </summary>
            <remarks>
            This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.BeginReadCmd">
            <summary>
            Starts reading incoming command from the connected client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.ProcessCmd(LumiSoft.Net.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Completes command reading operation.
            </summary>
            <param name="op">Operation.</param>
            <returns>Returns true if server should start reading next command.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.DATA_End(System.DateTime,LumiSoft.Net.IO.SmartStream.ReadPeriodTerminatedAsyncOP)">
            <summary>
            Completes DATA command.
            </summary>
            <param name="startTime">Time DATA command started.</param>
            <param name="op">Read period-terminated opeartion.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.Reset">
            <summary>
            Does reset as specified in RFC 5321.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.CreateReceivedHeader">
            <summary>
            Creates "Received:" header field. For more info see RFC 5321.4.4.
            </summary>
            <returns>Returns "Received:" header field.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.LogAddText(System.String)">
            <summary>
            Logs specified text.
            </summary>
            <param name="text">text to log.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnStarted(LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Raises <b>Started</b> event.
            </summary>
            <param name="reply">Default SMTP server reply.</param>
            <returns>Returns SMTP server reply what must be sent to the connected client.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnEhlo(System.String,LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Raises <b>Ehlo</b> event.
            </summary>
            <param name="domain">Ehlo/Helo domain.</param>
            <param name="reply">Default SMTP server reply.</param>
            <returns>Returns SMTP server reply what must be sent to the connected client.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnMailFrom(LumiSoft.Net.SMTP.Server.SMTP_MailFrom,LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Raises <b>MailFrom</b> event.
            </summary>
            <param name="from">MAIL FROM: value.</param>
            <param name="reply">Default SMTP server reply.</param>
            <returns>Returns SMTP server reply what must be sent to the connected client.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnRcptTo(LumiSoft.Net.SMTP.Server.SMTP_RcptTo,LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Raises <b>RcptTo</b> event.
            </summary>
            <param name="to">RCPT TO: value.</param>
            <param name="reply">Default SMTP server reply.</param>
            <returns>Returns SMTP server reply what must be sent to the connected client.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnGetMessageStream">
            <summary>
            Raises <b>GetMessageStream</b> event.
            </summary>
            <returns>Returns message store stream.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnMessageStoringCanceled">
            <summary>
            Raises <b>MessageStoringCanceled</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnMessageStoringCompleted(LumiSoft.Net.SMTP.Server.SMTP_Reply)">
            <summary>
            Raises <b>MessageStoringCompleted</b> event.
            </summary>
            <param name="reply">Default SMTP server reply.</param>
            <returns>Returns SMTP server reply what must be sent to the connected client.</returns>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.Server">
            <summary>
            Gets session owner SMTP server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.Authentications">
            <summary>
            Gets supported authentications collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.BadCommands">
            <summary>
            Gets number of bad commands happened on SMTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.Transactions">
            <summary>
            Gets number of mail transactions processed by this SMTP session.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.EhloHost">
            <summary>
            Gets client reported EHLO host name. Returns null if EHLO/HELO is not issued yet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.AuthenticatedUserIdentity">
            <summary>
            Gets authenticated user identity or null if user has not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.From">
            <summary>
            Gets MAIL FROM: value. Returns null if MAIL FROM: is not issued yet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.To">
            <summary>
            Gets RCPT TO: values. Returns null if RCPT TO: is not issued yet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Session.Started">
            <summary>
            Is raised when session has started processing and needs to send 220 greeting or 554 error resposne to the connected client.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Session.Ehlo">
            <summary>
            Is raised when EHLO command received.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Session.MailFrom">
            <summary>
            Is raised when MAIL FROM: command received.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Session.RcptTo">
            <summary>
            Is raised when RCPT TO: command received.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Session.GetMessageStream">
            <summary>
            Is raised when SMTP server needs to get stream where to store incoming message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Session.MessageStoringCanceled">
            <summary>
            Is raised when SMTP server has canceled message storing.
            </summary>
            <remarks>This can happen on 2 cases: on session timeout and if between BDAT chunks RSET issued.</remarks>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Session.MessageStoringCompleted">
            <summary>
            Is raised when SMTP server has completed message storing.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_e_Message">
            <summary>
            This class provided data for <b cref="E:LumiSoft.Net.SMTP.Server.SMTP_Session.GetMessageStream">SMTP_Session.GetMessageStream</b> event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_e_Message.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner SMTP server session.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>session</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_Message.Session">
            <summary>
            Gets owner SMTP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_e_Message.Stream">
            <summary>
            Gets or stes stream where to store incoming message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_Registration">
            <summary>
            This class implements SIP registrar registration entry. Defined in RFC 3261 10.3.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name who owns this registration.</param>
            <param name="aor">Address of record. For example: john.doe@lumisoft.ee.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>aor</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.GetBinding(LumiSoft.Net.AbsoluteUri)">
            <summary>
            Gets matching binding. Returns null if no match.
            </summary>
            <param name="contactUri">URI to match.</param>
            <returns>Returns matching binding. Returns null if no match.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contactUri</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.AddOrUpdateBindings(LumiSoft.Net.SIP.Stack.SIP_Flow,System.String,System.Int32,LumiSoft.Net.SIP.Message.SIP_t_ContactParam[])">
            <summary>
            Adds or updates matching bindings.
            </summary>
            <param name="flow">SIP data flow what updates this binding. This value is null if binding was not added through network or
            flow has disposed.</param>
            <param name="callID">Call-ID header field value.</param>
            <param name="cseqNo">CSeq header field sequence number value.</param>
            <param name="contacts">Contacts to add or update.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>callID</b> or <b>contacts</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.RemoveBinding(LumiSoft.Net.SIP.Proxy.SIP_RegistrationBinding)">
            <summary>
            Removes specified binding.
            </summary>
            <param name="binding">Registration binding.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>binding</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.RemoveAllBindings">
            <summary>
            Removes all this registration bindings.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.RemoveExpiredBindings">
            <summary>
            Removes all expired bindings.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registration.CreateTime">
            <summary>
            Gets time when this registration entry was created.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registration.UserName">
            <summary>
            Gets user name who owns this registration.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registration.AOR">
            <summary>
            Gets registration address of record.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registration.Bindings">
            <summary>
            Gets this registration priority ordered bindings.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_Packet_SDES">
            <summary>
            This class represents SDES: Source Description RTCP Packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SDES.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SDES.ParseInternal(System.Byte[],System.Int32@)">
            <summary>
            Parses Source Description(SDES) packet from data buffer.
            </summary>
            <param name="buffer">Buffer what contains SDES packet.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_Packet_SDES.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores SDES packet to the specified buffer.
            </summary>
            <param name="buffer">Buffer where to store SDES packet.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES.Version">
            <summary>
            Gets RTCP version.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES.Type">
            <summary>
            Gets RTCP packet type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES.Chunks">
            <summary>
            Gets session description(SDES) chunks.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_Packet_SDES.Size">
            <summary>
            Gets number of bytes needed for this packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTCP_CompoundPacket">
            <summary>
            This class represents RTCP compound packet.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_CompoundPacket.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_CompoundPacket.Parse(System.Byte[],System.Int32)">
            <summary>
            Parses RTP compound packet.
            </summary>
            <param name="buffer">Data buffer..</param>
            <param name="count">Number of bytes in the <b>buffer</b>.</param>
            <returns>Returns parsed RTP packet.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_CompoundPacket.ToByte">
            <summary>
            Gets RTCP compound packet as raw byte data.
            </summary>
            <returns>Returns compound packet as raw byte data.</returns>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_CompoundPacket.ToByte(System.Byte[],System.Int32@)">
            <summary>
            Stores this compund packet to specified buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">Offset in buffer.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTCP_CompoundPacket.Validate">
            <summary>
            Validates RTCP compound packet.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid RTCP compound packet.</exception>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_CompoundPacket.Packets">
            <summary>
            Gets compound packets.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTCP_CompoundPacket.TotalSize">
            <summary>
            Gets total packets size in bytes which is needed for this compound packet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.RTP.RTP_Clock">
            <summary>
            Implements RTP media clock.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.RTP.RTP_Clock.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="baseValue">Clock base value from where clock starts.</param>
            <param name="rate">Clock rate in Hz.</param>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Clock.BaseValue">
            <summary>
            Gets clock base value from where clock started.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Clock.Rate">
            <summary>
            Gets current clock rate in Hz.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.RTP.RTP_Clock.RtpTimestamp">
            <summary>
            Gets current RTP timestamp.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Net_Utils">
            <summary>
            Common utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.GetLocalHostName(System.String)">
            <summary>
            Gets local host name or argument <b>hostName</b> value if it's specified.
            </summary>
            <param name="hostName">Host name or null.</param>
            <returns>Returns local host name or argument <b>hostName</b> value if it's specified.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CompareArray(System.Array,System.Array)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.CompareArray(System.Array,System.Array,System.Int32)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <param name="array2Count">Number of bytes in array 2 used for compare.</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsIPAddress(System.String)">
            <summary>
            Gets if the specified string value is IP address.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsMulticastAddress(System.Net.IPAddress)">
            <summary>
            Gets if the specified IP address is multicast address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns true if <b>ip</b> is muticast address, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> s null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.ParseIPEndPoint(System.String)">
            <summary>
            Parses IPEndPoint from the specified string value.
            </summary>
            <param name="value">IPEndPoint string value.</param>
            <returns>Returns parsed IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.IsIoCompletionPortsSupported">
            <summary>
            Gets if IO completion ports supported by OS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Net_Utils.Hex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns> 
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_ClientException">
            <summary>
            IMAP client exception.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_ClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">IMAP server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_ClientException.StatusCode">
            <summary>
            Gets IMAP server error status code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_ClientException.ResponseText">
            <summary>
            Gets IMAP server response text after status code.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_rr_SRV">
            <summary>
            DNS SRV record. SRV record specifies the location of services. Defined in RFC 2782.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_SRV.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="priority">Service priority.</param>
            <param name="weight">Weight value.</param>
            <param name="port">Service port.</param>
            <param name="target">Service provider host name or IP address.</param>
            <param name="ttl">Time to live value in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Parse(System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Priority">
            <summary>
            Gets service priority. Lowest value means greater priority.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Weight">
            <summary>
            Gets weight. The weight field specifies a relative weight for entries with the same priority. 
            Larger weights SHOULD be given a proportionately higher probability of being selected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Port">
            <summary>
            Port where service runs.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_rr_SRV.Target">
            <summary>
            Service provider host name or IP address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DNS_ClientException">
            <summary>
            DNS client exception.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DNS_ClientException.#ctor(LumiSoft.Net.Dns.Client.RCODE)">
            <summary>
            Default constructor.
            </summary>
            <param name="rcode">DNS server returned error code.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DNS_ClientException.ErrorCode">
            <summary>
            Gets DNS server returned error code.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ExceptionEventArgs">
            <summary>
            This class provides data for error events and methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference value.</exception>
        </member>
        <member name="P:LumiSoft.Net.ExceptionEventArgs.Exception">
            <summary>
            Gets exception.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.BalanceMode">
            <summary>
            This enum specified balance mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BalanceMode.LoadBalance">
            <summary>
            Operation is load balanched by all workers.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BalanceMode.FailOver">
            <summary>
            Operation will be handed over to next worker, if last one fails.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_MultipartSigned">
            <summary>
            This class represents MIME multipart/signed body. Defined in rfc 1847.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MultipartSigned.#ctor(LumiSoft.Net.MIME.MIME_h_ContentType)">
            <summary>
            Default constructor.
            </summary>
            <param name="contentType">Content type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>contentType</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LumiSoft.Net.MIME.MIME_b_MultipartSigned.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)" -->
        <member name="T:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus">
            <summary>
            This class represents MIME <b>message/delivery-status</b> body. Defined in RFC 3464.
            </summary>
            <remarks>
            <code>
            delivery-status-content =  per-message-fields 1*( CRLF per-recipient-fields )
            
            per-message-fields =
                       [ original-envelope-id-field CRLF ]
                       reporting-mta-field CRLF
                       [ dsn-gateway-field CRLF ]
                       [ received-from-mta-field CRLF ]
                       [ arrival-date-field CRLF ]
                       *( extension-field CRLF )
                       
            per-recipient-fields =
                     [ original-recipient-field CRLF ]
                     final-recipient-field CRLF
                     action-field CRLF
                     status-field CRLF
                     [ remote-mta-field CRLF ]
                     [ diagnostic-code-field CRLF ]
                     [ last-attempt-date-field CRLF ]
                     [ final-log-id-field CRLF ]
                     [ will-retry-until-field CRLF ]
                    *( extension-field CRLF )
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.ToStream(System.IO.Stream,LumiSoft.Net.MIME.MIME_Encoding_EncodedWord,System.Text.Encoding)">
            <summary>
            Stores MIME entity body to the specified stream.
            </summary>
            <param name="stream">Stream where to store body data.</param>
            <param name="headerWordEncoder">Header 8-bit words ecnoder. Value null means that words are not encoded.</param>
            <param name="headerParmetersCharset">Charset to use to encode 8-bit header parameters. Value null means parameters not encoded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.IsModified">
            <summary>
            Gets if body has modified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.MessageFields">
            <summary>
            Gets per-message fields collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is accessed and this body is not bounded to any entity.</exception>
        </member>
        <member name="P:LumiSoft.Net.MIME.MIME_b_MessageDeliveryStatus.RecipientBlocks">
            <summary>
            Gets reciepent report blocks collection.
            </summary>
            <remarks>Each block contains per-recipient-fields.</remarks>
        </member>
        <member name="T:LumiSoft.Net.MIME.MIME_b_Message">
            <summary>
            This class represents MIME message/xxx bodies. Defined in RFC 2046 5.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Message.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">MIME media type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>mediaType</b> is null reference.</exception>
        </member>
        <member name="M:LumiSoft.Net.MIME.MIME_b_Message.Parse(LumiSoft.Net.MIME.MIME_Entity,LumiSoft.Net.MIME.MIME_h_ContentType,LumiSoft.Net.IO.SmartStream)">
            <summary>
            Parses body from the specified stream
            </summary>
            <param name="owner">Owner MIME entity.</param>
            <param name="defaultContentType">Default content-type for this body.</param>
            <param name="stream">Stream from where to read body.</param>
            <returns>Returns parsed body.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b>, <b>defaultContentType</b> or <b>stream</b> is null reference.</exception>
            <exception cref="T:LumiSoft.Net.ParseException">Is raised when any parsing errors.</exception>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AuthHelper">
            <summary>
            Provides helper methods for authentications(APOP,CRAM-MD5,DIGEST-MD5).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Apop(System.String,System.String)">
            <summary>
            Calculates APOP authentication compare value.
            </summary>
            <param name="password">Password.</param>
            <param name="passwordTag">Password tag.</param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Cram_Md5(System.String,System.String)">
            <summary>
            Calculates CRAM-MD5 authentication compare value.
            </summary>
            <param name="password">Password.</param>
            <param name="hashKey">Hash calculation key</param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Digest_Md5(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Calculates DIGEST-MD5 authentication compare value.
            </summary>
            <param name="client_server">Specifies if client or server value calculated. 
            Client and server has diffrent calculation method.</param>
            <param name="realm">Use domain or machine name for this.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="nonce">Server password tag.</param>
            <param name="cnonce">Client password tag.</param>
            <param name="digest_uri"></param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Create_Digest_Md5_ServerResponse(System.String,System.String)">
            <summary>
            Creates AUTH Digest-md5 server response what server must send to client.
            </summary>
            <param name="realm">Use domain or machine name for this.</param>
            <param name="nonce">Server password tag. Random hex string is suggested.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.GenerateNonce">
            <summary>
            Generates random nonce value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.HmacMd5(System.String,System.String)">
            <summary>
            Calculates keyed md5 hash from specifieed text and with specified hash key.
            </summary>
            <param name="hashKey"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Md5(System.String)">
            <summary>
            Calculates md5 hash from specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Hex(System.String)">
            <summary>
            Converts specified string to hexa string.
            </summary>
            <param name="text"></param>
            <returns></returns> 
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Base64en(System.String)">
            <summary>
            Encodes specified string to base64 string.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded string.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Base64de(System.String)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="text">Base64 string to decode.</param>
            <returns>Returns decoded string.</returns>
        </member>
    </members>
</doc>
